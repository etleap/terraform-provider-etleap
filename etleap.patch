diff --git a/internal/sdk/pkg/models/shared/destinationtypes.go b/internal/sdk/pkg/models/shared/destinationtypes.go
index 9d91436..dd6079f 100644
--- a/internal/sdk/pkg/models/shared/destinationtypes.go
+++ b/internal/sdk/pkg/models/shared/destinationtypes.go
@@ -131,7 +131,8 @@ func (u *DestinationTypes) UnmarshalJSON(data []byte) error {
 		return nil
 	case "SNOWFLAKE":
 		destinationSnowflake := new(DestinationSnowflake)
-		if err := utils.UnmarshalJSON(data, &destinationSnowflake, "", true, true); err != nil {
+		// [VIK-4496] Etleap monkey-patch: the unmarshal function allows unknown fields for ignoring schemaChangingTo and tableChangingTo
+		if err := utils.UnmarshalJSON(data, &destinationSnowflake, "", true, false); err != nil {
 			return fmt.Errorf("could not unmarshal expected type: %w", err)
 		}
 
@@ -140,7 +141,8 @@ func (u *DestinationTypes) UnmarshalJSON(data []byte) error {
 		return nil
 	case "REDSHIFT":
 		destinationRedshift := new(DestinationRedshift)
-		if err := utils.UnmarshalJSON(data, &destinationRedshift, "", true, true); err != nil {
+		// [VIK-4496] Etleap monkey-patch: the unmarshal function allows unknown fields for ignoring schemaChangingTo and tableChangingTo
+		if err := utils.UnmarshalJSON(data, &destinationRedshift, "", true, false); err != nil {
 			return fmt.Errorf("could not unmarshal expected type: %w", err)
 		}
 
