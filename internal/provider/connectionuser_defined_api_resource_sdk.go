// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *ConnectionUSERDEFINEDAPIResourceModel) ToSharedConnectionUserDefinedAPIInput() *shared.ConnectionUserDefinedAPIInput {
	name := r.Name.ValueString()
	typeVar := shared.ConnectionUserDefinedAPIType(r.Type.ValueString())
	var updateSchedule *shared.UpdateScheduleTypes
	if r.UpdateSchedule != nil {
		var updateScheduleModeInterval *shared.UpdateScheduleModeInterval
		if r.UpdateSchedule.Interval != nil {
			mode := shared.Mode(r.UpdateSchedule.Interval.Mode.ValueString())
			intervalMinutes := r.UpdateSchedule.Interval.IntervalMinutes.ValueInt64()
			updateScheduleModeInterval = &shared.UpdateScheduleModeInterval{
				Mode:            mode,
				IntervalMinutes: intervalMinutes,
			}
		}
		if updateScheduleModeInterval != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeInterval: updateScheduleModeInterval,
			}
		}
		var updateScheduleModeHourly *shared.UpdateScheduleModeHourly
		if r.UpdateSchedule.Hourly != nil {
			mode1 := shared.UpdateScheduleModeHourlyMode(r.UpdateSchedule.Hourly.Mode.ValueString())
			updateScheduleModeHourly = &shared.UpdateScheduleModeHourly{
				Mode: mode1,
			}
		}
		if updateScheduleModeHourly != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeHourly: updateScheduleModeHourly,
			}
		}
		var updateScheduleModeDaily *shared.UpdateScheduleModeDaily
		if r.UpdateSchedule.Daily != nil {
			mode2 := shared.UpdateScheduleModeDailyMode(r.UpdateSchedule.Daily.Mode.ValueString())
			hourOfDay := r.UpdateSchedule.Daily.HourOfDay.ValueInt64()
			updateScheduleModeDaily = &shared.UpdateScheduleModeDaily{
				Mode:      mode2,
				HourOfDay: hourOfDay,
			}
		}
		if updateScheduleModeDaily != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeDaily: updateScheduleModeDaily,
			}
		}
		var updateScheduleModeWeekly *shared.UpdateScheduleModeWeekly
		if r.UpdateSchedule.Weekly != nil {
			mode3 := shared.UpdateScheduleModeWeeklyMode(r.UpdateSchedule.Weekly.Mode.ValueString())
			dayOfWeek := r.UpdateSchedule.Weekly.DayOfWeek.ValueInt64()
			hourOfDay1 := r.UpdateSchedule.Weekly.HourOfDay.ValueInt64()
			updateScheduleModeWeekly = &shared.UpdateScheduleModeWeekly{
				Mode:      mode3,
				DayOfWeek: dayOfWeek,
				HourOfDay: hourOfDay1,
			}
		}
		if updateScheduleModeWeekly != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeWeekly: updateScheduleModeWeekly,
			}
		}
		var updateScheduleModeMonthly *shared.UpdateScheduleModeMonthly
		if r.UpdateSchedule.Monthly != nil {
			mode4 := shared.UpdateScheduleModeMonthlyMode(r.UpdateSchedule.Monthly.Mode.ValueString())
			hourOfDay2 := r.UpdateSchedule.Monthly.HourOfDay.ValueInt64()
			dayOfMonth := r.UpdateSchedule.Monthly.DayOfMonth.ValueInt64()
			updateScheduleModeMonthly = &shared.UpdateScheduleModeMonthly{
				Mode:       mode4,
				HourOfDay:  hourOfDay2,
				DayOfMonth: dayOfMonth,
			}
		}
		if updateScheduleModeMonthly != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeMonthly: updateScheduleModeMonthly,
			}
		}
	}
	var entities []shared.UserDefinedAPIEntity = nil
	for _, entitiesItem := range r.Entities {
		id := entitiesItem.ID.ValueString()
		var columns []interface{} = nil
		for _, columnsItem := range entitiesItem.Columns {
			var columnsTmp interface{}
			_ = json.Unmarshal([]byte(columnsItem.ValueString()), &columnsTmp)
			columns = append(columns, columnsTmp)
		}
		displayName := entitiesItem.DisplayName.ValueString()
		var restMethod shared.RestMethod
		restMethod1 := new(shared.RestMethod1)
		if !entitiesItem.RestMethod.One.IsUnknown() && !entitiesItem.RestMethod.One.IsNull() {
			*restMethod1 = shared.RestMethod1(entitiesItem.RestMethod.One.ValueString())
		} else {
			restMethod1 = nil
		}
		if restMethod1 != nil {
			restMethod = shared.RestMethod{
				RestMethod1: restMethod1,
			}
		}
		var postMethod *shared.PostMethod
		if entitiesItem.RestMethod.PostMethod != nil {
			typeVar1 := new(shared.PostMethodType)
			if !entitiesItem.RestMethod.PostMethod.Type.IsUnknown() && !entitiesItem.RestMethod.PostMethod.Type.IsNull() {
				*typeVar1 = shared.PostMethodType(entitiesItem.RestMethod.PostMethod.Type.ValueString())
			} else {
				typeVar1 = nil
			}
			var bodyParameters []shared.BodyParameters = nil
			for _, bodyParametersItem := range entitiesItem.RestMethod.PostMethod.BodyParameters {
				value := bodyParametersItem.Value.ValueString()
				key := bodyParametersItem.Key.ValueString()
				bodyParameters = append(bodyParameters, shared.BodyParameters{
					Value: value,
					Key:   key,
				})
			}
			postMethod = &shared.PostMethod{
				Type:           typeVar1,
				BodyParameters: bodyParameters,
			}
		}
		if postMethod != nil {
			restMethod = shared.RestMethod{
				PostMethod: postMethod,
			}
		}
		var headerParameters []shared.HeaderParameters = nil
		for _, headerParametersItem := range entitiesItem.HeaderParameters {
			value1 := headerParametersItem.Value.ValueString()
			key1 := headerParametersItem.Key.ValueString()
			headerParameters = append(headerParameters, shared.HeaderParameters{
				Value: value1,
				Key:   key1,
			})
		}
		var pagingStrategy *shared.PagingStrategy
		if entitiesItem.PagingStrategy != nil {
			var cursorURIPagingStrategy *shared.CursorURIPagingStrategy
			if entitiesItem.PagingStrategy.CursorURI != nil {
				pageSizeFieldName := entitiesItem.PagingStrategy.CursorURI.PageSizeFieldName.ValueString()
				maxPageSize := entitiesItem.PagingStrategy.CursorURI.MaxPageSize.ValueInt64()
				pathToCursor := entitiesItem.PagingStrategy.CursorURI.PathToCursor.ValueString()
				typeVar2 := new(shared.CursorURIPagingStrategyType)
				if !entitiesItem.PagingStrategy.CursorURI.Type.IsUnknown() && !entitiesItem.PagingStrategy.CursorURI.Type.IsNull() {
					*typeVar2 = shared.CursorURIPagingStrategyType(entitiesItem.PagingStrategy.CursorURI.Type.ValueString())
				} else {
					typeVar2 = nil
				}
				urlPrefix := entitiesItem.PagingStrategy.CursorURI.URLPrefix.ValueString()
				cursorURIPagingStrategy = &shared.CursorURIPagingStrategy{
					PageSizeFieldName: pageSizeFieldName,
					MaxPageSize:       maxPageSize,
					PathToCursor:      pathToCursor,
					Type:              typeVar2,
					URLPrefix:         urlPrefix,
				}
			}
			if cursorURIPagingStrategy != nil {
				pagingStrategy = &shared.PagingStrategy{
					CursorURIPagingStrategy: cursorURIPagingStrategy,
				}
			}
			var offsetPagingStrategy *shared.OffsetPagingStrategy
			if entitiesItem.PagingStrategy.Offset != nil {
				pageSizeFieldName1 := entitiesItem.PagingStrategy.Offset.PageSizeFieldName.ValueString()
				maxPageSize1 := entitiesItem.PagingStrategy.Offset.MaxPageSize.ValueInt64()
				typeVar3 := new(shared.OffsetPagingStrategyType)
				if !entitiesItem.PagingStrategy.Offset.Type.IsUnknown() && !entitiesItem.PagingStrategy.Offset.Type.IsNull() {
					*typeVar3 = shared.OffsetPagingStrategyType(entitiesItem.PagingStrategy.Offset.Type.ValueString())
				} else {
					typeVar3 = nil
				}
				offsetFieldName := entitiesItem.PagingStrategy.Offset.OffsetFieldName.ValueString()
				offsetPagingStrategy = &shared.OffsetPagingStrategy{
					PageSizeFieldName: pageSizeFieldName1,
					MaxPageSize:       maxPageSize1,
					Type:              typeVar3,
					OffsetFieldName:   offsetFieldName,
				}
			}
			if offsetPagingStrategy != nil {
				pagingStrategy = &shared.PagingStrategy{
					OffsetPagingStrategy: offsetPagingStrategy,
				}
			}
		}
		var queryParameters []shared.QueryParameters = nil
		for _, queryParametersItem := range entitiesItem.QueryParameters {
			value2 := queryParametersItem.Value.ValueString()
			key2 := queryParametersItem.Key.ValueString()
			queryParameters = append(queryParameters, shared.QueryParameters{
				Value: value2,
				Key:   key2,
			})
		}
		var pipelineMode shared.UserDefinedAPIPipelineMode
		userDefinedAPIPipelineMode1 := new(shared.UserDefinedAPIPipelineMode1)
		if !entitiesItem.PipelineMode.One.IsUnknown() && !entitiesItem.PipelineMode.One.IsNull() {
			*userDefinedAPIPipelineMode1 = shared.UserDefinedAPIPipelineMode1(entitiesItem.PipelineMode.One.ValueString())
		} else {
			userDefinedAPIPipelineMode1 = nil
		}
		if userDefinedAPIPipelineMode1 != nil {
			pipelineMode = shared.UserDefinedAPIPipelineMode{
				UserDefinedAPIPipelineMode1: userDefinedAPIPipelineMode1,
			}
		}
		var userDefinedAPIReplaceMode *shared.UserDefinedAPIReplaceMode
		if entitiesItem.PipelineMode.UserDefinedAPIReplaceMode != nil {
			typeVar4 := new(shared.UserDefinedAPIReplaceModeType)
			if !entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.Type.IsUnknown() && !entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.Type.IsNull() {
				*typeVar4 = shared.UserDefinedAPIReplaceModeType(entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.Type.ValueString())
			} else {
				typeVar4 = nil
			}
			var primaryKeyColumns []string = nil
			for _, primaryKeyColumnsItem := range entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.PrimaryKeyColumns {
				primaryKeyColumns = append(primaryKeyColumns, primaryKeyColumnsItem.ValueString())
			}
			var foreignKeyColumns []shared.SchemaV1ForeignKeyColumn = nil
			for _, foreignKeyColumnsItem := range entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.ForeignKeyColumns {
				if foreignKeyColumnsItem.TopLevelForeignKeyColumn != nil {
					columnName := foreignKeyColumnsItem.TopLevelForeignKeyColumn.ColumnName.ValueString()
					referencedEntityID := foreignKeyColumnsItem.TopLevelForeignKeyColumn.ReferencedEntityID.ValueString()
					referencedColumnName := foreignKeyColumnsItem.TopLevelForeignKeyColumn.ReferencedColumnName.ValueString()
					topLevelForeignKeyColumn := shared.TopLevelForeignKeyColumn{
						ColumnName:           columnName,
						ReferencedEntityID:   referencedEntityID,
						ReferencedColumnName: referencedColumnName,
					}
					foreignKeyColumns = append(foreignKeyColumns, shared.SchemaV1ForeignKeyColumn{
						TopLevelForeignKeyColumn: &topLevelForeignKeyColumn,
					})
				}
				if foreignKeyColumnsItem.ForeignColumn != nil {
					var columnPath []string = nil
					for _, columnPathItem := range foreignKeyColumnsItem.ForeignColumn.ColumnPath {
						columnPath = append(columnPath, columnPathItem.ValueString())
					}
					referencedEntityId1 := foreignKeyColumnsItem.ForeignColumn.ReferencedEntityID.ValueString()
					referencedColumnName1 := foreignKeyColumnsItem.ForeignColumn.ReferencedColumnName.ValueString()
					foreignColumn := shared.ForeignColumn{
						ColumnPath:           columnPath,
						ReferencedEntityID:   referencedEntityId1,
						ReferencedColumnName: referencedColumnName1,
					}
					foreignKeyColumns = append(foreignKeyColumns, shared.SchemaV1ForeignKeyColumn{
						ForeignColumn: &foreignColumn,
					})
				}
			}
			userDefinedAPIReplaceMode = &shared.UserDefinedAPIReplaceMode{
				Type:              typeVar4,
				PrimaryKeyColumns: primaryKeyColumns,
				ForeignKeyColumns: foreignKeyColumns,
			}
		}
		if userDefinedAPIReplaceMode != nil {
			pipelineMode = shared.UserDefinedAPIPipelineMode{
				UserDefinedAPIReplaceMode: userDefinedAPIReplaceMode,
			}
		}
		var userDefinedAPIUpdateMode *shared.UserDefinedAPIUpdateMode
		if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode != nil {
			var strategy *shared.UpdateModeStrategyTypes
			if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy != nil {
				var wallClockStrategy *shared.WallClockStrategy
				if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock != nil {
					typeVar5 := shared.WallClockStrategyType(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.Type.ValueString())
					var endDateParameter *shared.InclusiveOrExclusiveWatermarkDateonlyKeyValuePair
					if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter != nil {
						value3 := entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Value.ValueString()
						key3 := entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Key.ValueString()
						format := new(shared.Format)
						if !entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Format.IsUnknown() && !entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Format.IsNull() {
							*format = shared.Format(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Format.ValueString())
						} else {
							format = nil
						}
						inclusive := new(bool)
						if !entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Inclusive.IsUnknown() && !entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Inclusive.IsNull() {
							*inclusive = entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Inclusive.ValueBool()
						} else {
							inclusive = nil
						}
						endDateParameter = &shared.InclusiveOrExclusiveWatermarkDateonlyKeyValuePair{
							Value:     value3,
							Key:       key3,
							Format:    format,
							Inclusive: inclusive,
						}
					}
					lookbackWindow := entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.LookbackWindow.ValueInt64()
					value4 := entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.BeginDateParameter.Value.ValueString()
					key4 := entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.BeginDateParameter.Key.ValueString()
					format1 := new(shared.WatermarkDateonlyKeyValuePairFormat)
					if !entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.BeginDateParameter.Format.IsUnknown() && !entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.BeginDateParameter.Format.IsNull() {
						*format1 = shared.WatermarkDateonlyKeyValuePairFormat(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.BeginDateParameter.Format.ValueString())
					} else {
						format1 = nil
					}
					beginDateParameter := shared.WatermarkDateonlyKeyValuePair{
						Value:  value4,
						Key:    key4,
						Format: format1,
					}
					wallClockStrategy = &shared.WallClockStrategy{
						Type:               typeVar5,
						EndDateParameter:   endDateParameter,
						LookbackWindow:     lookbackWindow,
						BeginDateParameter: beginDateParameter,
					}
				}
				if wallClockStrategy != nil {
					strategy = &shared.UpdateModeStrategyTypes{
						WallClockStrategy: wallClockStrategy,
					}
				}
				var extractedDataStrategy *shared.ExtractedDataStrategy
				if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData != nil {
					typeVar6 := shared.ExtractedDataStrategyType(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.Type.ValueString())
					var endTimeParameter *shared.WatermarkDatetimeKeyValuePair
					if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.EndTimeParameter != nil {
						value5 := entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.EndTimeParameter.Value.ValueString()
						key5 := entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.EndTimeParameter.Key.ValueString()
						format2 := new(shared.WatermarkDatetimeKeyValuePairFormat)
						if !entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.EndTimeParameter.Format.IsUnknown() && !entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.EndTimeParameter.Format.IsNull() {
							*format2 = shared.WatermarkDatetimeKeyValuePairFormat(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.EndTimeParameter.Format.ValueString())
						} else {
							format2 = nil
						}
						endTimeParameter = &shared.WatermarkDatetimeKeyValuePair{
							Value:  value5,
							Key:    key5,
							Format: format2,
						}
					}
					var highWatermarkQueryParameters []shared.KeyValuePair = nil
					for _, highWatermarkQueryParametersItem := range entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.HighWatermarkQueryParameters {
						value6 := highWatermarkQueryParametersItem.Value.ValueString()
						key6 := highWatermarkQueryParametersItem.Key.ValueString()
						highWatermarkQueryParameters = append(highWatermarkQueryParameters, shared.KeyValuePair{
							Value: value6,
							Key:   key6,
						})
					}
					value7 := entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.BeginTimeParameter.Value.ValueString()
					key7 := entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.BeginTimeParameter.Key.ValueString()
					format3 := new(shared.WatermarkDatetimeKeyValuePairFormat)
					if !entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.BeginTimeParameter.Format.IsUnknown() && !entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.BeginTimeParameter.Format.IsNull() {
						*format3 = shared.WatermarkDatetimeKeyValuePairFormat(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.BeginTimeParameter.Format.ValueString())
					} else {
						format3 = nil
					}
					beginTimeParameter := shared.WatermarkDatetimeKeyValuePair{
						Value:  value7,
						Key:    key7,
						Format: format3,
					}
					lastUpdatedColumn := entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.LastUpdatedColumn.ValueString()
					extractedDataStrategy = &shared.ExtractedDataStrategy{
						Type:                         typeVar6,
						EndTimeParameter:             endTimeParameter,
						HighWatermarkQueryParameters: highWatermarkQueryParameters,
						BeginTimeParameter:           beginTimeParameter,
						LastUpdatedColumn:            lastUpdatedColumn,
					}
				}
				if extractedDataStrategy != nil {
					strategy = &shared.UpdateModeStrategyTypes{
						ExtractedDataStrategy: extractedDataStrategy,
					}
				}
			}
			typeVar7 := new(shared.UserDefinedAPIUpdateModeType)
			if !entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Type.IsUnknown() && !entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Type.IsNull() {
				*typeVar7 = shared.UserDefinedAPIUpdateModeType(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Type.ValueString())
			} else {
				typeVar7 = nil
			}
			var primaryKeyColumns1 []string = nil
			for _, primaryKeyColumnsItem1 := range entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.PrimaryKeyColumns {
				primaryKeyColumns1 = append(primaryKeyColumns1, primaryKeyColumnsItem1.ValueString())
			}
			var foreignKeyColumns1 []shared.SchemaV1ForeignKeyColumn = nil
			for _, foreignKeyColumnsItem1 := range entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.ForeignKeyColumns {
				if foreignKeyColumnsItem1.TopLevelForeignKeyColumn != nil {
					columnName1 := foreignKeyColumnsItem1.TopLevelForeignKeyColumn.ColumnName.ValueString()
					referencedEntityId2 := foreignKeyColumnsItem1.TopLevelForeignKeyColumn.ReferencedEntityID.ValueString()
					referencedColumnName2 := foreignKeyColumnsItem1.TopLevelForeignKeyColumn.ReferencedColumnName.ValueString()
					topLevelForeignKeyColumn1 := shared.TopLevelForeignKeyColumn{
						ColumnName:           columnName1,
						ReferencedEntityID:   referencedEntityId2,
						ReferencedColumnName: referencedColumnName2,
					}
					foreignKeyColumns1 = append(foreignKeyColumns1, shared.SchemaV1ForeignKeyColumn{
						TopLevelForeignKeyColumn: &topLevelForeignKeyColumn1,
					})
				}
				if foreignKeyColumnsItem1.ForeignColumn != nil {
					var columnPath1 []string = nil
					for _, columnPathItem1 := range foreignKeyColumnsItem1.ForeignColumn.ColumnPath {
						columnPath1 = append(columnPath1, columnPathItem1.ValueString())
					}
					referencedEntityId3 := foreignKeyColumnsItem1.ForeignColumn.ReferencedEntityID.ValueString()
					referencedColumnName3 := foreignKeyColumnsItem1.ForeignColumn.ReferencedColumnName.ValueString()
					foreignColumn1 := shared.ForeignColumn{
						ColumnPath:           columnPath1,
						ReferencedEntityID:   referencedEntityId3,
						ReferencedColumnName: referencedColumnName3,
					}
					foreignKeyColumns1 = append(foreignKeyColumns1, shared.SchemaV1ForeignKeyColumn{
						ForeignColumn: &foreignColumn1,
					})
				}
			}
			userDefinedAPIUpdateMode = &shared.UserDefinedAPIUpdateMode{
				Strategy:          strategy,
				Type:              typeVar7,
				PrimaryKeyColumns: primaryKeyColumns1,
				ForeignKeyColumns: foreignKeyColumns1,
			}
		}
		if userDefinedAPIUpdateMode != nil {
			pipelineMode = shared.UserDefinedAPIPipelineMode{
				UserDefinedAPIUpdateMode: userDefinedAPIUpdateMode,
			}
		}
		apiURL := entitiesItem.APIURL.ValueString()
		pathToResults := entitiesItem.PathToResults.ValueString()
		entities = append(entities, shared.UserDefinedAPIEntity{
			ID:               id,
			Columns:          columns,
			DisplayName:      displayName,
			RestMethod:       restMethod,
			HeaderParameters: headerParameters,
			PagingStrategy:   pagingStrategy,
			QueryParameters:  queryParameters,
			PipelineMode:     pipelineMode,
			APIURL:           apiURL,
			PathToResults:    pathToResults,
		})
	}
	var authentication shared.Authentication
	var basicAuthentication *shared.BasicAuthentication
	if r.Authentication.Basic != nil {
		username := r.Authentication.Basic.Username.ValueString()
		password := r.Authentication.Basic.Password.ValueString()
		typeVar8 := new(shared.BasicAuthenticationType)
		if !r.Authentication.Basic.Type.IsUnknown() && !r.Authentication.Basic.Type.IsNull() {
			*typeVar8 = shared.BasicAuthenticationType(r.Authentication.Basic.Type.ValueString())
		} else {
			typeVar8 = nil
		}
		basicAuthentication = &shared.BasicAuthentication{
			Username: username,
			Password: password,
			Type:     typeVar8,
		}
	}
	if basicAuthentication != nil {
		authentication = shared.Authentication{
			BasicAuthentication: basicAuthentication,
		}
	}
	var bearerAuthentication *shared.BearerAuthentication
	if r.Authentication.Bearer != nil {
		token := r.Authentication.Bearer.Token.ValueString()
		typeVar9 := new(shared.BearerAuthenticationType)
		if !r.Authentication.Bearer.Type.IsUnknown() && !r.Authentication.Bearer.Type.IsNull() {
			*typeVar9 = shared.BearerAuthenticationType(r.Authentication.Bearer.Type.ValueString())
		} else {
			typeVar9 = nil
		}
		bearerAuthentication = &shared.BearerAuthentication{
			Token: token,
			Type:  typeVar9,
		}
	}
	if bearerAuthentication != nil {
		authentication = shared.Authentication{
			BearerAuthentication: bearerAuthentication,
		}
	}
	var headerAuthentication *shared.HeaderAuthentication
	if r.Authentication.Header != nil {
		value8 := r.Authentication.Header.Value.ValueString()
		key8 := r.Authentication.Header.Key.ValueString()
		typeVar10 := new(shared.HeaderAuthenticationType)
		if !r.Authentication.Header.Type.IsUnknown() && !r.Authentication.Header.Type.IsNull() {
			*typeVar10 = shared.HeaderAuthenticationType(r.Authentication.Header.Type.ValueString())
		} else {
			typeVar10 = nil
		}
		headerAuthentication = &shared.HeaderAuthentication{
			Value: value8,
			Key:   key8,
			Type:  typeVar10,
		}
	}
	if headerAuthentication != nil {
		authentication = shared.Authentication{
			HeaderAuthentication: headerAuthentication,
		}
	}
	out := shared.ConnectionUserDefinedAPIInput{
		Name:           name,
		Type:           typeVar,
		UpdateSchedule: updateSchedule,
		Entities:       entities,
		Authentication: authentication,
	}
	return &out
}

func (r *ConnectionUSERDEFINEDAPIResourceModel) RefreshFromSharedConnectionUserDefinedAPI(resp *shared.ConnectionUserDefinedAPI) {
	r.Active = types.BoolValue(resp.Active)
	if resp.Authentication.BasicAuthentication != nil {
		r.Authentication.Basic = &BasicAuthentication{}
		r.Authentication.Basic.Password = types.StringValue(resp.Authentication.BasicAuthentication.Password)
		if resp.Authentication.BasicAuthentication.Type != nil {
			r.Authentication.Basic.Type = types.StringValue(string(*resp.Authentication.BasicAuthentication.Type))
		} else {
			r.Authentication.Basic.Type = types.StringNull()
		}
		r.Authentication.Basic.Username = types.StringValue(resp.Authentication.BasicAuthentication.Username)
	}
	if resp.Authentication.BearerAuthentication != nil {
		r.Authentication.Bearer = &BearerAuthentication{}
		r.Authentication.Bearer.Token = types.StringValue(resp.Authentication.BearerAuthentication.Token)
		if resp.Authentication.BearerAuthentication.Type != nil {
			r.Authentication.Bearer.Type = types.StringValue(string(*resp.Authentication.BearerAuthentication.Type))
		} else {
			r.Authentication.Bearer.Type = types.StringNull()
		}
	}
	if resp.Authentication.HeaderAuthentication != nil {
		r.Authentication.Header = &HeaderAuthentication{}
		r.Authentication.Header.Key = types.StringValue(resp.Authentication.HeaderAuthentication.Key)
		if resp.Authentication.HeaderAuthentication.Type != nil {
			r.Authentication.Header.Type = types.StringValue(string(*resp.Authentication.HeaderAuthentication.Type))
		} else {
			r.Authentication.Header.Type = types.StringNull()
		}
		r.Authentication.Header.Value = types.StringValue(resp.Authentication.HeaderAuthentication.Value)
	}
	r.CreateDate = types.StringValue(resp.CreateDate.Format(time.RFC3339Nano))
	if len(r.DefaultUpdateSchedule) > len(resp.DefaultUpdateSchedule) {
		r.DefaultUpdateSchedule = r.DefaultUpdateSchedule[:len(resp.DefaultUpdateSchedule)]
	}
	for defaultUpdateScheduleCount, defaultUpdateScheduleItem := range resp.DefaultUpdateSchedule {
		var defaultUpdateSchedule1 ConnectionActiveCampaignDefaultUpdateSchedule
		if defaultUpdateScheduleItem.PipelineMode != nil {
			defaultUpdateSchedule1.PipelineMode = types.StringValue(string(*defaultUpdateScheduleItem.PipelineMode))
		} else {
			defaultUpdateSchedule1.PipelineMode = types.StringNull()
		}
		if defaultUpdateScheduleItem.UpdateSchedule == nil {
			defaultUpdateSchedule1.UpdateSchedule = nil
		} else {
			defaultUpdateSchedule1.UpdateSchedule = &UpdateScheduleTypes{}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeDaily != nil {
				defaultUpdateSchedule1.UpdateSchedule.Daily = &UpdateScheduleModeDaily{}
				defaultUpdateSchedule1.UpdateSchedule.Daily.HourOfDay = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeDaily.HourOfDay)
				defaultUpdateSchedule1.UpdateSchedule.Daily.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeDaily.Mode))
			}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeHourly != nil {
				defaultUpdateSchedule1.UpdateSchedule.Hourly = &UpdateScheduleModeHourly{}
				defaultUpdateSchedule1.UpdateSchedule.Hourly.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeHourly.Mode))
			}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeInterval != nil {
				defaultUpdateSchedule1.UpdateSchedule.Interval = &UpdateScheduleModeInterval{}
				defaultUpdateSchedule1.UpdateSchedule.Interval.IntervalMinutes = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeInterval.IntervalMinutes)
				defaultUpdateSchedule1.UpdateSchedule.Interval.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeInterval.Mode))
			}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeMonthly != nil {
				defaultUpdateSchedule1.UpdateSchedule.Monthly = &UpdateScheduleModeMonthly{}
				defaultUpdateSchedule1.UpdateSchedule.Monthly.DayOfMonth = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeMonthly.DayOfMonth)
				defaultUpdateSchedule1.UpdateSchedule.Monthly.HourOfDay = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeMonthly.HourOfDay)
				defaultUpdateSchedule1.UpdateSchedule.Monthly.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeMonthly.Mode))
			}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeWeekly != nil {
				defaultUpdateSchedule1.UpdateSchedule.Weekly = &UpdateScheduleModeWeekly{}
				defaultUpdateSchedule1.UpdateSchedule.Weekly.DayOfWeek = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeWeekly.DayOfWeek)
				defaultUpdateSchedule1.UpdateSchedule.Weekly.HourOfDay = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeWeekly.HourOfDay)
				defaultUpdateSchedule1.UpdateSchedule.Weekly.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeWeekly.Mode))
			}
		}
		if defaultUpdateScheduleCount+1 > len(r.DefaultUpdateSchedule) {
			r.DefaultUpdateSchedule = append(r.DefaultUpdateSchedule, defaultUpdateSchedule1)
		} else {
			r.DefaultUpdateSchedule[defaultUpdateScheduleCount].PipelineMode = defaultUpdateSchedule1.PipelineMode
			r.DefaultUpdateSchedule[defaultUpdateScheduleCount].UpdateSchedule = defaultUpdateSchedule1.UpdateSchedule
		}
	}
	if len(r.Entities) > len(resp.Entities) {
		r.Entities = r.Entities[:len(resp.Entities)]
	}
	for entitiesCount, entitiesItem := range resp.Entities {
		var entities1 UserDefinedAPIEntity
		entities1.APIURL = types.StringValue(entitiesItem.APIURL)
		entities1.Columns = nil
		for _, columnsItem := range entitiesItem.Columns {
			var columns1 types.String
			columns1Result, _ := json.Marshal(columnsItem)
			columns1 = types.StringValue(string(columns1Result))
			entities1.Columns = append(entities1.Columns, columns1)
		}
		entities1.DisplayName = types.StringValue(entitiesItem.DisplayName)
		for headerParametersCount, headerParametersItem := range entitiesItem.HeaderParameters {
			var headerParameters1 HeaderParameters
			headerParameters1.Key = types.StringValue(headerParametersItem.Key)
			headerParameters1.Value = types.StringValue(headerParametersItem.Value)
			if headerParametersCount+1 > len(entities1.HeaderParameters) {
				entities1.HeaderParameters = append(entities1.HeaderParameters, headerParameters1)
			} else {
				entities1.HeaderParameters[headerParametersCount].Key = headerParameters1.Key
				entities1.HeaderParameters[headerParametersCount].Value = headerParameters1.Value
			}
		}
		entities1.ID = types.StringValue(entitiesItem.ID)
		if entitiesItem.PagingStrategy == nil {
			entities1.PagingStrategy = nil
		} else {
			entities1.PagingStrategy = &PagingStrategy{}
			if entitiesItem.PagingStrategy.CursorURIPagingStrategy != nil {
				entities1.PagingStrategy.CursorURI = &CursorURIPagingStrategy{}
				entities1.PagingStrategy.CursorURI.MaxPageSize = types.Int64Value(entitiesItem.PagingStrategy.CursorURIPagingStrategy.MaxPageSize)
				entities1.PagingStrategy.CursorURI.PageSizeFieldName = types.StringValue(entitiesItem.PagingStrategy.CursorURIPagingStrategy.PageSizeFieldName)
				entities1.PagingStrategy.CursorURI.PathToCursor = types.StringValue(entitiesItem.PagingStrategy.CursorURIPagingStrategy.PathToCursor)
				if entitiesItem.PagingStrategy.CursorURIPagingStrategy.Type != nil {
					entities1.PagingStrategy.CursorURI.Type = types.StringValue(string(*entitiesItem.PagingStrategy.CursorURIPagingStrategy.Type))
				} else {
					entities1.PagingStrategy.CursorURI.Type = types.StringNull()
				}
				entities1.PagingStrategy.CursorURI.URLPrefix = types.StringValue(entitiesItem.PagingStrategy.CursorURIPagingStrategy.URLPrefix)
			}
			if entitiesItem.PagingStrategy.OffsetPagingStrategy != nil {
				entities1.PagingStrategy.Offset = &OffsetPagingStrategy{}
				entities1.PagingStrategy.Offset.MaxPageSize = types.Int64Value(entitiesItem.PagingStrategy.OffsetPagingStrategy.MaxPageSize)
				entities1.PagingStrategy.Offset.OffsetFieldName = types.StringValue(entitiesItem.PagingStrategy.OffsetPagingStrategy.OffsetFieldName)
				entities1.PagingStrategy.Offset.PageSizeFieldName = types.StringValue(entitiesItem.PagingStrategy.OffsetPagingStrategy.PageSizeFieldName)
				if entitiesItem.PagingStrategy.OffsetPagingStrategy.Type != nil {
					entities1.PagingStrategy.Offset.Type = types.StringValue(string(*entitiesItem.PagingStrategy.OffsetPagingStrategy.Type))
				} else {
					entities1.PagingStrategy.Offset.Type = types.StringNull()
				}
			}
		}
		entities1.PathToResults = types.StringValue(entitiesItem.PathToResults)
		if entitiesItem.PipelineMode.UserDefinedAPIPipelineMode1 != nil {
			if entitiesItem.PipelineMode.UserDefinedAPIPipelineMode1 != nil {
				entities1.PipelineMode.One = types.StringValue(string(*entitiesItem.PipelineMode.UserDefinedAPIPipelineMode1))
			} else {
				entities1.PipelineMode.One = types.StringNull()
			}
		}
		if entitiesItem.PipelineMode.UserDefinedAPIReplaceMode != nil {
			entities1.PipelineMode.UserDefinedAPIReplaceMode = &UserDefinedAPIReplaceMode{}
			for foreignKeyColumnsCount, foreignKeyColumnsItem := range entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.ForeignKeyColumns {
				var foreignKeyColumns1 SchemaV1ForeignKeyColumn
				if foreignKeyColumnsItem.ForeignColumn != nil {
					foreignKeyColumns1.ForeignColumn = &ForeignColumn{}
					foreignKeyColumns1.ForeignColumn.ColumnPath = nil
					for _, v := range foreignKeyColumnsItem.ForeignColumn.ColumnPath {
						foreignKeyColumns1.ForeignColumn.ColumnPath = append(foreignKeyColumns1.ForeignColumn.ColumnPath, types.StringValue(v))
					}
					foreignKeyColumns1.ForeignColumn.ReferencedColumnName = types.StringValue(foreignKeyColumnsItem.ForeignColumn.ReferencedColumnName)
					foreignKeyColumns1.ForeignColumn.ReferencedEntityID = types.StringValue(foreignKeyColumnsItem.ForeignColumn.ReferencedEntityID)
				}
				if foreignKeyColumnsItem.TopLevelForeignKeyColumn != nil {
					foreignKeyColumns1.TopLevelForeignKeyColumn = &TopLevelForeignKeyColumn{}
					foreignKeyColumns1.TopLevelForeignKeyColumn.ColumnName = types.StringValue(foreignKeyColumnsItem.TopLevelForeignKeyColumn.ColumnName)
					foreignKeyColumns1.TopLevelForeignKeyColumn.ReferencedColumnName = types.StringValue(foreignKeyColumnsItem.TopLevelForeignKeyColumn.ReferencedColumnName)
					foreignKeyColumns1.TopLevelForeignKeyColumn.ReferencedEntityID = types.StringValue(foreignKeyColumnsItem.TopLevelForeignKeyColumn.ReferencedEntityID)
				}
				if foreignKeyColumnsCount+1 > len(entities1.PipelineMode.UserDefinedAPIReplaceMode.ForeignKeyColumns) {
					entities1.PipelineMode.UserDefinedAPIReplaceMode.ForeignKeyColumns = append(entities1.PipelineMode.UserDefinedAPIReplaceMode.ForeignKeyColumns, foreignKeyColumns1)
				} else {
				}
			}
			entities1.PipelineMode.UserDefinedAPIReplaceMode.PrimaryKeyColumns = nil
			for _, v := range entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.PrimaryKeyColumns {
				entities1.PipelineMode.UserDefinedAPIReplaceMode.PrimaryKeyColumns = append(entities1.PipelineMode.UserDefinedAPIReplaceMode.PrimaryKeyColumns, types.StringValue(v))
			}
			if entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.Type != nil {
				entities1.PipelineMode.UserDefinedAPIReplaceMode.Type = types.StringValue(string(*entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.Type))
			} else {
				entities1.PipelineMode.UserDefinedAPIReplaceMode.Type = types.StringNull()
			}
		}
		if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode != nil {
			entities1.PipelineMode.UserDefinedAPIUpdateMode = &UserDefinedAPIUpdateMode{}
			for foreignKeyColumnsCount1, foreignKeyColumnsItem1 := range entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.ForeignKeyColumns {
				var foreignKeyColumns3 SchemaV1ForeignKeyColumn
				if foreignKeyColumnsItem1.ForeignColumn != nil {
					foreignKeyColumns3.ForeignColumn = &ForeignColumn{}
					foreignKeyColumns3.ForeignColumn.ColumnPath = nil
					for _, v := range foreignKeyColumnsItem1.ForeignColumn.ColumnPath {
						foreignKeyColumns3.ForeignColumn.ColumnPath = append(foreignKeyColumns3.ForeignColumn.ColumnPath, types.StringValue(v))
					}
					foreignKeyColumns3.ForeignColumn.ReferencedColumnName = types.StringValue(foreignKeyColumnsItem1.ForeignColumn.ReferencedColumnName)
					foreignKeyColumns3.ForeignColumn.ReferencedEntityID = types.StringValue(foreignKeyColumnsItem1.ForeignColumn.ReferencedEntityID)
				}
				if foreignKeyColumnsItem1.TopLevelForeignKeyColumn != nil {
					foreignKeyColumns3.TopLevelForeignKeyColumn = &TopLevelForeignKeyColumn{}
					foreignKeyColumns3.TopLevelForeignKeyColumn.ColumnName = types.StringValue(foreignKeyColumnsItem1.TopLevelForeignKeyColumn.ColumnName)
					foreignKeyColumns3.TopLevelForeignKeyColumn.ReferencedColumnName = types.StringValue(foreignKeyColumnsItem1.TopLevelForeignKeyColumn.ReferencedColumnName)
					foreignKeyColumns3.TopLevelForeignKeyColumn.ReferencedEntityID = types.StringValue(foreignKeyColumnsItem1.TopLevelForeignKeyColumn.ReferencedEntityID)
				}
				if foreignKeyColumnsCount1+1 > len(entities1.PipelineMode.UserDefinedAPIUpdateMode.ForeignKeyColumns) {
					entities1.PipelineMode.UserDefinedAPIUpdateMode.ForeignKeyColumns = append(entities1.PipelineMode.UserDefinedAPIUpdateMode.ForeignKeyColumns, foreignKeyColumns3)
				} else {
				}
			}
			entities1.PipelineMode.UserDefinedAPIUpdateMode.PrimaryKeyColumns = nil
			for _, v := range entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.PrimaryKeyColumns {
				entities1.PipelineMode.UserDefinedAPIUpdateMode.PrimaryKeyColumns = append(entities1.PipelineMode.UserDefinedAPIUpdateMode.PrimaryKeyColumns, types.StringValue(v))
			}
			if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy == nil {
				entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy = nil
			} else {
				entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy = &UpdateModeStrategyTypes{}
				if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy != nil {
					entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData = &ExtractedDataStrategy{}
					if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy.BeginTimeParameter.Format != nil {
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.BeginTimeParameter.Format = types.StringValue(string(*entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy.BeginTimeParameter.Format))
					} else {
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.BeginTimeParameter.Format = types.StringNull()
					}
					entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.BeginTimeParameter.Key = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy.BeginTimeParameter.Key)
					entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.BeginTimeParameter.Value = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy.BeginTimeParameter.Value)
					if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy.EndTimeParameter == nil {
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.EndTimeParameter = nil
					} else {
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.EndTimeParameter = &WatermarkDatetimeKeyValuePair{}
						if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy.EndTimeParameter.Format != nil {
							entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.EndTimeParameter.Format = types.StringValue(string(*entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy.EndTimeParameter.Format))
						} else {
							entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.EndTimeParameter.Format = types.StringNull()
						}
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.EndTimeParameter.Key = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy.EndTimeParameter.Key)
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.EndTimeParameter.Value = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy.EndTimeParameter.Value)
					}
					for highWatermarkQueryParametersCount, highWatermarkQueryParametersItem := range entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy.HighWatermarkQueryParameters {
						var highWatermarkQueryParameters1 HeaderParameters
						highWatermarkQueryParameters1.Key = types.StringValue(highWatermarkQueryParametersItem.Key)
						highWatermarkQueryParameters1.Value = types.StringValue(highWatermarkQueryParametersItem.Value)
						if highWatermarkQueryParametersCount+1 > len(entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.HighWatermarkQueryParameters) {
							entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.HighWatermarkQueryParameters = append(entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.HighWatermarkQueryParameters, highWatermarkQueryParameters1)
						} else {
							entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.HighWatermarkQueryParameters[highWatermarkQueryParametersCount].Key = highWatermarkQueryParameters1.Key
							entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.HighWatermarkQueryParameters[highWatermarkQueryParametersCount].Value = highWatermarkQueryParameters1.Value
						}
					}
					entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.LastUpdatedColumn = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy.LastUpdatedColumn)
					entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedData.Type = types.StringValue(string(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.ExtractedDataStrategy.Type))
				}
				if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy != nil {
					entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock = &WallClockStrategy{}
					if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy.BeginDateParameter.Format != nil {
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.BeginDateParameter.Format = types.StringValue(string(*entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy.BeginDateParameter.Format))
					} else {
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.BeginDateParameter.Format = types.StringNull()
					}
					entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.BeginDateParameter.Key = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy.BeginDateParameter.Key)
					entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.BeginDateParameter.Value = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy.BeginDateParameter.Value)
					if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy.EndDateParameter == nil {
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter = nil
					} else {
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter = &InclusiveOrExclusiveWatermarkDateonlyKeyValuePair{}
						if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy.EndDateParameter.Format != nil {
							entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Format = types.StringValue(string(*entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy.EndDateParameter.Format))
						} else {
							entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Format = types.StringNull()
						}
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Inclusive = types.BoolPointerValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy.EndDateParameter.Inclusive)
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Key = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy.EndDateParameter.Key)
						entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.EndDateParameter.Value = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy.EndDateParameter.Value)
					}
					entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.LookbackWindow = types.Int64Value(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy.LookbackWindow)
					entities1.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClock.Type = types.StringValue(string(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Strategy.WallClockStrategy.Type))
				}
			}
			if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Type != nil {
				entities1.PipelineMode.UserDefinedAPIUpdateMode.Type = types.StringValue(string(*entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Type))
			} else {
				entities1.PipelineMode.UserDefinedAPIUpdateMode.Type = types.StringNull()
			}
		}
		for queryParametersCount, queryParametersItem := range entitiesItem.QueryParameters {
			var queryParameters1 HeaderParameters
			queryParameters1.Key = types.StringValue(queryParametersItem.Key)
			queryParameters1.Value = types.StringValue(queryParametersItem.Value)
			if queryParametersCount+1 > len(entities1.QueryParameters) {
				entities1.QueryParameters = append(entities1.QueryParameters, queryParameters1)
			} else {
				entities1.QueryParameters[queryParametersCount].Key = queryParameters1.Key
				entities1.QueryParameters[queryParametersCount].Value = queryParameters1.Value
			}
		}
		if entitiesItem.RestMethod.RestMethod1 != nil {
			if entitiesItem.RestMethod.RestMethod1 != nil {
				entities1.RestMethod.One = types.StringValue(string(*entitiesItem.RestMethod.RestMethod1))
			} else {
				entities1.RestMethod.One = types.StringNull()
			}
		}
		if entitiesItem.RestMethod.PostMethod != nil {
			entities1.RestMethod.PostMethod = &PostMethod{}
			for bodyParametersCount, bodyParametersItem := range entitiesItem.RestMethod.PostMethod.BodyParameters {
				var bodyParameters1 HeaderParameters
				bodyParameters1.Key = types.StringValue(bodyParametersItem.Key)
				bodyParameters1.Value = types.StringValue(bodyParametersItem.Value)
				if bodyParametersCount+1 > len(entities1.RestMethod.PostMethod.BodyParameters) {
					entities1.RestMethod.PostMethod.BodyParameters = append(entities1.RestMethod.PostMethod.BodyParameters, bodyParameters1)
				} else {
					entities1.RestMethod.PostMethod.BodyParameters[bodyParametersCount].Key = bodyParameters1.Key
					entities1.RestMethod.PostMethod.BodyParameters[bodyParametersCount].Value = bodyParameters1.Value
				}
			}
			if entitiesItem.RestMethod.PostMethod.Type != nil {
				entities1.RestMethod.PostMethod.Type = types.StringValue(string(*entitiesItem.RestMethod.PostMethod.Type))
			} else {
				entities1.RestMethod.PostMethod.Type = types.StringNull()
			}
		}
		if entitiesCount+1 > len(r.Entities) {
			r.Entities = append(r.Entities, entities1)
		} else {
			r.Entities[entitiesCount].APIURL = entities1.APIURL
			r.Entities[entitiesCount].Columns = entities1.Columns
			r.Entities[entitiesCount].DisplayName = entities1.DisplayName
			r.Entities[entitiesCount].HeaderParameters = entities1.HeaderParameters
			r.Entities[entitiesCount].ID = entities1.ID
			r.Entities[entitiesCount].PagingStrategy = entities1.PagingStrategy
			r.Entities[entitiesCount].PathToResults = entities1.PathToResults
			r.Entities[entitiesCount].PipelineMode = entities1.PipelineMode
			r.Entities[entitiesCount].QueryParameters = entities1.QueryParameters
			r.Entities[entitiesCount].RestMethod = entities1.RestMethod
		}
	}
	r.ID = types.StringValue(resp.ID)
	r.Name = types.StringValue(resp.Name)
	r.Status = types.StringValue(string(resp.Status))
	r.Type = types.StringValue(string(resp.Type))
	if resp.UpdateSchedule == nil {
		r.UpdateSchedule = nil
	} else {
		r.UpdateSchedule = &UpdateScheduleTypes{}
		if resp.UpdateSchedule.UpdateScheduleModeDaily != nil {
			r.UpdateSchedule.Daily = &UpdateScheduleModeDaily{}
			r.UpdateSchedule.Daily.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeDaily.HourOfDay)
			r.UpdateSchedule.Daily.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeDaily.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeHourly != nil {
			r.UpdateSchedule.Hourly = &UpdateScheduleModeHourly{}
			r.UpdateSchedule.Hourly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeHourly.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeInterval != nil {
			r.UpdateSchedule.Interval = &UpdateScheduleModeInterval{}
			r.UpdateSchedule.Interval.IntervalMinutes = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeInterval.IntervalMinutes)
			r.UpdateSchedule.Interval.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeInterval.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeMonthly != nil {
			r.UpdateSchedule.Monthly = &UpdateScheduleModeMonthly{}
			r.UpdateSchedule.Monthly.DayOfMonth = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeMonthly.DayOfMonth)
			r.UpdateSchedule.Monthly.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeMonthly.HourOfDay)
			r.UpdateSchedule.Monthly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeMonthly.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeWeekly != nil {
			r.UpdateSchedule.Weekly = &UpdateScheduleModeWeekly{}
			r.UpdateSchedule.Weekly.DayOfWeek = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeWeekly.DayOfWeek)
			r.UpdateSchedule.Weekly.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeWeekly.HourOfDay)
			r.UpdateSchedule.Weekly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeWeekly.Mode))
		}
	}
}

func (r *ConnectionUSERDEFINEDAPIResourceModel) ToSharedConnectionUserDefinedAPIUpdate() *shared.ConnectionUserDefinedAPIUpdate {
	active := new(bool)
	if !r.Active.IsUnknown() && !r.Active.IsNull() {
		*active = r.Active.ValueBool()
	} else {
		active = nil
	}
	typeVar := shared.ConnectionUserDefinedAPIUpdateType(r.Type.ValueString())
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var updateSchedule *shared.UpdateScheduleTypes
	if r.UpdateSchedule != nil {
		var updateScheduleModeInterval *shared.UpdateScheduleModeInterval
		if r.UpdateSchedule.Interval != nil {
			mode := shared.Mode(r.UpdateSchedule.Interval.Mode.ValueString())
			intervalMinutes := r.UpdateSchedule.Interval.IntervalMinutes.ValueInt64()
			updateScheduleModeInterval = &shared.UpdateScheduleModeInterval{
				Mode:            mode,
				IntervalMinutes: intervalMinutes,
			}
		}
		if updateScheduleModeInterval != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeInterval: updateScheduleModeInterval,
			}
		}
		var updateScheduleModeHourly *shared.UpdateScheduleModeHourly
		if r.UpdateSchedule.Hourly != nil {
			mode1 := shared.UpdateScheduleModeHourlyMode(r.UpdateSchedule.Hourly.Mode.ValueString())
			updateScheduleModeHourly = &shared.UpdateScheduleModeHourly{
				Mode: mode1,
			}
		}
		if updateScheduleModeHourly != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeHourly: updateScheduleModeHourly,
			}
		}
		var updateScheduleModeDaily *shared.UpdateScheduleModeDaily
		if r.UpdateSchedule.Daily != nil {
			mode2 := shared.UpdateScheduleModeDailyMode(r.UpdateSchedule.Daily.Mode.ValueString())
			hourOfDay := r.UpdateSchedule.Daily.HourOfDay.ValueInt64()
			updateScheduleModeDaily = &shared.UpdateScheduleModeDaily{
				Mode:      mode2,
				HourOfDay: hourOfDay,
			}
		}
		if updateScheduleModeDaily != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeDaily: updateScheduleModeDaily,
			}
		}
		var updateScheduleModeWeekly *shared.UpdateScheduleModeWeekly
		if r.UpdateSchedule.Weekly != nil {
			mode3 := shared.UpdateScheduleModeWeeklyMode(r.UpdateSchedule.Weekly.Mode.ValueString())
			dayOfWeek := r.UpdateSchedule.Weekly.DayOfWeek.ValueInt64()
			hourOfDay1 := r.UpdateSchedule.Weekly.HourOfDay.ValueInt64()
			updateScheduleModeWeekly = &shared.UpdateScheduleModeWeekly{
				Mode:      mode3,
				DayOfWeek: dayOfWeek,
				HourOfDay: hourOfDay1,
			}
		}
		if updateScheduleModeWeekly != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeWeekly: updateScheduleModeWeekly,
			}
		}
		var updateScheduleModeMonthly *shared.UpdateScheduleModeMonthly
		if r.UpdateSchedule.Monthly != nil {
			mode4 := shared.UpdateScheduleModeMonthlyMode(r.UpdateSchedule.Monthly.Mode.ValueString())
			hourOfDay2 := r.UpdateSchedule.Monthly.HourOfDay.ValueInt64()
			dayOfMonth := r.UpdateSchedule.Monthly.DayOfMonth.ValueInt64()
			updateScheduleModeMonthly = &shared.UpdateScheduleModeMonthly{
				Mode:       mode4,
				HourOfDay:  hourOfDay2,
				DayOfMonth: dayOfMonth,
			}
		}
		if updateScheduleModeMonthly != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeMonthly: updateScheduleModeMonthly,
			}
		}
	}
	var authentication *shared.Authentication
	var basicAuthentication *shared.BasicAuthentication
	if r.Authentication.Basic != nil {
		username := r.Authentication.Basic.Username.ValueString()
		password := r.Authentication.Basic.Password.ValueString()
		typeVar1 := new(shared.BasicAuthenticationType)
		if !r.Authentication.Basic.Type.IsUnknown() && !r.Authentication.Basic.Type.IsNull() {
			*typeVar1 = shared.BasicAuthenticationType(r.Authentication.Basic.Type.ValueString())
		} else {
			typeVar1 = nil
		}
		basicAuthentication = &shared.BasicAuthentication{
			Username: username,
			Password: password,
			Type:     typeVar1,
		}
	}
	if basicAuthentication != nil {
		authentication = &shared.Authentication{
			BasicAuthentication: basicAuthentication,
		}
	}
	var bearerAuthentication *shared.BearerAuthentication
	if r.Authentication.Bearer != nil {
		token := r.Authentication.Bearer.Token.ValueString()
		typeVar2 := new(shared.BearerAuthenticationType)
		if !r.Authentication.Bearer.Type.IsUnknown() && !r.Authentication.Bearer.Type.IsNull() {
			*typeVar2 = shared.BearerAuthenticationType(r.Authentication.Bearer.Type.ValueString())
		} else {
			typeVar2 = nil
		}
		bearerAuthentication = &shared.BearerAuthentication{
			Token: token,
			Type:  typeVar2,
		}
	}
	if bearerAuthentication != nil {
		authentication = &shared.Authentication{
			BearerAuthentication: bearerAuthentication,
		}
	}
	var headerAuthentication *shared.HeaderAuthentication
	if r.Authentication.Header != nil {
		value := r.Authentication.Header.Value.ValueString()
		key := r.Authentication.Header.Key.ValueString()
		typeVar3 := new(shared.HeaderAuthenticationType)
		if !r.Authentication.Header.Type.IsUnknown() && !r.Authentication.Header.Type.IsNull() {
			*typeVar3 = shared.HeaderAuthenticationType(r.Authentication.Header.Type.ValueString())
		} else {
			typeVar3 = nil
		}
		headerAuthentication = &shared.HeaderAuthentication{
			Value: value,
			Key:   key,
			Type:  typeVar3,
		}
	}
	if headerAuthentication != nil {
		authentication = &shared.Authentication{
			HeaderAuthentication: headerAuthentication,
		}
	}
	out := shared.ConnectionUserDefinedAPIUpdate{
		Active:         active,
		Type:           typeVar,
		Name:           name,
		UpdateSchedule: updateSchedule,
		Authentication: authentication,
	}
	return &out
}

func (r *ConnectionUSERDEFINEDAPIResourceModel) ToSharedConnectionDelete() *shared.ConnectionDelete {
	deletionOfExportProducts := new(bool)
	if !r.DeletionOfExportProducts.IsUnknown() && !r.DeletionOfExportProducts.IsNull() {
		*deletionOfExportProducts = r.DeletionOfExportProducts.ValueBool()
	} else {
		deletionOfExportProducts = nil
	}
	out := shared.ConnectionDelete{
		DeletionOfExportProducts: deletionOfExportProducts,
	}
	return &out
}
