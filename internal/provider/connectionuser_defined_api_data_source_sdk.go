// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *ConnectionUSERDEFINEDAPIDataSourceModel) RefreshFromSharedConnectionUserDefinedAPI(resp *shared.ConnectionUserDefinedAPI) {
	r.Active = types.BoolValue(resp.Active)
	if resp.Authentication.BasicAuthentication != nil {
		r.Authentication.Basic = &BasicAuthentication{}
		r.Authentication.Basic.Password = types.StringValue(resp.Authentication.BasicAuthentication.Password)
		if resp.Authentication.BasicAuthentication.Type != nil {
			r.Authentication.Basic.Type = types.StringValue(string(*resp.Authentication.BasicAuthentication.Type))
		} else {
			r.Authentication.Basic.Type = types.StringNull()
		}
		r.Authentication.Basic.Username = types.StringValue(resp.Authentication.BasicAuthentication.Username)
	}
	if resp.Authentication.BearerAuthentication != nil {
		r.Authentication.Bearer = &BearerAuthentication{}
		r.Authentication.Bearer.Token = types.StringValue(resp.Authentication.BearerAuthentication.Token)
		if resp.Authentication.BearerAuthentication.Type != nil {
			r.Authentication.Bearer.Type = types.StringValue(string(*resp.Authentication.BearerAuthentication.Type))
		} else {
			r.Authentication.Bearer.Type = types.StringNull()
		}
	}
	if resp.Authentication.HeaderAuthentication != nil {
		r.Authentication.Header = &HeaderAuthentication{}
		r.Authentication.Header.Key = types.StringValue(resp.Authentication.HeaderAuthentication.Key)
		if resp.Authentication.HeaderAuthentication.Type != nil {
			r.Authentication.Header.Type = types.StringValue(string(*resp.Authentication.HeaderAuthentication.Type))
		} else {
			r.Authentication.Header.Type = types.StringNull()
		}
		r.Authentication.Header.Value = types.StringValue(resp.Authentication.HeaderAuthentication.Value)
	}
	r.CreateDate = types.StringValue(resp.CreateDate.Format(time.RFC3339Nano))
	if len(r.DefaultUpdateSchedule) > len(resp.DefaultUpdateSchedule) {
		r.DefaultUpdateSchedule = r.DefaultUpdateSchedule[:len(resp.DefaultUpdateSchedule)]
	}
	for defaultUpdateScheduleCount, defaultUpdateScheduleItem := range resp.DefaultUpdateSchedule {
		var defaultUpdateSchedule1 DefaultUpdateSchedule
		if defaultUpdateScheduleItem.PipelineMode != nil {
			defaultUpdateSchedule1.PipelineMode = types.StringValue(string(*defaultUpdateScheduleItem.PipelineMode))
		} else {
			defaultUpdateSchedule1.PipelineMode = types.StringNull()
		}
		if defaultUpdateScheduleItem.UpdateSchedule == nil {
			defaultUpdateSchedule1.UpdateSchedule = nil
		} else {
			defaultUpdateSchedule1.UpdateSchedule = &UpdateScheduleTypes{}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeDaily != nil {
				defaultUpdateSchedule1.UpdateSchedule.Daily = &UpdateScheduleModeDaily{}
				defaultUpdateSchedule1.UpdateSchedule.Daily.HourOfDay = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeDaily.HourOfDay)
				defaultUpdateSchedule1.UpdateSchedule.Daily.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeDaily.Mode))
			}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeHourly != nil {
				defaultUpdateSchedule1.UpdateSchedule.Hourly = &UpdateScheduleModeHourly{}
				defaultUpdateSchedule1.UpdateSchedule.Hourly.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeHourly.Mode))
			}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeInterval != nil {
				defaultUpdateSchedule1.UpdateSchedule.Interval = &UpdateScheduleModeInterval{}
				defaultUpdateSchedule1.UpdateSchedule.Interval.IntervalMinutes = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeInterval.IntervalMinutes)
				defaultUpdateSchedule1.UpdateSchedule.Interval.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeInterval.Mode))
			}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeMonthly != nil {
				defaultUpdateSchedule1.UpdateSchedule.Monthly = &UpdateScheduleModeMonthly{}
				defaultUpdateSchedule1.UpdateSchedule.Monthly.DayOfMonth = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeMonthly.DayOfMonth)
				defaultUpdateSchedule1.UpdateSchedule.Monthly.HourOfDay = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeMonthly.HourOfDay)
				defaultUpdateSchedule1.UpdateSchedule.Monthly.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeMonthly.Mode))
			}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeWeekly != nil {
				defaultUpdateSchedule1.UpdateSchedule.Weekly = &UpdateScheduleModeWeekly{}
				defaultUpdateSchedule1.UpdateSchedule.Weekly.DayOfWeek = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeWeekly.DayOfWeek)
				defaultUpdateSchedule1.UpdateSchedule.Weekly.HourOfDay = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeWeekly.HourOfDay)
				defaultUpdateSchedule1.UpdateSchedule.Weekly.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeWeekly.Mode))
			}
		}
		if defaultUpdateScheduleCount+1 > len(r.DefaultUpdateSchedule) {
			r.DefaultUpdateSchedule = append(r.DefaultUpdateSchedule, defaultUpdateSchedule1)
		} else {
			r.DefaultUpdateSchedule[defaultUpdateScheduleCount].PipelineMode = defaultUpdateSchedule1.PipelineMode
			r.DefaultUpdateSchedule[defaultUpdateScheduleCount].UpdateSchedule = defaultUpdateSchedule1.UpdateSchedule
		}
	}
	if len(r.Entities) > len(resp.Entities) {
		r.Entities = r.Entities[:len(resp.Entities)]
	}
	for entitiesCount, entitiesItem := range resp.Entities {
		var entities1 UserDefinedAPIEntity
		entities1.APIURL = types.StringValue(entitiesItem.APIURL)
		entities1.Columns = nil
		for _, columnsItem := range entitiesItem.Columns {
			var columns1 types.String
			columns1Result, _ := json.Marshal(columnsItem)
			columns1 = types.StringValue(string(columns1Result))
			entities1.Columns = append(entities1.Columns, columns1)
		}
		entities1.DisplayName = types.StringValue(entitiesItem.DisplayName)
		for headerParametersCount, headerParametersItem := range entitiesItem.HeaderParameters {
			var headerParameters1 HeaderParameters
			headerParameters1.Key = types.StringValue(headerParametersItem.Key)
			headerParameters1.Value = types.StringValue(headerParametersItem.Value)
			if headerParametersCount+1 > len(entities1.HeaderParameters) {
				entities1.HeaderParameters = append(entities1.HeaderParameters, headerParameters1)
			} else {
				entities1.HeaderParameters[headerParametersCount].Key = headerParameters1.Key
				entities1.HeaderParameters[headerParametersCount].Value = headerParameters1.Value
			}
		}
		entities1.ID = types.StringValue(entitiesItem.ID)
		if entitiesItem.PagingStrategy == nil {
			entities1.PagingStrategy = nil
		} else {
			entities1.PagingStrategy = &PagingStrategy{}
			if entitiesItem.PagingStrategy.CursorURIPagingStrategy != nil {
				entities1.PagingStrategy.CursorURI = &CursorURIPagingStrategy{}
				entities1.PagingStrategy.CursorURI.MaxPageSize = types.Int64Value(entitiesItem.PagingStrategy.CursorURIPagingStrategy.MaxPageSize)
				entities1.PagingStrategy.CursorURI.PageSizeFieldName = types.StringValue(entitiesItem.PagingStrategy.CursorURIPagingStrategy.PageSizeFieldName)
				entities1.PagingStrategy.CursorURI.PathToCursor = types.StringValue(entitiesItem.PagingStrategy.CursorURIPagingStrategy.PathToCursor)
				if entitiesItem.PagingStrategy.CursorURIPagingStrategy.Type != nil {
					entities1.PagingStrategy.CursorURI.Type = types.StringValue(string(*entitiesItem.PagingStrategy.CursorURIPagingStrategy.Type))
				} else {
					entities1.PagingStrategy.CursorURI.Type = types.StringNull()
				}
				entities1.PagingStrategy.CursorURI.URLPrefix = types.StringValue(entitiesItem.PagingStrategy.CursorURIPagingStrategy.URLPrefix)
			}
			if entitiesItem.PagingStrategy.OffsetPagingStrategy != nil {
				entities1.PagingStrategy.Offset = &OffsetPagingStrategy{}
				entities1.PagingStrategy.Offset.MaxPageSize = types.Int64Value(entitiesItem.PagingStrategy.OffsetPagingStrategy.MaxPageSize)
				entities1.PagingStrategy.Offset.OffsetFieldName = types.StringValue(entitiesItem.PagingStrategy.OffsetPagingStrategy.OffsetFieldName)
				entities1.PagingStrategy.Offset.PageSizeFieldName = types.StringValue(entitiesItem.PagingStrategy.OffsetPagingStrategy.PageSizeFieldName)
				if entitiesItem.PagingStrategy.OffsetPagingStrategy.Type != nil {
					entities1.PagingStrategy.Offset.Type = types.StringValue(string(*entitiesItem.PagingStrategy.OffsetPagingStrategy.Type))
				} else {
					entities1.PagingStrategy.Offset.Type = types.StringNull()
				}
			}
		}
		entities1.PathToResults = types.StringValue(entitiesItem.PathToResults)
		if entitiesItem.PipelineMode.UserDefinedAPIPipelineMode1 != nil {
			if entitiesItem.PipelineMode.UserDefinedAPIPipelineMode1 != nil {
				entities1.PipelineMode.One = types.StringValue(string(*entitiesItem.PipelineMode.UserDefinedAPIPipelineMode1))
			} else {
				entities1.PipelineMode.One = types.StringNull()
			}
		}
		if entitiesItem.PipelineMode.UserDefinedAPIReplaceMode != nil {
			entities1.PipelineMode.UserDefinedAPIReplaceMode = &UserDefinedAPIReplaceMode{}
			if entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.UserDefinedAPIReplaceMode1 != nil {
				entities1.PipelineMode.UserDefinedAPIReplaceMode.One = &UserDefinedAPIReplaceMode1{}
				if entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.UserDefinedAPIReplaceMode1.Str != nil {
					entities1.PipelineMode.UserDefinedAPIReplaceMode.One.Str = types.StringPointerValue(entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.UserDefinedAPIReplaceMode1.Str)
				}
				if entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.UserDefinedAPIReplaceMode1.Two != nil {
					entities1.PipelineMode.UserDefinedAPIReplaceMode.One.Two = &Two{}
				}
			}
			if entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode != nil {
				entities1.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode = &SchemaV1ExtendedReplaceMode{}
				for foreignKeyColumnsCount, foreignKeyColumnsItem := range entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode.ForeignKeyColumns {
					var foreignKeyColumns1 SchemaV1ForeignKeyColumn
					if foreignKeyColumnsItem.ForeignColumn != nil {
						foreignKeyColumns1.ForeignColumn = &ForeignColumn{}
						foreignKeyColumns1.ForeignColumn.ColumnPath = nil
						for _, v := range foreignKeyColumnsItem.ForeignColumn.ColumnPath {
							foreignKeyColumns1.ForeignColumn.ColumnPath = append(foreignKeyColumns1.ForeignColumn.ColumnPath, types.StringValue(v))
						}
						foreignKeyColumns1.ForeignColumn.ReferencedColumnName = types.StringValue(foreignKeyColumnsItem.ForeignColumn.ReferencedColumnName)
						foreignKeyColumns1.ForeignColumn.ReferencedEntityID = types.StringValue(foreignKeyColumnsItem.ForeignColumn.ReferencedEntityID)
					}
					if foreignKeyColumnsItem.TopLevelForeignKeyColumn != nil {
						foreignKeyColumns1.TopLevelForeignKeyColumn = &TopLevelForeignKeyColumn{}
						foreignKeyColumns1.TopLevelForeignKeyColumn.ColumnName = types.StringValue(foreignKeyColumnsItem.TopLevelForeignKeyColumn.ColumnName)
						foreignKeyColumns1.TopLevelForeignKeyColumn.ReferencedColumnName = types.StringValue(foreignKeyColumnsItem.TopLevelForeignKeyColumn.ReferencedColumnName)
						foreignKeyColumns1.TopLevelForeignKeyColumn.ReferencedEntityID = types.StringValue(foreignKeyColumnsItem.TopLevelForeignKeyColumn.ReferencedEntityID)
					}
					if foreignKeyColumnsCount+1 > len(entities1.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode.ForeignKeyColumns) {
						entities1.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode.ForeignKeyColumns = append(entities1.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode.ForeignKeyColumns, foreignKeyColumns1)
					} else {
					}
				}
				entities1.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode.PrimaryKeyColumns = nil
				for _, v := range entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode.PrimaryKeyColumns {
					entities1.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode.PrimaryKeyColumns = append(entities1.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode.PrimaryKeyColumns, types.StringValue(v))
				}
				if entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode.Type != nil {
					entities1.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode.Type = types.StringValue(string(*entitiesItem.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode.Type))
				} else {
					entities1.PipelineMode.UserDefinedAPIReplaceMode.SchemaV1ExtendedReplaceMode.Type = types.StringNull()
				}
			}
		}
		if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode != nil {
			entities1.PipelineMode.UserDefinedAPIUpdateMode = &UserDefinedAPIUpdateMode{}
			if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.BeginTimeParameter.Format != nil {
				entities1.PipelineMode.UserDefinedAPIUpdateMode.BeginTimeParameter.Format = types.StringValue(string(*entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.BeginTimeParameter.Format))
			} else {
				entities1.PipelineMode.UserDefinedAPIUpdateMode.BeginTimeParameter.Format = types.StringNull()
			}
			entities1.PipelineMode.UserDefinedAPIUpdateMode.BeginTimeParameter.Key = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.BeginTimeParameter.Key)
			entities1.PipelineMode.UserDefinedAPIUpdateMode.BeginTimeParameter.Value = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.BeginTimeParameter.Value)
			if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.EndTimeParameter == nil {
				entities1.PipelineMode.UserDefinedAPIUpdateMode.EndTimeParameter = nil
			} else {
				entities1.PipelineMode.UserDefinedAPIUpdateMode.EndTimeParameter = &WatermarkKeyValuePair{}
				if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.EndTimeParameter.Format != nil {
					entities1.PipelineMode.UserDefinedAPIUpdateMode.EndTimeParameter.Format = types.StringValue(string(*entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.EndTimeParameter.Format))
				} else {
					entities1.PipelineMode.UserDefinedAPIUpdateMode.EndTimeParameter.Format = types.StringNull()
				}
				entities1.PipelineMode.UserDefinedAPIUpdateMode.EndTimeParameter.Key = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.EndTimeParameter.Key)
				entities1.PipelineMode.UserDefinedAPIUpdateMode.EndTimeParameter.Value = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.EndTimeParameter.Value)
			}
			for foreignKeyColumnsCount1, foreignKeyColumnsItem1 := range entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.ForeignKeyColumns {
				var foreignKeyColumns3 SchemaV1ForeignKeyColumn
				if foreignKeyColumnsItem1.ForeignColumn != nil {
					foreignKeyColumns3.ForeignColumn = &ForeignColumn{}
					foreignKeyColumns3.ForeignColumn.ColumnPath = nil
					for _, v := range foreignKeyColumnsItem1.ForeignColumn.ColumnPath {
						foreignKeyColumns3.ForeignColumn.ColumnPath = append(foreignKeyColumns3.ForeignColumn.ColumnPath, types.StringValue(v))
					}
					foreignKeyColumns3.ForeignColumn.ReferencedColumnName = types.StringValue(foreignKeyColumnsItem1.ForeignColumn.ReferencedColumnName)
					foreignKeyColumns3.ForeignColumn.ReferencedEntityID = types.StringValue(foreignKeyColumnsItem1.ForeignColumn.ReferencedEntityID)
				}
				if foreignKeyColumnsItem1.TopLevelForeignKeyColumn != nil {
					foreignKeyColumns3.TopLevelForeignKeyColumn = &TopLevelForeignKeyColumn{}
					foreignKeyColumns3.TopLevelForeignKeyColumn.ColumnName = types.StringValue(foreignKeyColumnsItem1.TopLevelForeignKeyColumn.ColumnName)
					foreignKeyColumns3.TopLevelForeignKeyColumn.ReferencedColumnName = types.StringValue(foreignKeyColumnsItem1.TopLevelForeignKeyColumn.ReferencedColumnName)
					foreignKeyColumns3.TopLevelForeignKeyColumn.ReferencedEntityID = types.StringValue(foreignKeyColumnsItem1.TopLevelForeignKeyColumn.ReferencedEntityID)
				}
				if foreignKeyColumnsCount1+1 > len(entities1.PipelineMode.UserDefinedAPIUpdateMode.ForeignKeyColumns) {
					entities1.PipelineMode.UserDefinedAPIUpdateMode.ForeignKeyColumns = append(entities1.PipelineMode.UserDefinedAPIUpdateMode.ForeignKeyColumns, foreignKeyColumns3)
				} else {
				}
			}
			for highWatermarkQueryParametersCount, highWatermarkQueryParametersItem := range entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.HighWatermarkQueryParameters {
				var highWatermarkQueryParameters1 HeaderParameters
				highWatermarkQueryParameters1.Key = types.StringValue(highWatermarkQueryParametersItem.Key)
				highWatermarkQueryParameters1.Value = types.StringValue(highWatermarkQueryParametersItem.Value)
				if highWatermarkQueryParametersCount+1 > len(entities1.PipelineMode.UserDefinedAPIUpdateMode.HighWatermarkQueryParameters) {
					entities1.PipelineMode.UserDefinedAPIUpdateMode.HighWatermarkQueryParameters = append(entities1.PipelineMode.UserDefinedAPIUpdateMode.HighWatermarkQueryParameters, highWatermarkQueryParameters1)
				} else {
					entities1.PipelineMode.UserDefinedAPIUpdateMode.HighWatermarkQueryParameters[highWatermarkQueryParametersCount].Key = highWatermarkQueryParameters1.Key
					entities1.PipelineMode.UserDefinedAPIUpdateMode.HighWatermarkQueryParameters[highWatermarkQueryParametersCount].Value = highWatermarkQueryParameters1.Value
				}
			}
			entities1.PipelineMode.UserDefinedAPIUpdateMode.LastUpdatedColumn = types.StringValue(entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.LastUpdatedColumn)
			entities1.PipelineMode.UserDefinedAPIUpdateMode.PrimaryKeyColumns = nil
			for _, v := range entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.PrimaryKeyColumns {
				entities1.PipelineMode.UserDefinedAPIUpdateMode.PrimaryKeyColumns = append(entities1.PipelineMode.UserDefinedAPIUpdateMode.PrimaryKeyColumns, types.StringValue(v))
			}
			if entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Type != nil {
				entities1.PipelineMode.UserDefinedAPIUpdateMode.Type = types.StringValue(string(*entitiesItem.PipelineMode.UserDefinedAPIUpdateMode.Type))
			} else {
				entities1.PipelineMode.UserDefinedAPIUpdateMode.Type = types.StringNull()
			}
		}
		for queryParametersCount, queryParametersItem := range entitiesItem.QueryParameters {
			var queryParameters1 HeaderParameters
			queryParameters1.Key = types.StringValue(queryParametersItem.Key)
			queryParameters1.Value = types.StringValue(queryParametersItem.Value)
			if queryParametersCount+1 > len(entities1.QueryParameters) {
				entities1.QueryParameters = append(entities1.QueryParameters, queryParameters1)
			} else {
				entities1.QueryParameters[queryParametersCount].Key = queryParameters1.Key
				entities1.QueryParameters[queryParametersCount].Value = queryParameters1.Value
			}
		}
		if entitiesItem.RestMethod != nil {
			entities1.RestMethod = types.StringValue(string(*entitiesItem.RestMethod))
		} else {
			entities1.RestMethod = types.StringNull()
		}
		if entitiesCount+1 > len(r.Entities) {
			r.Entities = append(r.Entities, entities1)
		} else {
			r.Entities[entitiesCount].APIURL = entities1.APIURL
			r.Entities[entitiesCount].Columns = entities1.Columns
			r.Entities[entitiesCount].DisplayName = entities1.DisplayName
			r.Entities[entitiesCount].HeaderParameters = entities1.HeaderParameters
			r.Entities[entitiesCount].ID = entities1.ID
			r.Entities[entitiesCount].PagingStrategy = entities1.PagingStrategy
			r.Entities[entitiesCount].PathToResults = entities1.PathToResults
			r.Entities[entitiesCount].PipelineMode = entities1.PipelineMode
			r.Entities[entitiesCount].QueryParameters = entities1.QueryParameters
			r.Entities[entitiesCount].RestMethod = entities1.RestMethod
		}
	}
	r.ID = types.StringValue(resp.ID)
	r.Name = types.StringValue(resp.Name)
	r.Status = types.StringValue(string(resp.Status))
	r.Type = types.StringValue(string(resp.Type))
	if resp.UpdateSchedule == nil {
		r.UpdateSchedule = nil
	} else {
		r.UpdateSchedule = &UpdateScheduleTypes{}
		if resp.UpdateSchedule.UpdateScheduleModeDaily != nil {
			r.UpdateSchedule.Daily = &UpdateScheduleModeDaily{}
			r.UpdateSchedule.Daily.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeDaily.HourOfDay)
			r.UpdateSchedule.Daily.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeDaily.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeHourly != nil {
			r.UpdateSchedule.Hourly = &UpdateScheduleModeHourly{}
			r.UpdateSchedule.Hourly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeHourly.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeInterval != nil {
			r.UpdateSchedule.Interval = &UpdateScheduleModeInterval{}
			r.UpdateSchedule.Interval.IntervalMinutes = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeInterval.IntervalMinutes)
			r.UpdateSchedule.Interval.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeInterval.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeMonthly != nil {
			r.UpdateSchedule.Monthly = &UpdateScheduleModeMonthly{}
			r.UpdateSchedule.Monthly.DayOfMonth = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeMonthly.DayOfMonth)
			r.UpdateSchedule.Monthly.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeMonthly.HourOfDay)
			r.UpdateSchedule.Monthly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeMonthly.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeWeekly != nil {
			r.UpdateSchedule.Weekly = &UpdateScheduleModeWeekly{}
			r.UpdateSchedule.Weekly.DayOfWeek = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeWeekly.DayOfWeek)
			r.UpdateSchedule.Weekly.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeWeekly.HourOfDay)
			r.UpdateSchedule.Weekly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeWeekly.Mode))
		}
	}
}
