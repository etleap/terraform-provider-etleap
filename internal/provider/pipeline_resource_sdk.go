// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/models/shared"
	customTypes "github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"
)

func (r *PipelineResourceModel) ToSharedPipelineInput() *shared.PipelineInput {
	name := r.Name.ValueString()
	var source shared.SourceTypes
	var sourceActiveCampaign *shared.SourceActiveCampaign
	if r.Source.ActiveCampaign != nil {
		typeVar := shared.SourceActiveCampaignType(r.Source.ActiveCampaign.Type.ValueString())
		connectionID := r.Source.ActiveCampaign.ConnectionID.ValueString()
		latencyThreshold := new(int64)
		if !r.Source.ActiveCampaign.LatencyThreshold.IsUnknown() && !r.Source.ActiveCampaign.LatencyThreshold.IsNull() {
			*latencyThreshold = r.Source.ActiveCampaign.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold = nil
		}
		entity := r.Source.ActiveCampaign.Entity.ValueString()
		sourceActiveCampaign = &shared.SourceActiveCampaign{
			Type:             typeVar,
			ConnectionID:     connectionID,
			LatencyThreshold: latencyThreshold,
			Entity:           entity,
		}
	}
	if sourceActiveCampaign != nil {
		source = shared.SourceTypes{
			SourceActiveCampaign: sourceActiveCampaign,
		}
	}
	var sourceBigQuery *shared.SourceBigQuery
	if r.Source.Bigquery != nil {
		typeVar1 := shared.SourceBigQueryType(r.Source.Bigquery.Type.ValueString())
		connectionId1 := r.Source.Bigquery.ConnectionID.ValueString()
		latencyThreshold1 := new(int64)
		if !r.Source.Bigquery.LatencyThreshold.IsUnknown() && !r.Source.Bigquery.LatencyThreshold.IsNull() {
			*latencyThreshold1 = r.Source.Bigquery.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold1 = nil
		}
		table := new(string)
		if !r.Source.Bigquery.Table.IsUnknown() && !r.Source.Bigquery.Table.IsNull() {
			*table = r.Source.Bigquery.Table.ValueString()
		} else {
			table = nil
		}
		tableNameFilter := new(string)
		if !r.Source.Bigquery.TableNameFilter.IsUnknown() && !r.Source.Bigquery.TableNameFilter.IsNull() {
			*tableNameFilter = r.Source.Bigquery.TableNameFilter.ValueString()
		} else {
			tableNameFilter = nil
		}
		lastUpdatedColumn := new(string)
		if !r.Source.Bigquery.LastUpdatedColumn.IsUnknown() && !r.Source.Bigquery.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn = r.Source.Bigquery.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn = nil
		}
		var primaryKeyColumns []string = nil
		for _, primaryKeyColumnsItem := range r.Source.Bigquery.PrimaryKeyColumns {
			primaryKeyColumns = append(primaryKeyColumns, primaryKeyColumnsItem.ValueString())
		}
		dataset := new(string)
		if !r.Source.Bigquery.Dataset.IsUnknown() && !r.Source.Bigquery.Dataset.IsNull() {
			*dataset = r.Source.Bigquery.Dataset.ValueString()
		} else {
			dataset = nil
		}
		sourceBigQuery = &shared.SourceBigQuery{
			Type:              typeVar1,
			ConnectionID:      connectionId1,
			LatencyThreshold:  latencyThreshold1,
			Table:             table,
			TableNameFilter:   tableNameFilter,
			LastUpdatedColumn: lastUpdatedColumn,
			PrimaryKeyColumns: primaryKeyColumns,
			Dataset:           dataset,
		}
	}
	if sourceBigQuery != nil {
		source = shared.SourceTypes{
			SourceBigQuery: sourceBigQuery,
		}
	}
	var sourceBingAds *shared.SourceBingAds
	if r.Source.BingAds != nil {
		typeVar2 := shared.SourceBingAdsType(r.Source.BingAds.Type.ValueString())
		connectionId2 := r.Source.BingAds.ConnectionID.ValueString()
		latencyThreshold2 := new(int64)
		if !r.Source.BingAds.LatencyThreshold.IsUnknown() && !r.Source.BingAds.LatencyThreshold.IsNull() {
			*latencyThreshold2 = r.Source.BingAds.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold2 = nil
		}
		entity1 := r.Source.BingAds.Entity.ValueString()
		var fields []string = nil
		for _, fieldsItem := range r.Source.BingAds.Fields {
			fields = append(fields, fieldsItem.ValueString())
		}
		sourceBingAds = &shared.SourceBingAds{
			Type:             typeVar2,
			ConnectionID:     connectionId2,
			LatencyThreshold: latencyThreshold2,
			Entity:           entity1,
			Fields:           fields,
		}
	}
	if sourceBingAds != nil {
		source = shared.SourceTypes{
			SourceBingAds: sourceBingAds,
		}
	}
	var sourceBlackline *shared.SourceBlackline
	if r.Source.Blackline != nil {
		typeVar3 := shared.SourceBlacklineType(r.Source.Blackline.Type.ValueString())
		connectionId3 := r.Source.Blackline.ConnectionID.ValueString()
		latencyThreshold3 := new(int64)
		if !r.Source.Blackline.LatencyThreshold.IsUnknown() && !r.Source.Blackline.LatencyThreshold.IsNull() {
			*latencyThreshold3 = r.Source.Blackline.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold3 = nil
		}
		entity2 := r.Source.Blackline.Entity.ValueString()
		sourceBlackline = &shared.SourceBlackline{
			Type:             typeVar3,
			ConnectionID:     connectionId3,
			LatencyThreshold: latencyThreshold3,
			Entity:           entity2,
		}
	}
	if sourceBlackline != nil {
		source = shared.SourceTypes{
			SourceBlackline: sourceBlackline,
		}
	}
	var sourceBraintree *shared.SourceBraintree
	if r.Source.Braintree != nil {
		typeVar4 := shared.SourceBraintreeType(r.Source.Braintree.Type.ValueString())
		connectionId4 := r.Source.Braintree.ConnectionID.ValueString()
		latencyThreshold4 := new(int64)
		if !r.Source.Braintree.LatencyThreshold.IsUnknown() && !r.Source.Braintree.LatencyThreshold.IsNull() {
			*latencyThreshold4 = r.Source.Braintree.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold4 = nil
		}
		entity3 := r.Source.Braintree.Entity.ValueString()
		sourceBraintree = &shared.SourceBraintree{
			Type:             typeVar4,
			ConnectionID:     connectionId4,
			LatencyThreshold: latencyThreshold4,
			Entity:           entity3,
		}
	}
	if sourceBraintree != nil {
		source = shared.SourceTypes{
			SourceBraintree: sourceBraintree,
		}
	}
	var sourceConfluentCloud *shared.SourceConfluentCloud
	if r.Source.ConfluentCloud != nil {
		typeVar5 := shared.SourceConfluentCloudType(r.Source.ConfluentCloud.Type.ValueString())
		connectionId5 := r.Source.ConfluentCloud.ConnectionID.ValueString()
		latencyThreshold5 := new(int64)
		if !r.Source.ConfluentCloud.LatencyThreshold.IsUnknown() && !r.Source.ConfluentCloud.LatencyThreshold.IsNull() {
			*latencyThreshold5 = r.Source.ConfluentCloud.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold5 = nil
		}
		entity4 := r.Source.ConfluentCloud.Entity.ValueString()
		sourceConfluentCloud = &shared.SourceConfluentCloud{
			Type:             typeVar5,
			ConnectionID:     connectionId5,
			LatencyThreshold: latencyThreshold5,
			Entity:           entity4,
		}
	}
	if sourceConfluentCloud != nil {
		source = shared.SourceTypes{
			SourceConfluentCloud: sourceConfluentCloud,
		}
	}
	var sourceCoupa *shared.SourceCoupa
	if r.Source.Coupa != nil {
		typeVar6 := shared.SourceCoupaType(r.Source.Coupa.Type.ValueString())
		connectionId6 := r.Source.Coupa.ConnectionID.ValueString()
		latencyThreshold6 := new(int64)
		if !r.Source.Coupa.LatencyThreshold.IsUnknown() && !r.Source.Coupa.LatencyThreshold.IsNull() {
			*latencyThreshold6 = r.Source.Coupa.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold6 = nil
		}
		entity5 := r.Source.Coupa.Entity.ValueString()
		sourceCoupa = &shared.SourceCoupa{
			Type:             typeVar6,
			ConnectionID:     connectionId6,
			LatencyThreshold: latencyThreshold6,
			Entity:           entity5,
		}
	}
	if sourceCoupa != nil {
		source = shared.SourceTypes{
			SourceCoupa: sourceCoupa,
		}
	}
	var sourceCriteo *shared.SourceCriteo
	if r.Source.Criteo != nil {
		typeVar7 := shared.SourceCriteoType(r.Source.Criteo.Type.ValueString())
		connectionId7 := r.Source.Criteo.ConnectionID.ValueString()
		latencyThreshold7 := new(int64)
		if !r.Source.Criteo.LatencyThreshold.IsUnknown() && !r.Source.Criteo.LatencyThreshold.IsNull() {
			*latencyThreshold7 = r.Source.Criteo.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold7 = nil
		}
		entity6 := r.Source.Criteo.Entity.ValueString()
		var dimensions []string = nil
		for _, dimensionsItem := range r.Source.Criteo.Dimensions {
			dimensions = append(dimensions, dimensionsItem.ValueString())
		}
		var metrics []string = nil
		for _, metricsItem := range r.Source.Criteo.Metrics {
			metrics = append(metrics, metricsItem.ValueString())
		}
		var timezone []string = nil
		for _, timezoneItem := range r.Source.Criteo.Timezone {
			timezone = append(timezone, timezoneItem.ValueString())
		}
		var currency []string = nil
		for _, currencyItem := range r.Source.Criteo.Currency {
			currency = append(currency, currencyItem.ValueString())
		}
		sourceCriteo = &shared.SourceCriteo{
			Type:             typeVar7,
			ConnectionID:     connectionId7,
			LatencyThreshold: latencyThreshold7,
			Entity:           entity6,
			Dimensions:       dimensions,
			Metrics:          metrics,
			Timezone:         timezone,
			Currency:         currency,
		}
	}
	if sourceCriteo != nil {
		source = shared.SourceTypes{
			SourceCriteo: sourceCriteo,
		}
	}
	var sourceDb2 *shared.SourceDb2
	if r.Source.Db2 != nil {
		typeVar8 := shared.SourceDb2Type(r.Source.Db2.Type.ValueString())
		connectionId8 := r.Source.Db2.ConnectionID.ValueString()
		latencyThreshold8 := new(int64)
		if !r.Source.Db2.LatencyThreshold.IsUnknown() && !r.Source.Db2.LatencyThreshold.IsNull() {
			*latencyThreshold8 = r.Source.Db2.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold8 = nil
		}
		table1 := new(string)
		if !r.Source.Db2.Table.IsUnknown() && !r.Source.Db2.Table.IsNull() {
			*table1 = r.Source.Db2.Table.ValueString()
		} else {
			table1 = nil
		}
		tableNameFilter1 := new(string)
		if !r.Source.Db2.TableNameFilter.IsUnknown() && !r.Source.Db2.TableNameFilter.IsNull() {
			*tableNameFilter1 = r.Source.Db2.TableNameFilter.ValueString()
		} else {
			tableNameFilter1 = nil
		}
		lastUpdatedColumn1 := new(string)
		if !r.Source.Db2.LastUpdatedColumn.IsUnknown() && !r.Source.Db2.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn1 = r.Source.Db2.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn1 = nil
		}
		var primaryKeyColumns1 []string = nil
		for _, primaryKeyColumnsItem1 := range r.Source.Db2.PrimaryKeyColumns {
			primaryKeyColumns1 = append(primaryKeyColumns1, primaryKeyColumnsItem1.ValueString())
		}
		schema := new(string)
		if !r.Source.Db2.Schema.IsUnknown() && !r.Source.Db2.Schema.IsNull() {
			*schema = r.Source.Db2.Schema.ValueString()
		} else {
			schema = nil
		}
		sourceDb2 = &shared.SourceDb2{
			Type:              typeVar8,
			ConnectionID:      connectionId8,
			LatencyThreshold:  latencyThreshold8,
			Table:             table1,
			TableNameFilter:   tableNameFilter1,
			LastUpdatedColumn: lastUpdatedColumn1,
			PrimaryKeyColumns: primaryKeyColumns1,
			Schema:            schema,
		}
	}
	if sourceDb2 != nil {
		source = shared.SourceTypes{
			SourceDb2: sourceDb2,
		}
	}
	var sourceDb2Sharded *shared.SourceDb2Sharded
	if r.Source.Db2Sharded != nil {
		typeVar9 := shared.SourceDb2ShardedType(r.Source.Db2Sharded.Type.ValueString())
		connectionId9 := r.Source.Db2Sharded.ConnectionID.ValueString()
		latencyThreshold9 := new(int64)
		if !r.Source.Db2Sharded.LatencyThreshold.IsUnknown() && !r.Source.Db2Sharded.LatencyThreshold.IsNull() {
			*latencyThreshold9 = r.Source.Db2Sharded.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold9 = nil
		}
		table2 := new(string)
		if !r.Source.Db2Sharded.Table.IsUnknown() && !r.Source.Db2Sharded.Table.IsNull() {
			*table2 = r.Source.Db2Sharded.Table.ValueString()
		} else {
			table2 = nil
		}
		tableNameFilter2 := new(string)
		if !r.Source.Db2Sharded.TableNameFilter.IsUnknown() && !r.Source.Db2Sharded.TableNameFilter.IsNull() {
			*tableNameFilter2 = r.Source.Db2Sharded.TableNameFilter.ValueString()
		} else {
			tableNameFilter2 = nil
		}
		lastUpdatedColumn2 := new(string)
		if !r.Source.Db2Sharded.LastUpdatedColumn.IsUnknown() && !r.Source.Db2Sharded.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn2 = r.Source.Db2Sharded.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn2 = nil
		}
		var primaryKeyColumns2 []string = nil
		for _, primaryKeyColumnsItem2 := range r.Source.Db2Sharded.PrimaryKeyColumns {
			primaryKeyColumns2 = append(primaryKeyColumns2, primaryKeyColumnsItem2.ValueString())
		}
		schema1 := new(string)
		if !r.Source.Db2Sharded.Schema.IsUnknown() && !r.Source.Db2Sharded.Schema.IsNull() {
			*schema1 = r.Source.Db2Sharded.Schema.ValueString()
		} else {
			schema1 = nil
		}
		sourceDb2Sharded = &shared.SourceDb2Sharded{
			Type:              typeVar9,
			ConnectionID:      connectionId9,
			LatencyThreshold:  latencyThreshold9,
			Table:             table2,
			TableNameFilter:   tableNameFilter2,
			LastUpdatedColumn: lastUpdatedColumn2,
			PrimaryKeyColumns: primaryKeyColumns2,
			Schema:            schema1,
		}
	}
	if sourceDb2Sharded != nil {
		source = shared.SourceTypes{
			SourceDb2Sharded: sourceDb2Sharded,
		}
	}
	var sourceDeltaLake *shared.SourceDeltaLake
	if r.Source.DeltaLake != nil {
		typeVar10 := shared.SourceDeltaLakeType(r.Source.DeltaLake.Type.ValueString())
		connectionId10 := r.Source.DeltaLake.ConnectionID.ValueString()
		latencyThreshold10 := new(int64)
		if !r.Source.DeltaLake.LatencyThreshold.IsUnknown() && !r.Source.DeltaLake.LatencyThreshold.IsNull() {
			*latencyThreshold10 = r.Source.DeltaLake.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold10 = nil
		}
		table3 := new(string)
		if !r.Source.DeltaLake.Table.IsUnknown() && !r.Source.DeltaLake.Table.IsNull() {
			*table3 = r.Source.DeltaLake.Table.ValueString()
		} else {
			table3 = nil
		}
		tableNameFilter3 := new(string)
		if !r.Source.DeltaLake.TableNameFilter.IsUnknown() && !r.Source.DeltaLake.TableNameFilter.IsNull() {
			*tableNameFilter3 = r.Source.DeltaLake.TableNameFilter.ValueString()
		} else {
			tableNameFilter3 = nil
		}
		lastUpdatedColumn3 := new(string)
		if !r.Source.DeltaLake.LastUpdatedColumn.IsUnknown() && !r.Source.DeltaLake.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn3 = r.Source.DeltaLake.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn3 = nil
		}
		var primaryKeyColumns3 []string = nil
		for _, primaryKeyColumnsItem3 := range r.Source.DeltaLake.PrimaryKeyColumns {
			primaryKeyColumns3 = append(primaryKeyColumns3, primaryKeyColumnsItem3.ValueString())
		}
		schema2 := new(string)
		if !r.Source.DeltaLake.Schema.IsUnknown() && !r.Source.DeltaLake.Schema.IsNull() {
			*schema2 = r.Source.DeltaLake.Schema.ValueString()
		} else {
			schema2 = nil
		}
		sourceDeltaLake = &shared.SourceDeltaLake{
			Type:              typeVar10,
			ConnectionID:      connectionId10,
			LatencyThreshold:  latencyThreshold10,
			Table:             table3,
			TableNameFilter:   tableNameFilter3,
			LastUpdatedColumn: lastUpdatedColumn3,
			PrimaryKeyColumns: primaryKeyColumns3,
			Schema:            schema2,
		}
	}
	if sourceDeltaLake != nil {
		source = shared.SourceTypes{
			SourceDeltaLake: sourceDeltaLake,
		}
	}
	var sourceElasticSearch *shared.SourceElasticSearch
	if r.Source.Elasticsearch != nil {
		typeVar11 := shared.SourceElasticSearchType(r.Source.Elasticsearch.Type.ValueString())
		connectionId11 := r.Source.Elasticsearch.ConnectionID.ValueString()
		latencyThreshold11 := new(int64)
		if !r.Source.Elasticsearch.LatencyThreshold.IsUnknown() && !r.Source.Elasticsearch.LatencyThreshold.IsNull() {
			*latencyThreshold11 = r.Source.Elasticsearch.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold11 = nil
		}
		entity7 := r.Source.Elasticsearch.Entity.ValueString()
		sourceElasticSearch = &shared.SourceElasticSearch{
			Type:             typeVar11,
			ConnectionID:     connectionId11,
			LatencyThreshold: latencyThreshold11,
			Entity:           entity7,
		}
	}
	if sourceElasticSearch != nil {
		source = shared.SourceTypes{
			SourceElasticSearch: sourceElasticSearch,
		}
	}
	var sourceElluminate *shared.SourceElluminate
	if r.Source.Elluminate != nil {
		typeVar12 := shared.SourceElluminateType(r.Source.Elluminate.Type.ValueString())
		connectionId12 := r.Source.Elluminate.ConnectionID.ValueString()
		latencyThreshold12 := new(int64)
		if !r.Source.Elluminate.LatencyThreshold.IsUnknown() && !r.Source.Elluminate.LatencyThreshold.IsNull() {
			*latencyThreshold12 = r.Source.Elluminate.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold12 = nil
		}
		entity8 := r.Source.Elluminate.Entity.ValueString()
		schemaName := r.Source.Elluminate.SchemaName.ValueString()
		var domainName []string = nil
		for _, domainNameItem := range r.Source.Elluminate.DomainName {
			domainName = append(domainName, domainNameItem.ValueString())
		}
		sourceElluminate = &shared.SourceElluminate{
			Type:             typeVar12,
			ConnectionID:     connectionId12,
			LatencyThreshold: latencyThreshold12,
			Entity:           entity8,
			SchemaName:       schemaName,
			DomainName:       domainName,
		}
	}
	if sourceElluminate != nil {
		source = shared.SourceTypes{
			SourceElluminate: sourceElluminate,
		}
	}
	var sourceEloqua *shared.SourceEloqua
	if r.Source.Eloqua != nil {
		typeVar13 := shared.SourceEloquaType(r.Source.Eloqua.Type.ValueString())
		connectionId13 := r.Source.Eloqua.ConnectionID.ValueString()
		latencyThreshold13 := new(int64)
		if !r.Source.Eloqua.LatencyThreshold.IsUnknown() && !r.Source.Eloqua.LatencyThreshold.IsNull() {
			*latencyThreshold13 = r.Source.Eloqua.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold13 = nil
		}
		entity9 := r.Source.Eloqua.Entity.ValueString()
		sourceEloqua = &shared.SourceEloqua{
			Type:             typeVar13,
			ConnectionID:     connectionId13,
			LatencyThreshold: latencyThreshold13,
			Entity:           entity9,
		}
	}
	if sourceEloqua != nil {
		source = shared.SourceTypes{
			SourceEloqua: sourceEloqua,
		}
	}
	var sourceErpx *shared.SourceErpx
	if r.Source.Erpx != nil {
		typeVar14 := shared.SourceErpxType(r.Source.Erpx.Type.ValueString())
		connectionId14 := r.Source.Erpx.ConnectionID.ValueString()
		latencyThreshold14 := new(int64)
		if !r.Source.Erpx.LatencyThreshold.IsUnknown() && !r.Source.Erpx.LatencyThreshold.IsNull() {
			*latencyThreshold14 = r.Source.Erpx.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold14 = nil
		}
		entity10 := r.Source.Erpx.Entity.ValueString()
		sourceErpx = &shared.SourceErpx{
			Type:             typeVar14,
			ConnectionID:     connectionId14,
			LatencyThreshold: latencyThreshold14,
			Entity:           entity10,
		}
	}
	if sourceErpx != nil {
		source = shared.SourceTypes{
			SourceErpx: sourceErpx,
		}
	}
	var sourceFacebookAds *shared.SourceFacebookAds
	if r.Source.FacebookAds != nil {
		typeVar15 := shared.SourceFacebookAdsType(r.Source.FacebookAds.Type.ValueString())
		connectionId15 := r.Source.FacebookAds.ConnectionID.ValueString()
		latencyThreshold15 := new(int64)
		if !r.Source.FacebookAds.LatencyThreshold.IsUnknown() && !r.Source.FacebookAds.LatencyThreshold.IsNull() {
			*latencyThreshold15 = r.Source.FacebookAds.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold15 = nil
		}
		entity11 := r.Source.FacebookAds.Entity.ValueString()
		var breakdowns []string = nil
		for _, breakdownsItem := range r.Source.FacebookAds.Breakdowns {
			breakdowns = append(breakdowns, breakdownsItem.ValueString())
		}
		sourceFacebookAds = &shared.SourceFacebookAds{
			Type:             typeVar15,
			ConnectionID:     connectionId15,
			LatencyThreshold: latencyThreshold15,
			Entity:           entity11,
			Breakdowns:       breakdowns,
		}
	}
	if sourceFacebookAds != nil {
		source = shared.SourceTypes{
			SourceFacebookAds: sourceFacebookAds,
		}
	}
	var sourceFifteenFive *shared.SourceFifteenFive
	if r.Source.FifteenFive != nil {
		typeVar16 := shared.SourceFifteenFiveType(r.Source.FifteenFive.Type.ValueString())
		connectionId16 := r.Source.FifteenFive.ConnectionID.ValueString()
		latencyThreshold16 := new(int64)
		if !r.Source.FifteenFive.LatencyThreshold.IsUnknown() && !r.Source.FifteenFive.LatencyThreshold.IsNull() {
			*latencyThreshold16 = r.Source.FifteenFive.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold16 = nil
		}
		entity12 := r.Source.FifteenFive.Entity.ValueString()
		sourceFifteenFive = &shared.SourceFifteenFive{
			Type:             typeVar16,
			ConnectionID:     connectionId16,
			LatencyThreshold: latencyThreshold16,
			Entity:           entity12,
		}
	}
	if sourceFifteenFive != nil {
		source = shared.SourceTypes{
			SourceFifteenFive: sourceFifteenFive,
		}
	}
	var sourceFreshchat *shared.SourceFreshchat
	if r.Source.Freshchat != nil {
		typeVar17 := shared.SourceFreshchatType(r.Source.Freshchat.Type.ValueString())
		connectionId17 := r.Source.Freshchat.ConnectionID.ValueString()
		latencyThreshold17 := new(int64)
		if !r.Source.Freshchat.LatencyThreshold.IsUnknown() && !r.Source.Freshchat.LatencyThreshold.IsNull() {
			*latencyThreshold17 = r.Source.Freshchat.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold17 = nil
		}
		entity13 := r.Source.Freshchat.Entity.ValueString()
		var view []string = nil
		for _, viewItem := range r.Source.Freshchat.View {
			view = append(view, viewItem.ValueString())
		}
		sourceFreshchat = &shared.SourceFreshchat{
			Type:             typeVar17,
			ConnectionID:     connectionId17,
			LatencyThreshold: latencyThreshold17,
			Entity:           entity13,
			View:             view,
		}
	}
	if sourceFreshchat != nil {
		source = shared.SourceTypes{
			SourceFreshchat: sourceFreshchat,
		}
	}
	var sourceFreshsales *shared.SourceFreshsales
	if r.Source.Freshsales != nil {
		typeVar18 := shared.SourceFreshsalesType(r.Source.Freshsales.Type.ValueString())
		connectionId18 := r.Source.Freshsales.ConnectionID.ValueString()
		latencyThreshold18 := new(int64)
		if !r.Source.Freshsales.LatencyThreshold.IsUnknown() && !r.Source.Freshsales.LatencyThreshold.IsNull() {
			*latencyThreshold18 = r.Source.Freshsales.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold18 = nil
		}
		entity14 := r.Source.Freshsales.Entity.ValueString()
		var view1 []string = nil
		for _, viewItem1 := range r.Source.Freshsales.View {
			view1 = append(view1, viewItem1.ValueString())
		}
		sourceFreshsales = &shared.SourceFreshsales{
			Type:             typeVar18,
			ConnectionID:     connectionId18,
			LatencyThreshold: latencyThreshold18,
			Entity:           entity14,
			View:             view1,
		}
	}
	if sourceFreshsales != nil {
		source = shared.SourceTypes{
			SourceFreshsales: sourceFreshsales,
		}
	}
	var sourceFreshworks *shared.SourceFreshworks
	if r.Source.Freshworks != nil {
		typeVar19 := shared.SourceFreshworksType(r.Source.Freshworks.Type.ValueString())
		connectionId19 := r.Source.Freshworks.ConnectionID.ValueString()
		latencyThreshold19 := new(int64)
		if !r.Source.Freshworks.LatencyThreshold.IsUnknown() && !r.Source.Freshworks.LatencyThreshold.IsNull() {
			*latencyThreshold19 = r.Source.Freshworks.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold19 = nil
		}
		entity15 := r.Source.Freshworks.Entity.ValueString()
		sourceFreshworks = &shared.SourceFreshworks{
			Type:             typeVar19,
			ConnectionID:     connectionId19,
			LatencyThreshold: latencyThreshold19,
			Entity:           entity15,
		}
	}
	if sourceFreshworks != nil {
		source = shared.SourceTypes{
			SourceFreshworks: sourceFreshworks,
		}
	}
	var sourceFtp *shared.SourceFtp
	if r.Source.Ftp != nil {
		typeVar20 := shared.SourceFtpType(r.Source.Ftp.Type.ValueString())
		connectionId20 := r.Source.Ftp.ConnectionID.ValueString()
		latencyThreshold20 := new(int64)
		if !r.Source.Ftp.LatencyThreshold.IsUnknown() && !r.Source.Ftp.LatencyThreshold.IsNull() {
			*latencyThreshold20 = r.Source.Ftp.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold20 = nil
		}
		fileNameFilter := new(string)
		if !r.Source.Ftp.FileNameFilter.IsUnknown() && !r.Source.Ftp.FileNameFilter.IsNull() {
			*fileNameFilter = r.Source.Ftp.FileNameFilter.ValueString()
		} else {
			fileNameFilter = nil
		}
		newFileBehavior := shared.NewFileBehavior(r.Source.Ftp.NewFileBehavior.ValueString())
		lowWatermark := new(customTypes.Date)
		if !r.Source.Ftp.LowWatermark.IsUnknown() && !r.Source.Ftp.LowWatermark.IsNull() {
			lowWatermark = customTypes.MustNewDateFromString(r.Source.Ftp.LowWatermark.ValueString())
		} else {
			lowWatermark = nil
		}
		var paths []string = nil
		for _, pathsItem := range r.Source.Ftp.Paths {
			paths = append(paths, pathsItem.ValueString())
		}
		globPattern := new(string)
		if !r.Source.Ftp.GlobPattern.IsUnknown() && !r.Source.Ftp.GlobPattern.IsNull() {
			*globPattern = r.Source.Ftp.GlobPattern.ValueString()
		} else {
			globPattern = nil
		}
		sourceFtp = &shared.SourceFtp{
			Type:             typeVar20,
			ConnectionID:     connectionId20,
			LatencyThreshold: latencyThreshold20,
			FileNameFilter:   fileNameFilter,
			NewFileBehavior:  newFileBehavior,
			LowWatermark:     lowWatermark,
			Paths:            paths,
			GlobPattern:      globPattern,
		}
	}
	if sourceFtp != nil {
		source = shared.SourceTypes{
			SourceFtp: sourceFtp,
		}
	}
	var sourceGong *shared.SourceGong
	if r.Source.Gong != nil {
		typeVar21 := shared.SourceGongType(r.Source.Gong.Type.ValueString())
		connectionId21 := r.Source.Gong.ConnectionID.ValueString()
		latencyThreshold21 := new(int64)
		if !r.Source.Gong.LatencyThreshold.IsUnknown() && !r.Source.Gong.LatencyThreshold.IsNull() {
			*latencyThreshold21 = r.Source.Gong.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold21 = nil
		}
		entity16 := r.Source.Gong.Entity.ValueString()
		sourceGong = &shared.SourceGong{
			Type:             typeVar21,
			ConnectionID:     connectionId21,
			LatencyThreshold: latencyThreshold21,
			Entity:           entity16,
		}
	}
	if sourceGong != nil {
		source = shared.SourceTypes{
			SourceGong: sourceGong,
		}
	}
	var sourceGoogleAnalyticsGa4 *shared.SourceGoogleAnalyticsGa4
	if r.Source.GoogleAnalyticsGa4 != nil {
		typeVar22 := shared.SourceGoogleAnalyticsGa4Type(r.Source.GoogleAnalyticsGa4.Type.ValueString())
		connectionId22 := r.Source.GoogleAnalyticsGa4.ConnectionID.ValueString()
		latencyThreshold22 := new(int64)
		if !r.Source.GoogleAnalyticsGa4.LatencyThreshold.IsUnknown() && !r.Source.GoogleAnalyticsGa4.LatencyThreshold.IsNull() {
			*latencyThreshold22 = r.Source.GoogleAnalyticsGa4.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold22 = nil
		}
		entity17 := r.Source.GoogleAnalyticsGa4.Entity.ValueString()
		var dimensions1 []string = nil
		for _, dimensionsItem1 := range r.Source.GoogleAnalyticsGa4.Dimensions {
			dimensions1 = append(dimensions1, dimensionsItem1.ValueString())
		}
		var metrics1 []string = nil
		for _, metricsItem1 := range r.Source.GoogleAnalyticsGa4.Metrics {
			metrics1 = append(metrics1, metricsItem1.ValueString())
		}
		sourceGoogleAnalyticsGa4 = &shared.SourceGoogleAnalyticsGa4{
			Type:             typeVar22,
			ConnectionID:     connectionId22,
			LatencyThreshold: latencyThreshold22,
			Entity:           entity17,
			Dimensions:       dimensions1,
			Metrics:          metrics1,
		}
	}
	if sourceGoogleAnalyticsGa4 != nil {
		source = shared.SourceTypes{
			SourceGoogleAnalyticsGa4: sourceGoogleAnalyticsGa4,
		}
	}
	var sourceGoogleCloudStorage *shared.SourceGoogleCloudStorage
	if r.Source.GoogleCloudStorage != nil {
		typeVar23 := shared.SourceGoogleCloudStorageType(r.Source.GoogleCloudStorage.Type.ValueString())
		connectionId23 := r.Source.GoogleCloudStorage.ConnectionID.ValueString()
		latencyThreshold23 := new(int64)
		if !r.Source.GoogleCloudStorage.LatencyThreshold.IsUnknown() && !r.Source.GoogleCloudStorage.LatencyThreshold.IsNull() {
			*latencyThreshold23 = r.Source.GoogleCloudStorage.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold23 = nil
		}
		fileNameFilter1 := new(string)
		if !r.Source.GoogleCloudStorage.FileNameFilter.IsUnknown() && !r.Source.GoogleCloudStorage.FileNameFilter.IsNull() {
			*fileNameFilter1 = r.Source.GoogleCloudStorage.FileNameFilter.ValueString()
		} else {
			fileNameFilter1 = nil
		}
		newFileBehavior1 := shared.SourceGoogleCloudStorageNewFileBehavior(r.Source.GoogleCloudStorage.NewFileBehavior.ValueString())
		lowWatermark1 := new(customTypes.Date)
		if !r.Source.GoogleCloudStorage.LowWatermark.IsUnknown() && !r.Source.GoogleCloudStorage.LowWatermark.IsNull() {
			lowWatermark1 = customTypes.MustNewDateFromString(r.Source.GoogleCloudStorage.LowWatermark.ValueString())
		} else {
			lowWatermark1 = nil
		}
		var paths1 []string = nil
		for _, pathsItem1 := range r.Source.GoogleCloudStorage.Paths {
			paths1 = append(paths1, pathsItem1.ValueString())
		}
		globPattern1 := new(string)
		if !r.Source.GoogleCloudStorage.GlobPattern.IsUnknown() && !r.Source.GoogleCloudStorage.GlobPattern.IsNull() {
			*globPattern1 = r.Source.GoogleCloudStorage.GlobPattern.ValueString()
		} else {
			globPattern1 = nil
		}
		sourceGoogleCloudStorage = &shared.SourceGoogleCloudStorage{
			Type:             typeVar23,
			ConnectionID:     connectionId23,
			LatencyThreshold: latencyThreshold23,
			FileNameFilter:   fileNameFilter1,
			NewFileBehavior:  newFileBehavior1,
			LowWatermark:     lowWatermark1,
			Paths:            paths1,
			GlobPattern:      globPattern1,
		}
	}
	if sourceGoogleCloudStorage != nil {
		source = shared.SourceTypes{
			SourceGoogleCloudStorage: sourceGoogleCloudStorage,
		}
	}
	var sourceGoogleAds *shared.SourceGoogleAds
	if r.Source.GoogleAds != nil {
		typeVar24 := shared.SourceGoogleAdsType(r.Source.GoogleAds.Type.ValueString())
		connectionId24 := r.Source.GoogleAds.ConnectionID.ValueString()
		latencyThreshold24 := new(int64)
		if !r.Source.GoogleAds.LatencyThreshold.IsUnknown() && !r.Source.GoogleAds.LatencyThreshold.IsNull() {
			*latencyThreshold24 = r.Source.GoogleAds.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold24 = nil
		}
		entity18 := r.Source.GoogleAds.Entity.ValueString()
		var fields1 []string = nil
		for _, fieldsItem1 := range r.Source.GoogleAds.Fields {
			fields1 = append(fields1, fieldsItem1.ValueString())
		}
		var segments []string = nil
		for _, segmentsItem := range r.Source.GoogleAds.Segments {
			segments = append(segments, segmentsItem.ValueString())
		}
		var attributedResources []string = nil
		for _, attributedResourcesItem := range r.Source.GoogleAds.AttributedResources {
			attributedResources = append(attributedResources, attributedResourcesItem.ValueString())
		}
		var metrics2 []string = nil
		for _, metricsItem2 := range r.Source.GoogleAds.Metrics {
			metrics2 = append(metrics2, metricsItem2.ValueString())
		}
		sourceGoogleAds = &shared.SourceGoogleAds{
			Type:                typeVar24,
			ConnectionID:        connectionId24,
			LatencyThreshold:    latencyThreshold24,
			Entity:              entity18,
			Fields:              fields1,
			Segments:            segments,
			AttributedResources: attributedResources,
			Metrics:             metrics2,
		}
	}
	if sourceGoogleAds != nil {
		source = shared.SourceTypes{
			SourceGoogleAds: sourceGoogleAds,
		}
	}
	var sourceGoogleSheets *shared.SourceGoogleSheets
	if r.Source.GoogleSheets != nil {
		typeVar25 := shared.SourceGoogleSheetsType(r.Source.GoogleSheets.Type.ValueString())
		connectionId25 := r.Source.GoogleSheets.ConnectionID.ValueString()
		latencyThreshold25 := new(int64)
		if !r.Source.GoogleSheets.LatencyThreshold.IsUnknown() && !r.Source.GoogleSheets.LatencyThreshold.IsNull() {
			*latencyThreshold25 = r.Source.GoogleSheets.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold25 = nil
		}
		entity19 := r.Source.GoogleSheets.Entity.ValueString()
		sourceGoogleSheets = &shared.SourceGoogleSheets{
			Type:             typeVar25,
			ConnectionID:     connectionId25,
			LatencyThreshold: latencyThreshold25,
			Entity:           entity19,
		}
	}
	if sourceGoogleSheets != nil {
		source = shared.SourceTypes{
			SourceGoogleSheets: sourceGoogleSheets,
		}
	}
	var sourceHubspot *shared.SourceHubspot
	if r.Source.Hubspot != nil {
		typeVar26 := shared.SourceHubspotType(r.Source.Hubspot.Type.ValueString())
		connectionId26 := r.Source.Hubspot.ConnectionID.ValueString()
		latencyThreshold26 := new(int64)
		if !r.Source.Hubspot.LatencyThreshold.IsUnknown() && !r.Source.Hubspot.LatencyThreshold.IsNull() {
			*latencyThreshold26 = r.Source.Hubspot.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold26 = nil
		}
		entity20 := r.Source.Hubspot.Entity.ValueString()
		sourceHubspot = &shared.SourceHubspot{
			Type:             typeVar26,
			ConnectionID:     connectionId26,
			LatencyThreshold: latencyThreshold26,
			Entity:           entity20,
		}
	}
	if sourceHubspot != nil {
		source = shared.SourceTypes{
			SourceHubspot: sourceHubspot,
		}
	}
	var sourceIntercom *shared.SourceIntercom
	if r.Source.Intercom != nil {
		typeVar27 := shared.SourceIntercomType(r.Source.Intercom.Type.ValueString())
		connectionId27 := r.Source.Intercom.ConnectionID.ValueString()
		latencyThreshold27 := new(int64)
		if !r.Source.Intercom.LatencyThreshold.IsUnknown() && !r.Source.Intercom.LatencyThreshold.IsNull() {
			*latencyThreshold27 = r.Source.Intercom.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold27 = nil
		}
		entity21 := r.Source.Intercom.Entity.ValueString()
		sourceIntercom = &shared.SourceIntercom{
			Type:             typeVar27,
			ConnectionID:     connectionId27,
			LatencyThreshold: latencyThreshold27,
			Entity:           entity21,
		}
	}
	if sourceIntercom != nil {
		source = shared.SourceTypes{
			SourceIntercom: sourceIntercom,
		}
	}
	var sourceImpactRadius *shared.SourceImpactRadius
	if r.Source.ImpactRadius != nil {
		typeVar28 := shared.SourceImpactRadiusType(r.Source.ImpactRadius.Type.ValueString())
		connectionId28 := r.Source.ImpactRadius.ConnectionID.ValueString()
		latencyThreshold28 := new(int64)
		if !r.Source.ImpactRadius.LatencyThreshold.IsUnknown() && !r.Source.ImpactRadius.LatencyThreshold.IsNull() {
			*latencyThreshold28 = r.Source.ImpactRadius.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold28 = nil
		}
		entity22 := r.Source.ImpactRadius.Entity.ValueString()
		sourceImpactRadius = &shared.SourceImpactRadius{
			Type:             typeVar28,
			ConnectionID:     connectionId28,
			LatencyThreshold: latencyThreshold28,
			Entity:           entity22,
		}
	}
	if sourceImpactRadius != nil {
		source = shared.SourceTypes{
			SourceImpactRadius: sourceImpactRadius,
		}
	}
	var sourceJira *shared.SourceJira
	if r.Source.Jira != nil {
		typeVar29 := shared.SourceJiraType(r.Source.Jira.Type.ValueString())
		connectionId29 := r.Source.Jira.ConnectionID.ValueString()
		latencyThreshold29 := new(int64)
		if !r.Source.Jira.LatencyThreshold.IsUnknown() && !r.Source.Jira.LatencyThreshold.IsNull() {
			*latencyThreshold29 = r.Source.Jira.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold29 = nil
		}
		entity23 := r.Source.Jira.Entity.ValueString()
		sourceJira = &shared.SourceJira{
			Type:             typeVar29,
			ConnectionID:     connectionId29,
			LatencyThreshold: latencyThreshold29,
			Entity:           entity23,
		}
	}
	if sourceJira != nil {
		source = shared.SourceTypes{
			SourceJira: sourceJira,
		}
	}
	var sourceJiraAlign *shared.SourceJiraAlign
	if r.Source.JiraAlign != nil {
		typeVar30 := shared.SourceJiraAlignType(r.Source.JiraAlign.Type.ValueString())
		connectionId30 := r.Source.JiraAlign.ConnectionID.ValueString()
		latencyThreshold30 := new(int64)
		if !r.Source.JiraAlign.LatencyThreshold.IsUnknown() && !r.Source.JiraAlign.LatencyThreshold.IsNull() {
			*latencyThreshold30 = r.Source.JiraAlign.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold30 = nil
		}
		entity24 := r.Source.JiraAlign.Entity.ValueString()
		sourceJiraAlign = &shared.SourceJiraAlign{
			Type:             typeVar30,
			ConnectionID:     connectionId30,
			LatencyThreshold: latencyThreshold30,
			Entity:           entity24,
		}
	}
	if sourceJiraAlign != nil {
		source = shared.SourceTypes{
			SourceJiraAlign: sourceJiraAlign,
		}
	}
	var sourceKafka *shared.SourceKafka
	if r.Source.Kafka != nil {
		typeVar31 := shared.SourceKafkaType(r.Source.Kafka.Type.ValueString())
		connectionId31 := r.Source.Kafka.ConnectionID.ValueString()
		latencyThreshold31 := new(int64)
		if !r.Source.Kafka.LatencyThreshold.IsUnknown() && !r.Source.Kafka.LatencyThreshold.IsNull() {
			*latencyThreshold31 = r.Source.Kafka.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold31 = nil
		}
		entity25 := r.Source.Kafka.Entity.ValueString()
		sourceKafka = &shared.SourceKafka{
			Type:             typeVar31,
			ConnectionID:     connectionId31,
			LatencyThreshold: latencyThreshold31,
			Entity:           entity25,
		}
	}
	if sourceKafka != nil {
		source = shared.SourceTypes{
			SourceKafka: sourceKafka,
		}
	}
	var sourceKustomer *shared.SourceKustomer
	if r.Source.Kustomer != nil {
		typeVar32 := shared.SourceKustomerType(r.Source.Kustomer.Type.ValueString())
		connectionId32 := r.Source.Kustomer.ConnectionID.ValueString()
		latencyThreshold32 := new(int64)
		if !r.Source.Kustomer.LatencyThreshold.IsUnknown() && !r.Source.Kustomer.LatencyThreshold.IsNull() {
			*latencyThreshold32 = r.Source.Kustomer.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold32 = nil
		}
		entity26 := r.Source.Kustomer.Entity.ValueString()
		sourceKustomer = &shared.SourceKustomer{
			Type:             typeVar32,
			ConnectionID:     connectionId32,
			LatencyThreshold: latencyThreshold32,
			Entity:           entity26,
		}
	}
	if sourceKustomer != nil {
		source = shared.SourceTypes{
			SourceKustomer: sourceKustomer,
		}
	}
	var sourceLdap *shared.SourceLdap
	if r.Source.Ldap != nil {
		typeVar33 := shared.SourceLdapType(r.Source.Ldap.Type.ValueString())
		connectionId33 := r.Source.Ldap.ConnectionID.ValueString()
		latencyThreshold33 := new(int64)
		if !r.Source.Ldap.LatencyThreshold.IsUnknown() && !r.Source.Ldap.LatencyThreshold.IsNull() {
			*latencyThreshold33 = r.Source.Ldap.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold33 = nil
		}
		entity27 := r.Source.Ldap.Entity.ValueString()
		sourceLdap = &shared.SourceLdap{
			Type:             typeVar33,
			ConnectionID:     connectionId33,
			LatencyThreshold: latencyThreshold33,
			Entity:           entity27,
		}
	}
	if sourceLdap != nil {
		source = shared.SourceTypes{
			SourceLdap: sourceLdap,
		}
	}
	var sourceLdapVirtualListView *shared.SourceLdapVirtualListView
	if r.Source.LdapVirtualListView != nil {
		typeVar34 := shared.SourceLdapVirtualListViewType(r.Source.LdapVirtualListView.Type.ValueString())
		connectionId34 := r.Source.LdapVirtualListView.ConnectionID.ValueString()
		latencyThreshold34 := new(int64)
		if !r.Source.LdapVirtualListView.LatencyThreshold.IsUnknown() && !r.Source.LdapVirtualListView.LatencyThreshold.IsNull() {
			*latencyThreshold34 = r.Source.LdapVirtualListView.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold34 = nil
		}
		entity28 := r.Source.LdapVirtualListView.Entity.ValueString()
		sourceLdapVirtualListView = &shared.SourceLdapVirtualListView{
			Type:             typeVar34,
			ConnectionID:     connectionId34,
			LatencyThreshold: latencyThreshold34,
			Entity:           entity28,
		}
	}
	if sourceLdapVirtualListView != nil {
		source = shared.SourceTypes{
			SourceLdapVirtualListView: sourceLdapVirtualListView,
		}
	}
	var sourceLinkedInAds *shared.SourceLinkedInAds
	if r.Source.LinkedInAds != nil {
		typeVar35 := shared.SourceLinkedInAdsType(r.Source.LinkedInAds.Type.ValueString())
		connectionId35 := r.Source.LinkedInAds.ConnectionID.ValueString()
		latencyThreshold35 := new(int64)
		if !r.Source.LinkedInAds.LatencyThreshold.IsUnknown() && !r.Source.LinkedInAds.LatencyThreshold.IsNull() {
			*latencyThreshold35 = r.Source.LinkedInAds.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold35 = nil
		}
		entity29 := r.Source.LinkedInAds.Entity.ValueString()
		var metrics3 []string = nil
		for _, metricsItem3 := range r.Source.LinkedInAds.Metrics {
			metrics3 = append(metrics3, metricsItem3.ValueString())
		}
		var pivots []string = nil
		for _, pivotsItem := range r.Source.LinkedInAds.Pivots {
			pivots = append(pivots, pivotsItem.ValueString())
		}
		sourceLinkedInAds = &shared.SourceLinkedInAds{
			Type:             typeVar35,
			ConnectionID:     connectionId35,
			LatencyThreshold: latencyThreshold35,
			Entity:           entity29,
			Metrics:          metrics3,
			Pivots:           pivots,
		}
	}
	if sourceLinkedInAds != nil {
		source = shared.SourceTypes{
			SourceLinkedInAds: sourceLinkedInAds,
		}
	}
	var sourceMarketo *shared.SourceMarketo
	if r.Source.Marketo != nil {
		typeVar36 := shared.SourceMarketoType(r.Source.Marketo.Type.ValueString())
		connectionId36 := r.Source.Marketo.ConnectionID.ValueString()
		latencyThreshold36 := new(int64)
		if !r.Source.Marketo.LatencyThreshold.IsUnknown() && !r.Source.Marketo.LatencyThreshold.IsNull() {
			*latencyThreshold36 = r.Source.Marketo.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold36 = nil
		}
		entity30 := r.Source.Marketo.Entity.ValueString()
		var activityTypes []string = nil
		for _, activityTypesItem := range r.Source.Marketo.ActivityTypes {
			activityTypes = append(activityTypes, activityTypesItem.ValueString())
		}
		sourceMarketo = &shared.SourceMarketo{
			Type:             typeVar36,
			ConnectionID:     connectionId36,
			LatencyThreshold: latencyThreshold36,
			Entity:           entity30,
			ActivityTypes:    activityTypes,
		}
	}
	if sourceMarketo != nil {
		source = shared.SourceTypes{
			SourceMarketo: sourceMarketo,
		}
	}
	var sourceMixpanel *shared.SourceMixpanel
	if r.Source.Mixpanel != nil {
		typeVar37 := shared.SourceMixpanelType(r.Source.Mixpanel.Type.ValueString())
		connectionId37 := r.Source.Mixpanel.ConnectionID.ValueString()
		latencyThreshold37 := new(int64)
		if !r.Source.Mixpanel.LatencyThreshold.IsUnknown() && !r.Source.Mixpanel.LatencyThreshold.IsNull() {
			*latencyThreshold37 = r.Source.Mixpanel.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold37 = nil
		}
		entity31 := r.Source.Mixpanel.Entity.ValueString()
		sourceMixpanel = &shared.SourceMixpanel{
			Type:             typeVar37,
			ConnectionID:     connectionId37,
			LatencyThreshold: latencyThreshold37,
			Entity:           entity31,
		}
	}
	if sourceMixpanel != nil {
		source = shared.SourceTypes{
			SourceMixpanel: sourceMixpanel,
		}
	}
	var sourceMongodb *shared.SourceMongodb
	if r.Source.Mongodb != nil {
		typeVar38 := shared.SourceMongodbType(r.Source.Mongodb.Type.ValueString())
		connectionId38 := r.Source.Mongodb.ConnectionID.ValueString()
		latencyThreshold38 := new(int64)
		if !r.Source.Mongodb.LatencyThreshold.IsUnknown() && !r.Source.Mongodb.LatencyThreshold.IsNull() {
			*latencyThreshold38 = r.Source.Mongodb.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold38 = nil
		}
		table4 := new(string)
		if !r.Source.Mongodb.Table.IsUnknown() && !r.Source.Mongodb.Table.IsNull() {
			*table4 = r.Source.Mongodb.Table.ValueString()
		} else {
			table4 = nil
		}
		tableNameFilter4 := new(string)
		if !r.Source.Mongodb.TableNameFilter.IsUnknown() && !r.Source.Mongodb.TableNameFilter.IsNull() {
			*tableNameFilter4 = r.Source.Mongodb.TableNameFilter.ValueString()
		} else {
			tableNameFilter4 = nil
		}
		sourceMongodb = &shared.SourceMongodb{
			Type:             typeVar38,
			ConnectionID:     connectionId38,
			LatencyThreshold: latencyThreshold38,
			Table:            table4,
			TableNameFilter:  tableNameFilter4,
		}
	}
	if sourceMongodb != nil {
		source = shared.SourceTypes{
			SourceMongodb: sourceMongodb,
		}
	}
	var sourceMysql *shared.SourceMysql
	if r.Source.Mysql != nil {
		typeVar39 := shared.SourceMysqlType(r.Source.Mysql.Type.ValueString())
		connectionId39 := r.Source.Mysql.ConnectionID.ValueString()
		latencyThreshold39 := new(int64)
		if !r.Source.Mysql.LatencyThreshold.IsUnknown() && !r.Source.Mysql.LatencyThreshold.IsNull() {
			*latencyThreshold39 = r.Source.Mysql.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold39 = nil
		}
		table5 := new(string)
		if !r.Source.Mysql.Table.IsUnknown() && !r.Source.Mysql.Table.IsNull() {
			*table5 = r.Source.Mysql.Table.ValueString()
		} else {
			table5 = nil
		}
		tableNameFilter5 := new(string)
		if !r.Source.Mysql.TableNameFilter.IsUnknown() && !r.Source.Mysql.TableNameFilter.IsNull() {
			*tableNameFilter5 = r.Source.Mysql.TableNameFilter.ValueString()
		} else {
			tableNameFilter5 = nil
		}
		lastUpdatedColumn4 := new(string)
		if !r.Source.Mysql.LastUpdatedColumn.IsUnknown() && !r.Source.Mysql.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn4 = r.Source.Mysql.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn4 = nil
		}
		var primaryKeyColumns4 []string = nil
		for _, primaryKeyColumnsItem4 := range r.Source.Mysql.PrimaryKeyColumns {
			primaryKeyColumns4 = append(primaryKeyColumns4, primaryKeyColumnsItem4.ValueString())
		}
		database := new(string)
		if !r.Source.Mysql.Database.IsUnknown() && !r.Source.Mysql.Database.IsNull() {
			*database = r.Source.Mysql.Database.ValueString()
		} else {
			database = nil
		}
		sourceMysql = &shared.SourceMysql{
			Type:              typeVar39,
			ConnectionID:      connectionId39,
			LatencyThreshold:  latencyThreshold39,
			Table:             table5,
			TableNameFilter:   tableNameFilter5,
			LastUpdatedColumn: lastUpdatedColumn4,
			PrimaryKeyColumns: primaryKeyColumns4,
			Database:          database,
		}
	}
	if sourceMysql != nil {
		source = shared.SourceTypes{
			SourceMysql: sourceMysql,
		}
	}
	var sourceMysqlSharded *shared.SourceMysqlSharded
	if r.Source.MysqlSharded != nil {
		typeVar40 := shared.SourceMysqlShardedType(r.Source.MysqlSharded.Type.ValueString())
		connectionId40 := r.Source.MysqlSharded.ConnectionID.ValueString()
		latencyThreshold40 := new(int64)
		if !r.Source.MysqlSharded.LatencyThreshold.IsUnknown() && !r.Source.MysqlSharded.LatencyThreshold.IsNull() {
			*latencyThreshold40 = r.Source.MysqlSharded.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold40 = nil
		}
		table6 := new(string)
		if !r.Source.MysqlSharded.Table.IsUnknown() && !r.Source.MysqlSharded.Table.IsNull() {
			*table6 = r.Source.MysqlSharded.Table.ValueString()
		} else {
			table6 = nil
		}
		tableNameFilter6 := new(string)
		if !r.Source.MysqlSharded.TableNameFilter.IsUnknown() && !r.Source.MysqlSharded.TableNameFilter.IsNull() {
			*tableNameFilter6 = r.Source.MysqlSharded.TableNameFilter.ValueString()
		} else {
			tableNameFilter6 = nil
		}
		lastUpdatedColumn5 := new(string)
		if !r.Source.MysqlSharded.LastUpdatedColumn.IsUnknown() && !r.Source.MysqlSharded.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn5 = r.Source.MysqlSharded.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn5 = nil
		}
		var primaryKeyColumns5 []string = nil
		for _, primaryKeyColumnsItem5 := range r.Source.MysqlSharded.PrimaryKeyColumns {
			primaryKeyColumns5 = append(primaryKeyColumns5, primaryKeyColumnsItem5.ValueString())
		}
		database1 := new(string)
		if !r.Source.MysqlSharded.Database.IsUnknown() && !r.Source.MysqlSharded.Database.IsNull() {
			*database1 = r.Source.MysqlSharded.Database.ValueString()
		} else {
			database1 = nil
		}
		sourceMysqlSharded = &shared.SourceMysqlSharded{
			Type:              typeVar40,
			ConnectionID:      connectionId40,
			LatencyThreshold:  latencyThreshold40,
			Table:             table6,
			TableNameFilter:   tableNameFilter6,
			LastUpdatedColumn: lastUpdatedColumn5,
			PrimaryKeyColumns: primaryKeyColumns5,
			Database:          database1,
		}
	}
	if sourceMysqlSharded != nil {
		source = shared.SourceTypes{
			SourceMysqlSharded: sourceMysqlSharded,
		}
	}
	var sourceNetsuite *shared.SourceNetsuite
	if r.Source.Netsuite != nil {
		typeVar41 := shared.SourceNetsuiteType(r.Source.Netsuite.Type.ValueString())
		connectionId41 := r.Source.Netsuite.ConnectionID.ValueString()
		latencyThreshold41 := new(int64)
		if !r.Source.Netsuite.LatencyThreshold.IsUnknown() && !r.Source.Netsuite.LatencyThreshold.IsNull() {
			*latencyThreshold41 = r.Source.Netsuite.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold41 = nil
		}
		entity32 := r.Source.Netsuite.Entity.ValueString()
		sourceNetsuite = &shared.SourceNetsuite{
			Type:             typeVar41,
			ConnectionID:     connectionId41,
			LatencyThreshold: latencyThreshold41,
			Entity:           entity32,
		}
	}
	if sourceNetsuite != nil {
		source = shared.SourceTypes{
			SourceNetsuite: sourceNetsuite,
		}
	}
	var sourceNetsuiteV2 *shared.SourceNetsuiteV2
	if r.Source.NetsuiteV2 != nil {
		typeVar42 := shared.SourceNetsuiteV2Type(r.Source.NetsuiteV2.Type.ValueString())
		connectionId42 := r.Source.NetsuiteV2.ConnectionID.ValueString()
		latencyThreshold42 := new(int64)
		if !r.Source.NetsuiteV2.LatencyThreshold.IsUnknown() && !r.Source.NetsuiteV2.LatencyThreshold.IsNull() {
			*latencyThreshold42 = r.Source.NetsuiteV2.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold42 = nil
		}
		entity33 := r.Source.NetsuiteV2.Entity.ValueString()
		sourceNetsuiteV2 = &shared.SourceNetsuiteV2{
			Type:             typeVar42,
			ConnectionID:     connectionId42,
			LatencyThreshold: latencyThreshold42,
			Entity:           entity33,
		}
	}
	if sourceNetsuiteV2 != nil {
		source = shared.SourceTypes{
			SourceNetsuiteV2: sourceNetsuiteV2,
		}
	}
	var sourceOracle *shared.SourceOracle
	if r.Source.Oracle != nil {
		typeVar43 := shared.SourceOracleType(r.Source.Oracle.Type.ValueString())
		connectionId43 := r.Source.Oracle.ConnectionID.ValueString()
		latencyThreshold43 := new(int64)
		if !r.Source.Oracle.LatencyThreshold.IsUnknown() && !r.Source.Oracle.LatencyThreshold.IsNull() {
			*latencyThreshold43 = r.Source.Oracle.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold43 = nil
		}
		table7 := new(string)
		if !r.Source.Oracle.Table.IsUnknown() && !r.Source.Oracle.Table.IsNull() {
			*table7 = r.Source.Oracle.Table.ValueString()
		} else {
			table7 = nil
		}
		tableNameFilter7 := new(string)
		if !r.Source.Oracle.TableNameFilter.IsUnknown() && !r.Source.Oracle.TableNameFilter.IsNull() {
			*tableNameFilter7 = r.Source.Oracle.TableNameFilter.ValueString()
		} else {
			tableNameFilter7 = nil
		}
		lastUpdatedColumn6 := new(string)
		if !r.Source.Oracle.LastUpdatedColumn.IsUnknown() && !r.Source.Oracle.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn6 = r.Source.Oracle.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn6 = nil
		}
		var primaryKeyColumns6 []string = nil
		for _, primaryKeyColumnsItem6 := range r.Source.Oracle.PrimaryKeyColumns {
			primaryKeyColumns6 = append(primaryKeyColumns6, primaryKeyColumnsItem6.ValueString())
		}
		schema3 := new(string)
		if !r.Source.Oracle.Schema.IsUnknown() && !r.Source.Oracle.Schema.IsNull() {
			*schema3 = r.Source.Oracle.Schema.ValueString()
		} else {
			schema3 = nil
		}
		sourceOracle = &shared.SourceOracle{
			Type:              typeVar43,
			ConnectionID:      connectionId43,
			LatencyThreshold:  latencyThreshold43,
			Table:             table7,
			TableNameFilter:   tableNameFilter7,
			LastUpdatedColumn: lastUpdatedColumn6,
			PrimaryKeyColumns: primaryKeyColumns6,
			Schema:            schema3,
		}
	}
	if sourceOracle != nil {
		source = shared.SourceTypes{
			SourceOracle: sourceOracle,
		}
	}
	var sourceOracleSharded *shared.SourceOracleSharded
	if r.Source.OracleSharded != nil {
		typeVar44 := shared.SourceOracleShardedType(r.Source.OracleSharded.Type.ValueString())
		connectionId44 := r.Source.OracleSharded.ConnectionID.ValueString()
		latencyThreshold44 := new(int64)
		if !r.Source.OracleSharded.LatencyThreshold.IsUnknown() && !r.Source.OracleSharded.LatencyThreshold.IsNull() {
			*latencyThreshold44 = r.Source.OracleSharded.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold44 = nil
		}
		table8 := new(string)
		if !r.Source.OracleSharded.Table.IsUnknown() && !r.Source.OracleSharded.Table.IsNull() {
			*table8 = r.Source.OracleSharded.Table.ValueString()
		} else {
			table8 = nil
		}
		tableNameFilter8 := new(string)
		if !r.Source.OracleSharded.TableNameFilter.IsUnknown() && !r.Source.OracleSharded.TableNameFilter.IsNull() {
			*tableNameFilter8 = r.Source.OracleSharded.TableNameFilter.ValueString()
		} else {
			tableNameFilter8 = nil
		}
		lastUpdatedColumn7 := new(string)
		if !r.Source.OracleSharded.LastUpdatedColumn.IsUnknown() && !r.Source.OracleSharded.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn7 = r.Source.OracleSharded.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn7 = nil
		}
		var primaryKeyColumns7 []string = nil
		for _, primaryKeyColumnsItem7 := range r.Source.OracleSharded.PrimaryKeyColumns {
			primaryKeyColumns7 = append(primaryKeyColumns7, primaryKeyColumnsItem7.ValueString())
		}
		schema4 := new(string)
		if !r.Source.OracleSharded.Schema.IsUnknown() && !r.Source.OracleSharded.Schema.IsNull() {
			*schema4 = r.Source.OracleSharded.Schema.ValueString()
		} else {
			schema4 = nil
		}
		sourceOracleSharded = &shared.SourceOracleSharded{
			Type:              typeVar44,
			ConnectionID:      connectionId44,
			LatencyThreshold:  latencyThreshold44,
			Table:             table8,
			TableNameFilter:   tableNameFilter8,
			LastUpdatedColumn: lastUpdatedColumn7,
			PrimaryKeyColumns: primaryKeyColumns7,
			Schema:            schema4,
		}
	}
	if sourceOracleSharded != nil {
		source = shared.SourceTypes{
			SourceOracleSharded: sourceOracleSharded,
		}
	}
	var sourceOutreach *shared.SourceOutreach
	if r.Source.Outreach != nil {
		typeVar45 := shared.SourceOutreachType(r.Source.Outreach.Type.ValueString())
		connectionId45 := r.Source.Outreach.ConnectionID.ValueString()
		latencyThreshold45 := new(int64)
		if !r.Source.Outreach.LatencyThreshold.IsUnknown() && !r.Source.Outreach.LatencyThreshold.IsNull() {
			*latencyThreshold45 = r.Source.Outreach.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold45 = nil
		}
		entity34 := r.Source.Outreach.Entity.ValueString()
		sourceOutreach = &shared.SourceOutreach{
			Type:             typeVar45,
			ConnectionID:     connectionId45,
			LatencyThreshold: latencyThreshold45,
			Entity:           entity34,
		}
	}
	if sourceOutreach != nil {
		source = shared.SourceTypes{
			SourceOutreach: sourceOutreach,
		}
	}
	var sourceOutlook *shared.SourceOutlook
	if r.Source.Outlook != nil {
		typeVar46 := shared.SourceOutlookType(r.Source.Outlook.Type.ValueString())
		connectionId46 := r.Source.Outlook.ConnectionID.ValueString()
		latencyThreshold46 := new(int64)
		if !r.Source.Outlook.LatencyThreshold.IsUnknown() && !r.Source.Outlook.LatencyThreshold.IsNull() {
			*latencyThreshold46 = r.Source.Outlook.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold46 = nil
		}
		entity35 := r.Source.Outlook.Entity.ValueString()
		sourceOutlook = &shared.SourceOutlook{
			Type:             typeVar46,
			ConnectionID:     connectionId46,
			LatencyThreshold: latencyThreshold46,
			Entity:           entity35,
		}
	}
	if sourceOutlook != nil {
		source = shared.SourceTypes{
			SourceOutlook: sourceOutlook,
		}
	}
	var sourcePinterestAds *shared.SourcePinterestAds
	if r.Source.PinterestAds != nil {
		typeVar47 := shared.SourcePinterestAdsType(r.Source.PinterestAds.Type.ValueString())
		connectionId47 := r.Source.PinterestAds.ConnectionID.ValueString()
		latencyThreshold47 := new(int64)
		if !r.Source.PinterestAds.LatencyThreshold.IsUnknown() && !r.Source.PinterestAds.LatencyThreshold.IsNull() {
			*latencyThreshold47 = r.Source.PinterestAds.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold47 = nil
		}
		entity36 := r.Source.PinterestAds.Entity.ValueString()
		var level []string = nil
		for _, levelItem := range r.Source.PinterestAds.Level {
			level = append(level, levelItem.ValueString())
		}
		var columns []string = nil
		for _, columnsItem := range r.Source.PinterestAds.Columns {
			columns = append(columns, columnsItem.ValueString())
		}
		var targetingTypes []string = nil
		for _, targetingTypesItem := range r.Source.PinterestAds.TargetingTypes {
			targetingTypes = append(targetingTypes, targetingTypesItem.ValueString())
		}
		sourcePinterestAds = &shared.SourcePinterestAds{
			Type:             typeVar47,
			ConnectionID:     connectionId47,
			LatencyThreshold: latencyThreshold47,
			Entity:           entity36,
			Level:            level,
			Columns:          columns,
			TargetingTypes:   targetingTypes,
		}
	}
	if sourcePinterestAds != nil {
		source = shared.SourceTypes{
			SourcePinterestAds: sourcePinterestAds,
		}
	}
	var sourcePostgres *shared.SourcePostgres
	if r.Source.Postgres != nil {
		typeVar48 := shared.SourcePostgresType(r.Source.Postgres.Type.ValueString())
		connectionId48 := r.Source.Postgres.ConnectionID.ValueString()
		latencyThreshold48 := new(int64)
		if !r.Source.Postgres.LatencyThreshold.IsUnknown() && !r.Source.Postgres.LatencyThreshold.IsNull() {
			*latencyThreshold48 = r.Source.Postgres.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold48 = nil
		}
		table9 := new(string)
		if !r.Source.Postgres.Table.IsUnknown() && !r.Source.Postgres.Table.IsNull() {
			*table9 = r.Source.Postgres.Table.ValueString()
		} else {
			table9 = nil
		}
		tableNameFilter9 := new(string)
		if !r.Source.Postgres.TableNameFilter.IsUnknown() && !r.Source.Postgres.TableNameFilter.IsNull() {
			*tableNameFilter9 = r.Source.Postgres.TableNameFilter.ValueString()
		} else {
			tableNameFilter9 = nil
		}
		lastUpdatedColumn8 := new(string)
		if !r.Source.Postgres.LastUpdatedColumn.IsUnknown() && !r.Source.Postgres.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn8 = r.Source.Postgres.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn8 = nil
		}
		var primaryKeyColumns8 []string = nil
		for _, primaryKeyColumnsItem8 := range r.Source.Postgres.PrimaryKeyColumns {
			primaryKeyColumns8 = append(primaryKeyColumns8, primaryKeyColumnsItem8.ValueString())
		}
		schema5 := new(string)
		if !r.Source.Postgres.Schema.IsUnknown() && !r.Source.Postgres.Schema.IsNull() {
			*schema5 = r.Source.Postgres.Schema.ValueString()
		} else {
			schema5 = nil
		}
		sourcePostgres = &shared.SourcePostgres{
			Type:              typeVar48,
			ConnectionID:      connectionId48,
			LatencyThreshold:  latencyThreshold48,
			Table:             table9,
			TableNameFilter:   tableNameFilter9,
			LastUpdatedColumn: lastUpdatedColumn8,
			PrimaryKeyColumns: primaryKeyColumns8,
			Schema:            schema5,
		}
	}
	if sourcePostgres != nil {
		source = shared.SourceTypes{
			SourcePostgres: sourcePostgres,
		}
	}
	var sourcePostgresSharded *shared.SourcePostgresSharded
	if r.Source.PostgresSharded != nil {
		typeVar49 := shared.SourcePostgresShardedType(r.Source.PostgresSharded.Type.ValueString())
		connectionId49 := r.Source.PostgresSharded.ConnectionID.ValueString()
		latencyThreshold49 := new(int64)
		if !r.Source.PostgresSharded.LatencyThreshold.IsUnknown() && !r.Source.PostgresSharded.LatencyThreshold.IsNull() {
			*latencyThreshold49 = r.Source.PostgresSharded.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold49 = nil
		}
		table10 := new(string)
		if !r.Source.PostgresSharded.Table.IsUnknown() && !r.Source.PostgresSharded.Table.IsNull() {
			*table10 = r.Source.PostgresSharded.Table.ValueString()
		} else {
			table10 = nil
		}
		tableNameFilter10 := new(string)
		if !r.Source.PostgresSharded.TableNameFilter.IsUnknown() && !r.Source.PostgresSharded.TableNameFilter.IsNull() {
			*tableNameFilter10 = r.Source.PostgresSharded.TableNameFilter.ValueString()
		} else {
			tableNameFilter10 = nil
		}
		lastUpdatedColumn9 := new(string)
		if !r.Source.PostgresSharded.LastUpdatedColumn.IsUnknown() && !r.Source.PostgresSharded.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn9 = r.Source.PostgresSharded.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn9 = nil
		}
		var primaryKeyColumns9 []string = nil
		for _, primaryKeyColumnsItem9 := range r.Source.PostgresSharded.PrimaryKeyColumns {
			primaryKeyColumns9 = append(primaryKeyColumns9, primaryKeyColumnsItem9.ValueString())
		}
		schema6 := new(string)
		if !r.Source.PostgresSharded.Schema.IsUnknown() && !r.Source.PostgresSharded.Schema.IsNull() {
			*schema6 = r.Source.PostgresSharded.Schema.ValueString()
		} else {
			schema6 = nil
		}
		sourcePostgresSharded = &shared.SourcePostgresSharded{
			Type:              typeVar49,
			ConnectionID:      connectionId49,
			LatencyThreshold:  latencyThreshold49,
			Table:             table10,
			TableNameFilter:   tableNameFilter10,
			LastUpdatedColumn: lastUpdatedColumn9,
			PrimaryKeyColumns: primaryKeyColumns9,
			Schema:            schema6,
		}
	}
	if sourcePostgresSharded != nil {
		source = shared.SourceTypes{
			SourcePostgresSharded: sourcePostgresSharded,
		}
	}
	var sourceQuoraAds *shared.SourceQuoraAds
	if r.Source.QuoraAds != nil {
		typeVar50 := shared.SourceQuoraAdsType(r.Source.QuoraAds.Type.ValueString())
		connectionId50 := r.Source.QuoraAds.ConnectionID.ValueString()
		latencyThreshold50 := new(int64)
		if !r.Source.QuoraAds.LatencyThreshold.IsUnknown() && !r.Source.QuoraAds.LatencyThreshold.IsNull() {
			*latencyThreshold50 = r.Source.QuoraAds.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold50 = nil
		}
		entity37 := r.Source.QuoraAds.Entity.ValueString()
		sourceQuoraAds = &shared.SourceQuoraAds{
			Type:             typeVar50,
			ConnectionID:     connectionId50,
			LatencyThreshold: latencyThreshold50,
			Entity:           entity37,
		}
	}
	if sourceQuoraAds != nil {
		source = shared.SourceTypes{
			SourceQuoraAds: sourceQuoraAds,
		}
	}
	var sourceRaveMedidata *shared.SourceRaveMedidata
	if r.Source.RaveMedidata != nil {
		typeVar51 := shared.SourceRaveMedidataType(r.Source.RaveMedidata.Type.ValueString())
		connectionId51 := r.Source.RaveMedidata.ConnectionID.ValueString()
		latencyThreshold51 := new(int64)
		if !r.Source.RaveMedidata.LatencyThreshold.IsUnknown() && !r.Source.RaveMedidata.LatencyThreshold.IsNull() {
			*latencyThreshold51 = r.Source.RaveMedidata.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold51 = nil
		}
		entity38 := r.Source.RaveMedidata.Entity.ValueString()
		sourceRaveMedidata = &shared.SourceRaveMedidata{
			Type:             typeVar51,
			ConnectionID:     connectionId51,
			LatencyThreshold: latencyThreshold51,
			Entity:           entity38,
		}
	}
	if sourceRaveMedidata != nil {
		source = shared.SourceTypes{
			SourceRaveMedidata: sourceRaveMedidata,
		}
	}
	var sourceRecurly *shared.SourceRecurly
	if r.Source.Recurly != nil {
		typeVar52 := shared.SourceRecurlyType(r.Source.Recurly.Type.ValueString())
		connectionId52 := r.Source.Recurly.ConnectionID.ValueString()
		latencyThreshold52 := new(int64)
		if !r.Source.Recurly.LatencyThreshold.IsUnknown() && !r.Source.Recurly.LatencyThreshold.IsNull() {
			*latencyThreshold52 = r.Source.Recurly.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold52 = nil
		}
		entity39 := r.Source.Recurly.Entity.ValueString()
		sourceRecurly = &shared.SourceRecurly{
			Type:             typeVar52,
			ConnectionID:     connectionId52,
			LatencyThreshold: latencyThreshold52,
			Entity:           entity39,
		}
	}
	if sourceRecurly != nil {
		source = shared.SourceTypes{
			SourceRecurly: sourceRecurly,
		}
	}
	var sourceRedshift *shared.SourceRedshift
	if r.Source.Redshift != nil {
		typeVar53 := shared.SourceRedshiftType(r.Source.Redshift.Type.ValueString())
		connectionId53 := r.Source.Redshift.ConnectionID.ValueString()
		latencyThreshold53 := new(int64)
		if !r.Source.Redshift.LatencyThreshold.IsUnknown() && !r.Source.Redshift.LatencyThreshold.IsNull() {
			*latencyThreshold53 = r.Source.Redshift.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold53 = nil
		}
		table11 := new(string)
		if !r.Source.Redshift.Table.IsUnknown() && !r.Source.Redshift.Table.IsNull() {
			*table11 = r.Source.Redshift.Table.ValueString()
		} else {
			table11 = nil
		}
		tableNameFilter11 := new(string)
		if !r.Source.Redshift.TableNameFilter.IsUnknown() && !r.Source.Redshift.TableNameFilter.IsNull() {
			*tableNameFilter11 = r.Source.Redshift.TableNameFilter.ValueString()
		} else {
			tableNameFilter11 = nil
		}
		lastUpdatedColumn10 := new(string)
		if !r.Source.Redshift.LastUpdatedColumn.IsUnknown() && !r.Source.Redshift.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn10 = r.Source.Redshift.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn10 = nil
		}
		var primaryKeyColumns10 []string = nil
		for _, primaryKeyColumnsItem10 := range r.Source.Redshift.PrimaryKeyColumns {
			primaryKeyColumns10 = append(primaryKeyColumns10, primaryKeyColumnsItem10.ValueString())
		}
		schema7 := new(string)
		if !r.Source.Redshift.Schema.IsUnknown() && !r.Source.Redshift.Schema.IsNull() {
			*schema7 = r.Source.Redshift.Schema.ValueString()
		} else {
			schema7 = nil
		}
		sourceRedshift = &shared.SourceRedshift{
			Type:              typeVar53,
			ConnectionID:      connectionId53,
			LatencyThreshold:  latencyThreshold53,
			Table:             table11,
			TableNameFilter:   tableNameFilter11,
			LastUpdatedColumn: lastUpdatedColumn10,
			PrimaryKeyColumns: primaryKeyColumns10,
			Schema:            schema7,
		}
	}
	if sourceRedshift != nil {
		source = shared.SourceTypes{
			SourceRedshift: sourceRedshift,
		}
	}
	var sourceRedshiftSharded *shared.SourceRedshiftSharded
	if r.Source.RedshiftSharded != nil {
		typeVar54 := shared.SourceRedshiftShardedType(r.Source.RedshiftSharded.Type.ValueString())
		connectionId54 := r.Source.RedshiftSharded.ConnectionID.ValueString()
		latencyThreshold54 := new(int64)
		if !r.Source.RedshiftSharded.LatencyThreshold.IsUnknown() && !r.Source.RedshiftSharded.LatencyThreshold.IsNull() {
			*latencyThreshold54 = r.Source.RedshiftSharded.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold54 = nil
		}
		table12 := new(string)
		if !r.Source.RedshiftSharded.Table.IsUnknown() && !r.Source.RedshiftSharded.Table.IsNull() {
			*table12 = r.Source.RedshiftSharded.Table.ValueString()
		} else {
			table12 = nil
		}
		tableNameFilter12 := new(string)
		if !r.Source.RedshiftSharded.TableNameFilter.IsUnknown() && !r.Source.RedshiftSharded.TableNameFilter.IsNull() {
			*tableNameFilter12 = r.Source.RedshiftSharded.TableNameFilter.ValueString()
		} else {
			tableNameFilter12 = nil
		}
		lastUpdatedColumn11 := new(string)
		if !r.Source.RedshiftSharded.LastUpdatedColumn.IsUnknown() && !r.Source.RedshiftSharded.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn11 = r.Source.RedshiftSharded.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn11 = nil
		}
		var primaryKeyColumns11 []string = nil
		for _, primaryKeyColumnsItem11 := range r.Source.RedshiftSharded.PrimaryKeyColumns {
			primaryKeyColumns11 = append(primaryKeyColumns11, primaryKeyColumnsItem11.ValueString())
		}
		schema8 := new(string)
		if !r.Source.RedshiftSharded.Schema.IsUnknown() && !r.Source.RedshiftSharded.Schema.IsNull() {
			*schema8 = r.Source.RedshiftSharded.Schema.ValueString()
		} else {
			schema8 = nil
		}
		sourceRedshiftSharded = &shared.SourceRedshiftSharded{
			Type:              typeVar54,
			ConnectionID:      connectionId54,
			LatencyThreshold:  latencyThreshold54,
			Table:             table12,
			TableNameFilter:   tableNameFilter12,
			LastUpdatedColumn: lastUpdatedColumn11,
			PrimaryKeyColumns: primaryKeyColumns11,
			Schema:            schema8,
		}
	}
	if sourceRedshiftSharded != nil {
		source = shared.SourceTypes{
			SourceRedshiftSharded: sourceRedshiftSharded,
		}
	}
	var sourceS3Legacy *shared.SourceS3Legacy
	if r.Source.S3Legacy != nil {
		typeVar55 := shared.SourceS3LegacyType(r.Source.S3Legacy.Type.ValueString())
		connectionId55 := r.Source.S3Legacy.ConnectionID.ValueString()
		latencyThreshold55 := new(int64)
		if !r.Source.S3Legacy.LatencyThreshold.IsUnknown() && !r.Source.S3Legacy.LatencyThreshold.IsNull() {
			*latencyThreshold55 = r.Source.S3Legacy.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold55 = nil
		}
		fileNameFilter2 := new(string)
		if !r.Source.S3Legacy.FileNameFilter.IsUnknown() && !r.Source.S3Legacy.FileNameFilter.IsNull() {
			*fileNameFilter2 = r.Source.S3Legacy.FileNameFilter.ValueString()
		} else {
			fileNameFilter2 = nil
		}
		newFileBehavior2 := shared.SourceS3LegacyNewFileBehavior(r.Source.S3Legacy.NewFileBehavior.ValueString())
		lowWatermark2 := new(customTypes.Date)
		if !r.Source.S3Legacy.LowWatermark.IsUnknown() && !r.Source.S3Legacy.LowWatermark.IsNull() {
			lowWatermark2 = customTypes.MustNewDateFromString(r.Source.S3Legacy.LowWatermark.ValueString())
		} else {
			lowWatermark2 = nil
		}
		var paths2 []string = nil
		for _, pathsItem2 := range r.Source.S3Legacy.Paths {
			paths2 = append(paths2, pathsItem2.ValueString())
		}
		sourceS3Legacy = &shared.SourceS3Legacy{
			Type:             typeVar55,
			ConnectionID:     connectionId55,
			LatencyThreshold: latencyThreshold55,
			FileNameFilter:   fileNameFilter2,
			NewFileBehavior:  newFileBehavior2,
			LowWatermark:     lowWatermark2,
			Paths:            paths2,
		}
	}
	if sourceS3Legacy != nil {
		source = shared.SourceTypes{
			SourceS3Legacy: sourceS3Legacy,
		}
	}
	var sourceS3Input *shared.SourceS3Input
	if r.Source.S3Input != nil {
		typeVar56 := shared.SourceS3InputType(r.Source.S3Input.Type.ValueString())
		connectionId56 := r.Source.S3Input.ConnectionID.ValueString()
		latencyThreshold56 := new(int64)
		if !r.Source.S3Input.LatencyThreshold.IsUnknown() && !r.Source.S3Input.LatencyThreshold.IsNull() {
			*latencyThreshold56 = r.Source.S3Input.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold56 = nil
		}
		fileNameFilter3 := new(string)
		if !r.Source.S3Input.FileNameFilter.IsUnknown() && !r.Source.S3Input.FileNameFilter.IsNull() {
			*fileNameFilter3 = r.Source.S3Input.FileNameFilter.ValueString()
		} else {
			fileNameFilter3 = nil
		}
		newFileBehavior3 := shared.SourceS3InputNewFileBehavior(r.Source.S3Input.NewFileBehavior.ValueString())
		lowWatermark3 := new(customTypes.Date)
		if !r.Source.S3Input.LowWatermark.IsUnknown() && !r.Source.S3Input.LowWatermark.IsNull() {
			lowWatermark3 = customTypes.MustNewDateFromString(r.Source.S3Input.LowWatermark.ValueString())
		} else {
			lowWatermark3 = nil
		}
		var paths3 []string = nil
		for _, pathsItem3 := range r.Source.S3Input.Paths {
			paths3 = append(paths3, pathsItem3.ValueString())
		}
		filesCanChange := new(bool)
		if !r.Source.S3Input.FilesCanChange.IsUnknown() && !r.Source.S3Input.FilesCanChange.IsNull() {
			*filesCanChange = r.Source.S3Input.FilesCanChange.ValueBool()
		} else {
			filesCanChange = nil
		}
		triggeredByEvent := new(bool)
		if !r.Source.S3Input.TriggeredByEvent.IsUnknown() && !r.Source.S3Input.TriggeredByEvent.IsNull() {
			*triggeredByEvent = r.Source.S3Input.TriggeredByEvent.ValueBool()
		} else {
			triggeredByEvent = nil
		}
		sourceS3Input = &shared.SourceS3Input{
			Type:             typeVar56,
			ConnectionID:     connectionId56,
			LatencyThreshold: latencyThreshold56,
			FileNameFilter:   fileNameFilter3,
			NewFileBehavior:  newFileBehavior3,
			LowWatermark:     lowWatermark3,
			Paths:            paths3,
			FilesCanChange:   filesCanChange,
			TriggeredByEvent: triggeredByEvent,
		}
	}
	if sourceS3Input != nil {
		source = shared.SourceTypes{
			SourceS3Input: sourceS3Input,
		}
	}
	var sourceSalesforceMarketingCloud *shared.SourceSalesforceMarketingCloud
	if r.Source.SalesforceMarketingCloud != nil {
		typeVar57 := shared.SourceSalesforceMarketingCloudType(r.Source.SalesforceMarketingCloud.Type.ValueString())
		connectionId57 := r.Source.SalesforceMarketingCloud.ConnectionID.ValueString()
		latencyThreshold57 := new(int64)
		if !r.Source.SalesforceMarketingCloud.LatencyThreshold.IsUnknown() && !r.Source.SalesforceMarketingCloud.LatencyThreshold.IsNull() {
			*latencyThreshold57 = r.Source.SalesforceMarketingCloud.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold57 = nil
		}
		entity40 := r.Source.SalesforceMarketingCloud.Entity.ValueString()
		sourceSalesforceMarketingCloud = &shared.SourceSalesforceMarketingCloud{
			Type:             typeVar57,
			ConnectionID:     connectionId57,
			LatencyThreshold: latencyThreshold57,
			Entity:           entity40,
		}
	}
	if sourceSalesforceMarketingCloud != nil {
		source = shared.SourceTypes{
			SourceSalesforceMarketingCloud: sourceSalesforceMarketingCloud,
		}
	}
	var sourceSapConcur *shared.SourceSapConcur
	if r.Source.SapConcur != nil {
		typeVar58 := shared.SourceSapConcurType(r.Source.SapConcur.Type.ValueString())
		connectionId58 := r.Source.SapConcur.ConnectionID.ValueString()
		latencyThreshold58 := new(int64)
		if !r.Source.SapConcur.LatencyThreshold.IsUnknown() && !r.Source.SapConcur.LatencyThreshold.IsNull() {
			*latencyThreshold58 = r.Source.SapConcur.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold58 = nil
		}
		entity41 := r.Source.SapConcur.Entity.ValueString()
		sourceSapConcur = &shared.SourceSapConcur{
			Type:             typeVar58,
			ConnectionID:     connectionId58,
			LatencyThreshold: latencyThreshold58,
			Entity:           entity41,
		}
	}
	if sourceSapConcur != nil {
		source = shared.SourceTypes{
			SourceSapConcur: sourceSapConcur,
		}
	}
	var sourceSapHana *shared.SourceSapHana
	if r.Source.SapHana != nil {
		typeVar59 := shared.SourceSapHanaType(r.Source.SapHana.Type.ValueString())
		connectionId59 := r.Source.SapHana.ConnectionID.ValueString()
		latencyThreshold59 := new(int64)
		if !r.Source.SapHana.LatencyThreshold.IsUnknown() && !r.Source.SapHana.LatencyThreshold.IsNull() {
			*latencyThreshold59 = r.Source.SapHana.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold59 = nil
		}
		table13 := new(string)
		if !r.Source.SapHana.Table.IsUnknown() && !r.Source.SapHana.Table.IsNull() {
			*table13 = r.Source.SapHana.Table.ValueString()
		} else {
			table13 = nil
		}
		tableNameFilter13 := new(string)
		if !r.Source.SapHana.TableNameFilter.IsUnknown() && !r.Source.SapHana.TableNameFilter.IsNull() {
			*tableNameFilter13 = r.Source.SapHana.TableNameFilter.ValueString()
		} else {
			tableNameFilter13 = nil
		}
		lastUpdatedColumn12 := new(string)
		if !r.Source.SapHana.LastUpdatedColumn.IsUnknown() && !r.Source.SapHana.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn12 = r.Source.SapHana.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn12 = nil
		}
		var primaryKeyColumns12 []string = nil
		for _, primaryKeyColumnsItem12 := range r.Source.SapHana.PrimaryKeyColumns {
			primaryKeyColumns12 = append(primaryKeyColumns12, primaryKeyColumnsItem12.ValueString())
		}
		schema9 := new(string)
		if !r.Source.SapHana.Schema.IsUnknown() && !r.Source.SapHana.Schema.IsNull() {
			*schema9 = r.Source.SapHana.Schema.ValueString()
		} else {
			schema9 = nil
		}
		sourceSapHana = &shared.SourceSapHana{
			Type:              typeVar59,
			ConnectionID:      connectionId59,
			LatencyThreshold:  latencyThreshold59,
			Table:             table13,
			TableNameFilter:   tableNameFilter13,
			LastUpdatedColumn: lastUpdatedColumn12,
			PrimaryKeyColumns: primaryKeyColumns12,
			Schema:            schema9,
		}
	}
	if sourceSapHana != nil {
		source = shared.SourceTypes{
			SourceSapHana: sourceSapHana,
		}
	}
	var sourceSapHanaSharded *shared.SourceSapHanaSharded
	if r.Source.SapHanaSharded != nil {
		typeVar60 := shared.SourceSapHanaShardedType(r.Source.SapHanaSharded.Type.ValueString())
		connectionId60 := r.Source.SapHanaSharded.ConnectionID.ValueString()
		latencyThreshold60 := new(int64)
		if !r.Source.SapHanaSharded.LatencyThreshold.IsUnknown() && !r.Source.SapHanaSharded.LatencyThreshold.IsNull() {
			*latencyThreshold60 = r.Source.SapHanaSharded.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold60 = nil
		}
		table14 := new(string)
		if !r.Source.SapHanaSharded.Table.IsUnknown() && !r.Source.SapHanaSharded.Table.IsNull() {
			*table14 = r.Source.SapHanaSharded.Table.ValueString()
		} else {
			table14 = nil
		}
		tableNameFilter14 := new(string)
		if !r.Source.SapHanaSharded.TableNameFilter.IsUnknown() && !r.Source.SapHanaSharded.TableNameFilter.IsNull() {
			*tableNameFilter14 = r.Source.SapHanaSharded.TableNameFilter.ValueString()
		} else {
			tableNameFilter14 = nil
		}
		lastUpdatedColumn13 := new(string)
		if !r.Source.SapHanaSharded.LastUpdatedColumn.IsUnknown() && !r.Source.SapHanaSharded.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn13 = r.Source.SapHanaSharded.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn13 = nil
		}
		var primaryKeyColumns13 []string = nil
		for _, primaryKeyColumnsItem13 := range r.Source.SapHanaSharded.PrimaryKeyColumns {
			primaryKeyColumns13 = append(primaryKeyColumns13, primaryKeyColumnsItem13.ValueString())
		}
		schema10 := new(string)
		if !r.Source.SapHanaSharded.Schema.IsUnknown() && !r.Source.SapHanaSharded.Schema.IsNull() {
			*schema10 = r.Source.SapHanaSharded.Schema.ValueString()
		} else {
			schema10 = nil
		}
		sourceSapHanaSharded = &shared.SourceSapHanaSharded{
			Type:              typeVar60,
			ConnectionID:      connectionId60,
			LatencyThreshold:  latencyThreshold60,
			Table:             table14,
			TableNameFilter:   tableNameFilter14,
			LastUpdatedColumn: lastUpdatedColumn13,
			PrimaryKeyColumns: primaryKeyColumns13,
			Schema:            schema10,
		}
	}
	if sourceSapHanaSharded != nil {
		source = shared.SourceTypes{
			SourceSapHanaSharded: sourceSapHanaSharded,
		}
	}
	var sourceSeismic *shared.SourceSeismic
	if r.Source.Seismic != nil {
		typeVar61 := shared.SourceSeismicType(r.Source.Seismic.Type.ValueString())
		connectionId61 := r.Source.Seismic.ConnectionID.ValueString()
		latencyThreshold61 := new(int64)
		if !r.Source.Seismic.LatencyThreshold.IsUnknown() && !r.Source.Seismic.LatencyThreshold.IsNull() {
			*latencyThreshold61 = r.Source.Seismic.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold61 = nil
		}
		entity42 := r.Source.Seismic.Entity.ValueString()
		sourceSeismic = &shared.SourceSeismic{
			Type:             typeVar61,
			ConnectionID:     connectionId61,
			LatencyThreshold: latencyThreshold61,
			Entity:           entity42,
		}
	}
	if sourceSeismic != nil {
		source = shared.SourceTypes{
			SourceSeismic: sourceSeismic,
		}
	}
	var sourceServiceNow *shared.SourceServiceNow
	if r.Source.ServiceNow != nil {
		typeVar62 := shared.SourceServiceNowType(r.Source.ServiceNow.Type.ValueString())
		connectionId62 := r.Source.ServiceNow.ConnectionID.ValueString()
		latencyThreshold62 := new(int64)
		if !r.Source.ServiceNow.LatencyThreshold.IsUnknown() && !r.Source.ServiceNow.LatencyThreshold.IsNull() {
			*latencyThreshold62 = r.Source.ServiceNow.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold62 = nil
		}
		entity43 := r.Source.ServiceNow.Entity.ValueString()
		sourceServiceNow = &shared.SourceServiceNow{
			Type:             typeVar62,
			ConnectionID:     connectionId62,
			LatencyThreshold: latencyThreshold62,
			Entity:           entity43,
		}
	}
	if sourceServiceNow != nil {
		source = shared.SourceTypes{
			SourceServiceNow: sourceServiceNow,
		}
	}
	var sourceShopify *shared.SourceShopify
	if r.Source.Shopify != nil {
		typeVar63 := shared.SourceShopifyType(r.Source.Shopify.Type.ValueString())
		connectionId63 := r.Source.Shopify.ConnectionID.ValueString()
		latencyThreshold63 := new(int64)
		if !r.Source.Shopify.LatencyThreshold.IsUnknown() && !r.Source.Shopify.LatencyThreshold.IsNull() {
			*latencyThreshold63 = r.Source.Shopify.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold63 = nil
		}
		entity44 := r.Source.Shopify.Entity.ValueString()
		sourceShopify = &shared.SourceShopify{
			Type:             typeVar63,
			ConnectionID:     connectionId63,
			LatencyThreshold: latencyThreshold63,
			Entity:           entity44,
		}
	}
	if sourceShopify != nil {
		source = shared.SourceTypes{
			SourceShopify: sourceShopify,
		}
	}
	var sourceSkyward *shared.SourceSkyward
	if r.Source.Skyward != nil {
		typeVar64 := shared.SourceSkywardType(r.Source.Skyward.Type.ValueString())
		connectionId64 := r.Source.Skyward.ConnectionID.ValueString()
		latencyThreshold64 := new(int64)
		if !r.Source.Skyward.LatencyThreshold.IsUnknown() && !r.Source.Skyward.LatencyThreshold.IsNull() {
			*latencyThreshold64 = r.Source.Skyward.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold64 = nil
		}
		entity45 := r.Source.Skyward.Entity.ValueString()
		sourceSkyward = &shared.SourceSkyward{
			Type:             typeVar64,
			ConnectionID:     connectionId64,
			LatencyThreshold: latencyThreshold64,
			Entity:           entity45,
		}
	}
	if sourceSkyward != nil {
		source = shared.SourceTypes{
			SourceSkyward: sourceSkyward,
		}
	}
	var sourceSalesforce *shared.SourceSalesforce
	if r.Source.Salesforce != nil {
		typeVar65 := shared.SourceSalesforceType(r.Source.Salesforce.Type.ValueString())
		connectionId65 := r.Source.Salesforce.ConnectionID.ValueString()
		latencyThreshold65 := new(int64)
		if !r.Source.Salesforce.LatencyThreshold.IsUnknown() && !r.Source.Salesforce.LatencyThreshold.IsNull() {
			*latencyThreshold65 = r.Source.Salesforce.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold65 = nil
		}
		entity46 := r.Source.Salesforce.Entity.ValueString()
		sourceSalesforce = &shared.SourceSalesforce{
			Type:             typeVar65,
			ConnectionID:     connectionId65,
			LatencyThreshold: latencyThreshold65,
			Entity:           entity46,
		}
	}
	if sourceSalesforce != nil {
		source = shared.SourceTypes{
			SourceSalesforce: sourceSalesforce,
		}
	}
	var sourceSftp *shared.SourceSftp
	if r.Source.Sftp != nil {
		typeVar66 := shared.SourceSftpType(r.Source.Sftp.Type.ValueString())
		connectionId66 := r.Source.Sftp.ConnectionID.ValueString()
		latencyThreshold66 := new(int64)
		if !r.Source.Sftp.LatencyThreshold.IsUnknown() && !r.Source.Sftp.LatencyThreshold.IsNull() {
			*latencyThreshold66 = r.Source.Sftp.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold66 = nil
		}
		fileNameFilter4 := new(string)
		if !r.Source.Sftp.FileNameFilter.IsUnknown() && !r.Source.Sftp.FileNameFilter.IsNull() {
			*fileNameFilter4 = r.Source.Sftp.FileNameFilter.ValueString()
		} else {
			fileNameFilter4 = nil
		}
		newFileBehavior4 := shared.SourceSftpNewFileBehavior(r.Source.Sftp.NewFileBehavior.ValueString())
		lowWatermark4 := new(customTypes.Date)
		if !r.Source.Sftp.LowWatermark.IsUnknown() && !r.Source.Sftp.LowWatermark.IsNull() {
			lowWatermark4 = customTypes.MustNewDateFromString(r.Source.Sftp.LowWatermark.ValueString())
		} else {
			lowWatermark4 = nil
		}
		var paths4 []string = nil
		for _, pathsItem4 := range r.Source.Sftp.Paths {
			paths4 = append(paths4, pathsItem4.ValueString())
		}
		globPattern2 := new(string)
		if !r.Source.Sftp.GlobPattern.IsUnknown() && !r.Source.Sftp.GlobPattern.IsNull() {
			*globPattern2 = r.Source.Sftp.GlobPattern.ValueString()
		} else {
			globPattern2 = nil
		}
		sourceSftp = &shared.SourceSftp{
			Type:             typeVar66,
			ConnectionID:     connectionId66,
			LatencyThreshold: latencyThreshold66,
			FileNameFilter:   fileNameFilter4,
			NewFileBehavior:  newFileBehavior4,
			LowWatermark:     lowWatermark4,
			Paths:            paths4,
			GlobPattern:      globPattern2,
		}
	}
	if sourceSftp != nil {
		source = shared.SourceTypes{
			SourceSftp: sourceSftp,
		}
	}
	var sourceSQLServer *shared.SourceSQLServer
	if r.Source.SQLServer != nil {
		typeVar67 := shared.SourceSQLServerType(r.Source.SQLServer.Type.ValueString())
		connectionId67 := r.Source.SQLServer.ConnectionID.ValueString()
		latencyThreshold67 := new(int64)
		if !r.Source.SQLServer.LatencyThreshold.IsUnknown() && !r.Source.SQLServer.LatencyThreshold.IsNull() {
			*latencyThreshold67 = r.Source.SQLServer.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold67 = nil
		}
		table15 := new(string)
		if !r.Source.SQLServer.Table.IsUnknown() && !r.Source.SQLServer.Table.IsNull() {
			*table15 = r.Source.SQLServer.Table.ValueString()
		} else {
			table15 = nil
		}
		tableNameFilter15 := new(string)
		if !r.Source.SQLServer.TableNameFilter.IsUnknown() && !r.Source.SQLServer.TableNameFilter.IsNull() {
			*tableNameFilter15 = r.Source.SQLServer.TableNameFilter.ValueString()
		} else {
			tableNameFilter15 = nil
		}
		lastUpdatedColumn14 := new(string)
		if !r.Source.SQLServer.LastUpdatedColumn.IsUnknown() && !r.Source.SQLServer.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn14 = r.Source.SQLServer.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn14 = nil
		}
		var primaryKeyColumns14 []string = nil
		for _, primaryKeyColumnsItem14 := range r.Source.SQLServer.PrimaryKeyColumns {
			primaryKeyColumns14 = append(primaryKeyColumns14, primaryKeyColumnsItem14.ValueString())
		}
		schema11 := new(string)
		if !r.Source.SQLServer.Schema.IsUnknown() && !r.Source.SQLServer.Schema.IsNull() {
			*schema11 = r.Source.SQLServer.Schema.ValueString()
		} else {
			schema11 = nil
		}
		sourceSQLServer = &shared.SourceSQLServer{
			Type:              typeVar67,
			ConnectionID:      connectionId67,
			LatencyThreshold:  latencyThreshold67,
			Table:             table15,
			TableNameFilter:   tableNameFilter15,
			LastUpdatedColumn: lastUpdatedColumn14,
			PrimaryKeyColumns: primaryKeyColumns14,
			Schema:            schema11,
		}
	}
	if sourceSQLServer != nil {
		source = shared.SourceTypes{
			SourceSQLServer: sourceSQLServer,
		}
	}
	var sourceSQLServerSharded *shared.SourceSQLServerSharded
	if r.Source.SQLServerSharded != nil {
		typeVar68 := shared.SourceSQLServerShardedType(r.Source.SQLServerSharded.Type.ValueString())
		connectionId68 := r.Source.SQLServerSharded.ConnectionID.ValueString()
		latencyThreshold68 := new(int64)
		if !r.Source.SQLServerSharded.LatencyThreshold.IsUnknown() && !r.Source.SQLServerSharded.LatencyThreshold.IsNull() {
			*latencyThreshold68 = r.Source.SQLServerSharded.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold68 = nil
		}
		table16 := new(string)
		if !r.Source.SQLServerSharded.Table.IsUnknown() && !r.Source.SQLServerSharded.Table.IsNull() {
			*table16 = r.Source.SQLServerSharded.Table.ValueString()
		} else {
			table16 = nil
		}
		tableNameFilter16 := new(string)
		if !r.Source.SQLServerSharded.TableNameFilter.IsUnknown() && !r.Source.SQLServerSharded.TableNameFilter.IsNull() {
			*tableNameFilter16 = r.Source.SQLServerSharded.TableNameFilter.ValueString()
		} else {
			tableNameFilter16 = nil
		}
		lastUpdatedColumn15 := new(string)
		if !r.Source.SQLServerSharded.LastUpdatedColumn.IsUnknown() && !r.Source.SQLServerSharded.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn15 = r.Source.SQLServerSharded.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn15 = nil
		}
		var primaryKeyColumns15 []string = nil
		for _, primaryKeyColumnsItem15 := range r.Source.SQLServerSharded.PrimaryKeyColumns {
			primaryKeyColumns15 = append(primaryKeyColumns15, primaryKeyColumnsItem15.ValueString())
		}
		schema12 := new(string)
		if !r.Source.SQLServerSharded.Schema.IsUnknown() && !r.Source.SQLServerSharded.Schema.IsNull() {
			*schema12 = r.Source.SQLServerSharded.Schema.ValueString()
		} else {
			schema12 = nil
		}
		sourceSQLServerSharded = &shared.SourceSQLServerSharded{
			Type:              typeVar68,
			ConnectionID:      connectionId68,
			LatencyThreshold:  latencyThreshold68,
			Table:             table16,
			TableNameFilter:   tableNameFilter16,
			LastUpdatedColumn: lastUpdatedColumn15,
			PrimaryKeyColumns: primaryKeyColumns15,
			Schema:            schema12,
		}
	}
	if sourceSQLServerSharded != nil {
		source = shared.SourceTypes{
			SourceSQLServerSharded: sourceSQLServerSharded,
		}
	}
	var sourceStreaming *shared.SourceStreaming
	if r.Source.Streaming != nil {
		typeVar69 := shared.SourceStreamingType(r.Source.Streaming.Type.ValueString())
		connectionId69 := r.Source.Streaming.ConnectionID.ValueString()
		latencyThreshold69 := new(int64)
		if !r.Source.Streaming.LatencyThreshold.IsUnknown() && !r.Source.Streaming.LatencyThreshold.IsNull() {
			*latencyThreshold69 = r.Source.Streaming.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold69 = nil
		}
		fileNameFilter5 := new(string)
		if !r.Source.Streaming.FileNameFilter.IsUnknown() && !r.Source.Streaming.FileNameFilter.IsNull() {
			*fileNameFilter5 = r.Source.Streaming.FileNameFilter.ValueString()
		} else {
			fileNameFilter5 = nil
		}
		newFileBehavior5 := shared.SourceStreamingNewFileBehavior(r.Source.Streaming.NewFileBehavior.ValueString())
		lowWatermark5 := new(customTypes.Date)
		if !r.Source.Streaming.LowWatermark.IsUnknown() && !r.Source.Streaming.LowWatermark.IsNull() {
			lowWatermark5 = customTypes.MustNewDateFromString(r.Source.Streaming.LowWatermark.ValueString())
		} else {
			lowWatermark5 = nil
		}
		var paths5 []string = nil
		for _, pathsItem5 := range r.Source.Streaming.Paths {
			paths5 = append(paths5, pathsItem5.ValueString())
		}
		sourceStreaming = &shared.SourceStreaming{
			Type:             typeVar69,
			ConnectionID:     connectionId69,
			LatencyThreshold: latencyThreshold69,
			FileNameFilter:   fileNameFilter5,
			NewFileBehavior:  newFileBehavior5,
			LowWatermark:     lowWatermark5,
			Paths:            paths5,
		}
	}
	if sourceStreaming != nil {
		source = shared.SourceTypes{
			SourceStreaming: sourceStreaming,
		}
	}
	var sourceSnowflake *shared.SourceSnowflake
	if r.Source.Snowflake != nil {
		typeVar70 := shared.SourceSnowflakeType(r.Source.Snowflake.Type.ValueString())
		connectionId70 := r.Source.Snowflake.ConnectionID.ValueString()
		latencyThreshold70 := new(int64)
		if !r.Source.Snowflake.LatencyThreshold.IsUnknown() && !r.Source.Snowflake.LatencyThreshold.IsNull() {
			*latencyThreshold70 = r.Source.Snowflake.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold70 = nil
		}
		table17 := new(string)
		if !r.Source.Snowflake.Table.IsUnknown() && !r.Source.Snowflake.Table.IsNull() {
			*table17 = r.Source.Snowflake.Table.ValueString()
		} else {
			table17 = nil
		}
		tableNameFilter17 := new(string)
		if !r.Source.Snowflake.TableNameFilter.IsUnknown() && !r.Source.Snowflake.TableNameFilter.IsNull() {
			*tableNameFilter17 = r.Source.Snowflake.TableNameFilter.ValueString()
		} else {
			tableNameFilter17 = nil
		}
		lastUpdatedColumn16 := new(string)
		if !r.Source.Snowflake.LastUpdatedColumn.IsUnknown() && !r.Source.Snowflake.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn16 = r.Source.Snowflake.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn16 = nil
		}
		var primaryKeyColumns16 []string = nil
		for _, primaryKeyColumnsItem16 := range r.Source.Snowflake.PrimaryKeyColumns {
			primaryKeyColumns16 = append(primaryKeyColumns16, primaryKeyColumnsItem16.ValueString())
		}
		schema13 := new(string)
		if !r.Source.Snowflake.Schema.IsUnknown() && !r.Source.Snowflake.Schema.IsNull() {
			*schema13 = r.Source.Snowflake.Schema.ValueString()
		} else {
			schema13 = nil
		}
		sourceSnowflake = &shared.SourceSnowflake{
			Type:              typeVar70,
			ConnectionID:      connectionId70,
			LatencyThreshold:  latencyThreshold70,
			Table:             table17,
			TableNameFilter:   tableNameFilter17,
			LastUpdatedColumn: lastUpdatedColumn16,
			PrimaryKeyColumns: primaryKeyColumns16,
			Schema:            schema13,
		}
	}
	if sourceSnowflake != nil {
		source = shared.SourceTypes{
			SourceSnowflake: sourceSnowflake,
		}
	}
	var sourceSnowflakeSharded *shared.SourceSnowflakeSharded
	if r.Source.SnowflakeSharded != nil {
		typeVar71 := shared.SourceSnowflakeShardedType(r.Source.SnowflakeSharded.Type.ValueString())
		connectionId71 := r.Source.SnowflakeSharded.ConnectionID.ValueString()
		latencyThreshold71 := new(int64)
		if !r.Source.SnowflakeSharded.LatencyThreshold.IsUnknown() && !r.Source.SnowflakeSharded.LatencyThreshold.IsNull() {
			*latencyThreshold71 = r.Source.SnowflakeSharded.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold71 = nil
		}
		table18 := new(string)
		if !r.Source.SnowflakeSharded.Table.IsUnknown() && !r.Source.SnowflakeSharded.Table.IsNull() {
			*table18 = r.Source.SnowflakeSharded.Table.ValueString()
		} else {
			table18 = nil
		}
		tableNameFilter18 := new(string)
		if !r.Source.SnowflakeSharded.TableNameFilter.IsUnknown() && !r.Source.SnowflakeSharded.TableNameFilter.IsNull() {
			*tableNameFilter18 = r.Source.SnowflakeSharded.TableNameFilter.ValueString()
		} else {
			tableNameFilter18 = nil
		}
		lastUpdatedColumn17 := new(string)
		if !r.Source.SnowflakeSharded.LastUpdatedColumn.IsUnknown() && !r.Source.SnowflakeSharded.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn17 = r.Source.SnowflakeSharded.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn17 = nil
		}
		var primaryKeyColumns17 []string = nil
		for _, primaryKeyColumnsItem17 := range r.Source.SnowflakeSharded.PrimaryKeyColumns {
			primaryKeyColumns17 = append(primaryKeyColumns17, primaryKeyColumnsItem17.ValueString())
		}
		schema14 := new(string)
		if !r.Source.SnowflakeSharded.Schema.IsUnknown() && !r.Source.SnowflakeSharded.Schema.IsNull() {
			*schema14 = r.Source.SnowflakeSharded.Schema.ValueString()
		} else {
			schema14 = nil
		}
		sourceSnowflakeSharded = &shared.SourceSnowflakeSharded{
			Type:              typeVar71,
			ConnectionID:      connectionId71,
			LatencyThreshold:  latencyThreshold71,
			Table:             table18,
			TableNameFilter:   tableNameFilter18,
			LastUpdatedColumn: lastUpdatedColumn17,
			PrimaryKeyColumns: primaryKeyColumns17,
			Schema:            schema14,
		}
	}
	if sourceSnowflakeSharded != nil {
		source = shared.SourceTypes{
			SourceSnowflakeSharded: sourceSnowflakeSharded,
		}
	}
	var sourceSquare *shared.SourceSquare
	if r.Source.Square != nil {
		typeVar72 := shared.SourceSquareType(r.Source.Square.Type.ValueString())
		connectionId72 := r.Source.Square.ConnectionID.ValueString()
		latencyThreshold72 := new(int64)
		if !r.Source.Square.LatencyThreshold.IsUnknown() && !r.Source.Square.LatencyThreshold.IsNull() {
			*latencyThreshold72 = r.Source.Square.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold72 = nil
		}
		entity47 := r.Source.Square.Entity.ValueString()
		sourceSquare = &shared.SourceSquare{
			Type:             typeVar72,
			ConnectionID:     connectionId72,
			LatencyThreshold: latencyThreshold72,
			Entity:           entity47,
		}
	}
	if sourceSquare != nil {
		source = shared.SourceTypes{
			SourceSquare: sourceSquare,
		}
	}
	var sourceSnapchatAds *shared.SourceSnapchatAds
	if r.Source.SnapchatAds != nil {
		typeVar73 := shared.SourceSnapchatAdsType(r.Source.SnapchatAds.Type.ValueString())
		connectionId73 := r.Source.SnapchatAds.ConnectionID.ValueString()
		latencyThreshold73 := new(int64)
		if !r.Source.SnapchatAds.LatencyThreshold.IsUnknown() && !r.Source.SnapchatAds.LatencyThreshold.IsNull() {
			*latencyThreshold73 = r.Source.SnapchatAds.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold73 = nil
		}
		entity48 := r.Source.SnapchatAds.Entity.ValueString()
		breakdown := new(string)
		if !r.Source.SnapchatAds.Breakdown.IsUnknown() && !r.Source.SnapchatAds.Breakdown.IsNull() {
			*breakdown = r.Source.SnapchatAds.Breakdown.ValueString()
		} else {
			breakdown = nil
		}
		var metrics4 []string = nil
		for _, metricsItem4 := range r.Source.SnapchatAds.Metrics {
			metrics4 = append(metrics4, metricsItem4.ValueString())
		}
		var additionalMetrics []string = nil
		for _, additionalMetricsItem := range r.Source.SnapchatAds.AdditionalMetrics {
			additionalMetrics = append(additionalMetrics, additionalMetricsItem.ValueString())
		}
		var reportDimension []string = nil
		for _, reportDimensionItem := range r.Source.SnapchatAds.ReportDimension {
			reportDimension = append(reportDimension, reportDimensionItem.ValueString())
		}
		sourceSnapchatAds = &shared.SourceSnapchatAds{
			Type:              typeVar73,
			ConnectionID:      connectionId73,
			LatencyThreshold:  latencyThreshold73,
			Entity:            entity48,
			Breakdown:         breakdown,
			Metrics:           metrics4,
			AdditionalMetrics: additionalMetrics,
			ReportDimension:   reportDimension,
		}
	}
	if sourceSnapchatAds != nil {
		source = shared.SourceTypes{
			SourceSnapchatAds: sourceSnapchatAds,
		}
	}
	var sourceStripe *shared.SourceStripe
	if r.Source.Stripe != nil {
		typeVar74 := shared.SourceStripeType(r.Source.Stripe.Type.ValueString())
		connectionId74 := r.Source.Stripe.ConnectionID.ValueString()
		latencyThreshold74 := new(int64)
		if !r.Source.Stripe.LatencyThreshold.IsUnknown() && !r.Source.Stripe.LatencyThreshold.IsNull() {
			*latencyThreshold74 = r.Source.Stripe.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold74 = nil
		}
		entity49 := r.Source.Stripe.Entity.ValueString()
		sourceStripe = &shared.SourceStripe{
			Type:             typeVar74,
			ConnectionID:     connectionId74,
			LatencyThreshold: latencyThreshold74,
			Entity:           entity49,
		}
	}
	if sourceStripe != nil {
		source = shared.SourceTypes{
			SourceStripe: sourceStripe,
		}
	}
	var sourceSumTotal *shared.SourceSumTotal
	if r.Source.Sumtotal != nil {
		typeVar75 := shared.SourceSumTotalType(r.Source.Sumtotal.Type.ValueString())
		connectionId75 := r.Source.Sumtotal.ConnectionID.ValueString()
		latencyThreshold75 := new(int64)
		if !r.Source.Sumtotal.LatencyThreshold.IsUnknown() && !r.Source.Sumtotal.LatencyThreshold.IsNull() {
			*latencyThreshold75 = r.Source.Sumtotal.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold75 = nil
		}
		entity50 := r.Source.Sumtotal.Entity.ValueString()
		sourceSumTotal = &shared.SourceSumTotal{
			Type:             typeVar75,
			ConnectionID:     connectionId75,
			LatencyThreshold: latencyThreshold75,
			Entity:           entity50,
		}
	}
	if sourceSumTotal != nil {
		source = shared.SourceTypes{
			SourceSumTotal: sourceSumTotal,
		}
	}
	var sourceTheTradeDesk *shared.SourceTheTradeDesk
	if r.Source.TheTradeDesk != nil {
		typeVar76 := shared.SourceTheTradeDeskType(r.Source.TheTradeDesk.Type.ValueString())
		connectionId76 := r.Source.TheTradeDesk.ConnectionID.ValueString()
		latencyThreshold76 := new(int64)
		if !r.Source.TheTradeDesk.LatencyThreshold.IsUnknown() && !r.Source.TheTradeDesk.LatencyThreshold.IsNull() {
			*latencyThreshold76 = r.Source.TheTradeDesk.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold76 = nil
		}
		entity51 := r.Source.TheTradeDesk.Entity.ValueString()
		sourceTheTradeDesk = &shared.SourceTheTradeDesk{
			Type:             typeVar76,
			ConnectionID:     connectionId76,
			LatencyThreshold: latencyThreshold76,
			Entity:           entity51,
		}
	}
	if sourceTheTradeDesk != nil {
		source = shared.SourceTypes{
			SourceTheTradeDesk: sourceTheTradeDesk,
		}
	}
	var sourceTikTokAds *shared.SourceTikTokAds
	if r.Source.TikTokAds != nil {
		typeVar77 := shared.SourceTikTokAdsType(r.Source.TikTokAds.Type.ValueString())
		connectionId77 := r.Source.TikTokAds.ConnectionID.ValueString()
		latencyThreshold77 := new(int64)
		if !r.Source.TikTokAds.LatencyThreshold.IsUnknown() && !r.Source.TikTokAds.LatencyThreshold.IsNull() {
			*latencyThreshold77 = r.Source.TikTokAds.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold77 = nil
		}
		entity52 := r.Source.TikTokAds.Entity.ValueString()
		dataLevel := new(string)
		if !r.Source.TikTokAds.DataLevel.IsUnknown() && !r.Source.TikTokAds.DataLevel.IsNull() {
			*dataLevel = r.Source.TikTokAds.DataLevel.ValueString()
		} else {
			dataLevel = nil
		}
		var dimensions2 []string = nil
		for _, dimensionsItem2 := range r.Source.TikTokAds.Dimensions {
			dimensions2 = append(dimensions2, dimensionsItem2.ValueString())
		}
		var metrics5 []string = nil
		for _, metricsItem5 := range r.Source.TikTokAds.Metrics {
			metrics5 = append(metrics5, metricsItem5.ValueString())
		}
		sourceTikTokAds = &shared.SourceTikTokAds{
			Type:             typeVar77,
			ConnectionID:     connectionId77,
			LatencyThreshold: latencyThreshold77,
			Entity:           entity52,
			DataLevel:        dataLevel,
			Dimensions:       dimensions2,
			Metrics:          metrics5,
		}
	}
	if sourceTikTokAds != nil {
		source = shared.SourceTypes{
			SourceTikTokAds: sourceTikTokAds,
		}
	}
	var sourceTwilio *shared.SourceTwilio
	if r.Source.Twilio != nil {
		typeVar78 := shared.SourceTwilioType(r.Source.Twilio.Type.ValueString())
		connectionId78 := r.Source.Twilio.ConnectionID.ValueString()
		latencyThreshold78 := new(int64)
		if !r.Source.Twilio.LatencyThreshold.IsUnknown() && !r.Source.Twilio.LatencyThreshold.IsNull() {
			*latencyThreshold78 = r.Source.Twilio.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold78 = nil
		}
		entity53 := r.Source.Twilio.Entity.ValueString()
		sourceTwilio = &shared.SourceTwilio{
			Type:             typeVar78,
			ConnectionID:     connectionId78,
			LatencyThreshold: latencyThreshold78,
			Entity:           entity53,
		}
	}
	if sourceTwilio != nil {
		source = shared.SourceTypes{
			SourceTwilio: sourceTwilio,
		}
	}
	var sourceTwitter *shared.SourceTwitter
	if r.Source.TwitterAds != nil {
		typeVar79 := shared.SourceTwitterType(r.Source.TwitterAds.Type.ValueString())
		connectionId79 := r.Source.TwitterAds.ConnectionID.ValueString()
		latencyThreshold79 := new(int64)
		if !r.Source.TwitterAds.LatencyThreshold.IsUnknown() && !r.Source.TwitterAds.LatencyThreshold.IsNull() {
			*latencyThreshold79 = r.Source.TwitterAds.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold79 = nil
		}
		entity54 := r.Source.TwitterAds.Entity.ValueString()
		sourceTwitter = &shared.SourceTwitter{
			Type:             typeVar79,
			ConnectionID:     connectionId79,
			LatencyThreshold: latencyThreshold79,
			Entity:           entity54,
		}
	}
	if sourceTwitter != nil {
		source = shared.SourceTypes{
			SourceTwitter: sourceTwitter,
		}
	}
	var sourceUserDefinedAPI *shared.SourceUserDefinedAPI
	if r.Source.UserDefinedAPI != nil {
		typeVar80 := shared.SourceUserDefinedAPIType(r.Source.UserDefinedAPI.Type.ValueString())
		connectionId80 := r.Source.UserDefinedAPI.ConnectionID.ValueString()
		latencyThreshold80 := new(int64)
		if !r.Source.UserDefinedAPI.LatencyThreshold.IsUnknown() && !r.Source.UserDefinedAPI.LatencyThreshold.IsNull() {
			*latencyThreshold80 = r.Source.UserDefinedAPI.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold80 = nil
		}
		entity55 := r.Source.UserDefinedAPI.Entity.ValueString()
		sourceUserDefinedAPI = &shared.SourceUserDefinedAPI{
			Type:             typeVar80,
			ConnectionID:     connectionId80,
			LatencyThreshold: latencyThreshold80,
			Entity:           entity55,
		}
	}
	if sourceUserDefinedAPI != nil {
		source = shared.SourceTypes{
			SourceUserDefinedAPI: sourceUserDefinedAPI,
		}
	}
	var sourceUserVoice *shared.SourceUserVoice
	if r.Source.Uservoice != nil {
		typeVar81 := shared.SourceUserVoiceType(r.Source.Uservoice.Type.ValueString())
		connectionId81 := r.Source.Uservoice.ConnectionID.ValueString()
		latencyThreshold81 := new(int64)
		if !r.Source.Uservoice.LatencyThreshold.IsUnknown() && !r.Source.Uservoice.LatencyThreshold.IsNull() {
			*latencyThreshold81 = r.Source.Uservoice.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold81 = nil
		}
		entity56 := r.Source.Uservoice.Entity.ValueString()
		sourceUserVoice = &shared.SourceUserVoice{
			Type:             typeVar81,
			ConnectionID:     connectionId81,
			LatencyThreshold: latencyThreshold81,
			Entity:           entity56,
		}
	}
	if sourceUserVoice != nil {
		source = shared.SourceTypes{
			SourceUserVoice: sourceUserVoice,
		}
	}
	var sourceVeeva *shared.SourceVeeva
	if r.Source.Veeva != nil {
		typeVar82 := shared.SourceVeevaType(r.Source.Veeva.Type.ValueString())
		connectionId82 := r.Source.Veeva.ConnectionID.ValueString()
		latencyThreshold82 := new(int64)
		if !r.Source.Veeva.LatencyThreshold.IsUnknown() && !r.Source.Veeva.LatencyThreshold.IsNull() {
			*latencyThreshold82 = r.Source.Veeva.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold82 = nil
		}
		entity57 := r.Source.Veeva.Entity.ValueString()
		sourceVeeva = &shared.SourceVeeva{
			Type:             typeVar82,
			ConnectionID:     connectionId82,
			LatencyThreshold: latencyThreshold82,
			Entity:           entity57,
		}
	}
	if sourceVeeva != nil {
		source = shared.SourceTypes{
			SourceVeeva: sourceVeeva,
		}
	}
	var sourceVerizonMediaDsp *shared.SourceVerizonMediaDsp
	if r.Source.VerizonMediaDsp != nil {
		typeVar83 := shared.SourceVerizonMediaDspType(r.Source.VerizonMediaDsp.Type.ValueString())
		connectionId83 := r.Source.VerizonMediaDsp.ConnectionID.ValueString()
		latencyThreshold83 := new(int64)
		if !r.Source.VerizonMediaDsp.LatencyThreshold.IsUnknown() && !r.Source.VerizonMediaDsp.LatencyThreshold.IsNull() {
			*latencyThreshold83 = r.Source.VerizonMediaDsp.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold83 = nil
		}
		entity58 := r.Source.VerizonMediaDsp.Entity.ValueString()
		var dimensions3 []string = nil
		for _, dimensionsItem3 := range r.Source.VerizonMediaDsp.Dimensions {
			dimensions3 = append(dimensions3, dimensionsItem3.ValueString())
		}
		var metrics6 []string = nil
		for _, metricsItem6 := range r.Source.VerizonMediaDsp.Metrics {
			metrics6 = append(metrics6, metricsItem6.ValueString())
		}
		sourceVerizonMediaDsp = &shared.SourceVerizonMediaDsp{
			Type:             typeVar83,
			ConnectionID:     connectionId83,
			LatencyThreshold: latencyThreshold83,
			Entity:           entity58,
			Dimensions:       dimensions3,
			Metrics:          metrics6,
		}
	}
	if sourceVerizonMediaDsp != nil {
		source = shared.SourceTypes{
			SourceVerizonMediaDsp: sourceVerizonMediaDsp,
		}
	}
	var sourceWorkdayReport *shared.SourceWorkdayReport
	if r.Source.WorkdayReport != nil {
		typeVar84 := shared.SourceWorkdayReportType(r.Source.WorkdayReport.Type.ValueString())
		connectionId84 := r.Source.WorkdayReport.ConnectionID.ValueString()
		latencyThreshold84 := new(int64)
		if !r.Source.WorkdayReport.LatencyThreshold.IsUnknown() && !r.Source.WorkdayReport.LatencyThreshold.IsNull() {
			*latencyThreshold84 = r.Source.WorkdayReport.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold84 = nil
		}
		entity59 := r.Source.WorkdayReport.Entity.ValueString()
		sourceWorkdayReport = &shared.SourceWorkdayReport{
			Type:             typeVar84,
			ConnectionID:     connectionId84,
			LatencyThreshold: latencyThreshold84,
			Entity:           entity59,
		}
	}
	if sourceWorkdayReport != nil {
		source = shared.SourceTypes{
			SourceWorkdayReport: sourceWorkdayReport,
		}
	}
	var sourceWorkfront *shared.SourceWorkfront
	if r.Source.Workfront != nil {
		typeVar85 := shared.SourceWorkfrontType(r.Source.Workfront.Type.ValueString())
		connectionId85 := r.Source.Workfront.ConnectionID.ValueString()
		latencyThreshold85 := new(int64)
		if !r.Source.Workfront.LatencyThreshold.IsUnknown() && !r.Source.Workfront.LatencyThreshold.IsNull() {
			*latencyThreshold85 = r.Source.Workfront.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold85 = nil
		}
		entity60 := r.Source.Workfront.Entity.ValueString()
		sourceWorkfront = &shared.SourceWorkfront{
			Type:             typeVar85,
			ConnectionID:     connectionId85,
			LatencyThreshold: latencyThreshold85,
			Entity:           entity60,
		}
	}
	if sourceWorkfront != nil {
		source = shared.SourceTypes{
			SourceWorkfront: sourceWorkfront,
		}
	}
	var sourceZendesk *shared.SourceZendesk
	if r.Source.Zendesk != nil {
		typeVar86 := shared.SourceZendeskType(r.Source.Zendesk.Type.ValueString())
		connectionId86 := r.Source.Zendesk.ConnectionID.ValueString()
		latencyThreshold86 := new(int64)
		if !r.Source.Zendesk.LatencyThreshold.IsUnknown() && !r.Source.Zendesk.LatencyThreshold.IsNull() {
			*latencyThreshold86 = r.Source.Zendesk.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold86 = nil
		}
		entity61 := r.Source.Zendesk.Entity.ValueString()
		sourceZendesk = &shared.SourceZendesk{
			Type:             typeVar86,
			ConnectionID:     connectionId86,
			LatencyThreshold: latencyThreshold86,
			Entity:           entity61,
		}
	}
	if sourceZendesk != nil {
		source = shared.SourceTypes{
			SourceZendesk: sourceZendesk,
		}
	}
	var sourceZoomPhone *shared.SourceZoomPhone
	if r.Source.ZoomPhone != nil {
		typeVar87 := shared.SourceZoomPhoneType(r.Source.ZoomPhone.Type.ValueString())
		connectionId87 := r.Source.ZoomPhone.ConnectionID.ValueString()
		latencyThreshold87 := new(int64)
		if !r.Source.ZoomPhone.LatencyThreshold.IsUnknown() && !r.Source.ZoomPhone.LatencyThreshold.IsNull() {
			*latencyThreshold87 = r.Source.ZoomPhone.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold87 = nil
		}
		entity62 := r.Source.ZoomPhone.Entity.ValueString()
		sourceZoomPhone = &shared.SourceZoomPhone{
			Type:             typeVar87,
			ConnectionID:     connectionId87,
			LatencyThreshold: latencyThreshold87,
			Entity:           entity62,
		}
	}
	if sourceZoomPhone != nil {
		source = shared.SourceTypes{
			SourceZoomPhone: sourceZoomPhone,
		}
	}
	var sourceZuora *shared.SourceZuora
	if r.Source.Zuora != nil {
		typeVar88 := shared.SourceZuoraType(r.Source.Zuora.Type.ValueString())
		connectionId88 := r.Source.Zuora.ConnectionID.ValueString()
		latencyThreshold88 := new(int64)
		if !r.Source.Zuora.LatencyThreshold.IsUnknown() && !r.Source.Zuora.LatencyThreshold.IsNull() {
			*latencyThreshold88 = r.Source.Zuora.LatencyThreshold.ValueInt64()
		} else {
			latencyThreshold88 = nil
		}
		entity63 := r.Source.Zuora.Entity.ValueString()
		sourceZuora = &shared.SourceZuora{
			Type:             typeVar88,
			ConnectionID:     connectionId88,
			LatencyThreshold: latencyThreshold88,
			Entity:           entity63,
		}
	}
	if sourceZuora != nil {
		source = shared.SourceTypes{
			SourceZuora: sourceZuora,
		}
	}
	var destination shared.DestinationTypes
	var destinationRedshift *shared.DestinationRedshift
	if r.Destination.Redshift != nil {
		typeVar89 := shared.DestinationRedshiftType(r.Destination.Redshift.Type.ValueString())
		connectionId89 := r.Destination.Redshift.ConnectionID.ValueString()
		waitForQualityCheck := new(bool)
		if !r.Destination.Redshift.WaitForQualityCheck.IsUnknown() && !r.Destination.Redshift.WaitForQualityCheck.IsNull() {
			*waitForQualityCheck = r.Destination.Redshift.WaitForQualityCheck.ValueBool()
		} else {
			waitForQualityCheck = nil
		}
		var primaryKey []string = nil
		for _, primaryKeyItem := range r.Destination.Redshift.PrimaryKey {
			primaryKey = append(primaryKey, primaryKeyItem.ValueString())
		}
		automaticSchemaChanges := new(bool)
		if !r.Destination.Redshift.AutomaticSchemaChanges.IsUnknown() && !r.Destination.Redshift.AutomaticSchemaChanges.IsNull() {
			*automaticSchemaChanges = r.Destination.Redshift.AutomaticSchemaChanges.ValueBool()
		} else {
			automaticSchemaChanges = nil
		}
		schema15 := new(string)
		if !r.Destination.Redshift.Schema.IsUnknown() && !r.Destination.Redshift.Schema.IsNull() {
			*schema15 = r.Destination.Redshift.Schema.ValueString()
		} else {
			schema15 = nil
		}
		table19 := r.Destination.Redshift.Table.ValueString()
		var sortColumns []string = nil
		for _, sortColumnsItem := range r.Destination.Redshift.SortColumns {
			sortColumns = append(sortColumns, sortColumnsItem.ValueString())
		}
		var distributionStyle *shared.DistributionStyle
		if r.Destination.Redshift.DistributionStyle != nil {
			one := new(shared.One)
			if !r.Destination.Redshift.DistributionStyle.One.IsUnknown() && !r.Destination.Redshift.DistributionStyle.One.IsNull() {
				*one = shared.One(r.Destination.Redshift.DistributionStyle.One.ValueString())
			} else {
				one = nil
			}
			if one != nil {
				distributionStyle = &shared.DistributionStyle{
					One: one,
				}
			}
			var distributionStyleKey *shared.DistributionStyleKey
			if r.Destination.Redshift.DistributionStyle.DistributionStyleKey != nil {
				typeVar90 := shared.DistributionStyleKeyType(r.Destination.Redshift.DistributionStyle.DistributionStyleKey.Type.ValueString())
				column := r.Destination.Redshift.DistributionStyle.DistributionStyleKey.Column.ValueString()
				distributionStyleKey = &shared.DistributionStyleKey{
					Type:   typeVar90,
					Column: column,
				}
			}
			if distributionStyleKey != nil {
				distributionStyle = &shared.DistributionStyle{
					DistributionStyleKey: distributionStyleKey,
				}
			}
		}
		truncateStrings := new(bool)
		if !r.Destination.Redshift.TruncateStrings.IsUnknown() && !r.Destination.Redshift.TruncateStrings.IsNull() {
			*truncateStrings = r.Destination.Redshift.TruncateStrings.ValueBool()
		} else {
			truncateStrings = nil
		}
		retainHistory := new(bool)
		if !r.Destination.Redshift.RetainHistory.IsUnknown() && !r.Destination.Redshift.RetainHistory.IsNull() {
			*retainHistory = r.Destination.Redshift.RetainHistory.ValueBool()
		} else {
			retainHistory = nil
		}
		compressColumns := new(bool)
		if !r.Destination.Redshift.CompressColumns.IsUnknown() && !r.Destination.Redshift.CompressColumns.IsNull() {
			*compressColumns = r.Destination.Redshift.CompressColumns.ValueBool()
		} else {
			compressColumns = nil
		}
		lastUpdatedColumn18 := new(string)
		if !r.Destination.Redshift.LastUpdatedColumn.IsUnknown() && !r.Destination.Redshift.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn18 = r.Destination.Redshift.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn18 = nil
		}
		destinationRedshift = &shared.DestinationRedshift{
			Type:                   typeVar89,
			ConnectionID:           connectionId89,
			WaitForQualityCheck:    waitForQualityCheck,
			PrimaryKey:             primaryKey,
			AutomaticSchemaChanges: automaticSchemaChanges,
			Schema:                 schema15,
			Table:                  table19,
			SortColumns:            sortColumns,
			DistributionStyle:      distributionStyle,
			TruncateStrings:        truncateStrings,
			RetainHistory:          retainHistory,
			CompressColumns:        compressColumns,
			LastUpdatedColumn:      lastUpdatedColumn18,
		}
	}
	if destinationRedshift != nil {
		destination = shared.DestinationTypes{
			DestinationRedshift: destinationRedshift,
		}
	}
	var destinationSnowflake *shared.DestinationSnowflake
	if r.Destination.Snowflake != nil {
		typeVar91 := shared.DestinationSnowflakeType(r.Destination.Snowflake.Type.ValueString())
		connectionId90 := r.Destination.Snowflake.ConnectionID.ValueString()
		waitForQualityCheck1 := new(bool)
		if !r.Destination.Snowflake.WaitForQualityCheck.IsUnknown() && !r.Destination.Snowflake.WaitForQualityCheck.IsNull() {
			*waitForQualityCheck1 = r.Destination.Snowflake.WaitForQualityCheck.ValueBool()
		} else {
			waitForQualityCheck1 = nil
		}
		var primaryKey1 []string = nil
		for _, primaryKeyItem1 := range r.Destination.Snowflake.PrimaryKey {
			primaryKey1 = append(primaryKey1, primaryKeyItem1.ValueString())
		}
		automaticSchemaChanges1 := new(bool)
		if !r.Destination.Snowflake.AutomaticSchemaChanges.IsUnknown() && !r.Destination.Snowflake.AutomaticSchemaChanges.IsNull() {
			*automaticSchemaChanges1 = r.Destination.Snowflake.AutomaticSchemaChanges.ValueBool()
		} else {
			automaticSchemaChanges1 = nil
		}
		schema16 := new(string)
		if !r.Destination.Snowflake.Schema.IsUnknown() && !r.Destination.Snowflake.Schema.IsNull() {
			*schema16 = r.Destination.Snowflake.Schema.ValueString()
		} else {
			schema16 = nil
		}
		table20 := r.Destination.Snowflake.Table.ValueString()
		retainHistory1 := new(bool)
		if !r.Destination.Snowflake.RetainHistory.IsUnknown() && !r.Destination.Snowflake.RetainHistory.IsNull() {
			*retainHistory1 = r.Destination.Snowflake.RetainHistory.ValueBool()
		} else {
			retainHistory1 = nil
		}
		var clusteringKeys []string = nil
		for _, clusteringKeysItem := range r.Destination.Snowflake.ClusteringKeys {
			clusteringKeys = append(clusteringKeys, clusteringKeysItem.ValueString())
		}
		lastUpdatedColumn19 := new(string)
		if !r.Destination.Snowflake.LastUpdatedColumn.IsUnknown() && !r.Destination.Snowflake.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn19 = r.Destination.Snowflake.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn19 = nil
		}
		destinationSnowflake = &shared.DestinationSnowflake{
			Type:                   typeVar91,
			ConnectionID:           connectionId90,
			WaitForQualityCheck:    waitForQualityCheck1,
			PrimaryKey:             primaryKey1,
			AutomaticSchemaChanges: automaticSchemaChanges1,
			Schema:                 schema16,
			Table:                  table20,
			RetainHistory:          retainHistory1,
			ClusteringKeys:         clusteringKeys,
			LastUpdatedColumn:      lastUpdatedColumn19,
		}
	}
	if destinationSnowflake != nil {
		destination = shared.DestinationTypes{
			DestinationSnowflake: destinationSnowflake,
		}
	}
	var destinationDeltaLake *shared.DestinationDeltaLake
	if r.Destination.DeltaLake != nil {
		typeVar92 := shared.DestinationDeltaLakeType(r.Destination.DeltaLake.Type.ValueString())
		connectionId91 := r.Destination.DeltaLake.ConnectionID.ValueString()
		waitForQualityCheck2 := new(bool)
		if !r.Destination.DeltaLake.WaitForQualityCheck.IsUnknown() && !r.Destination.DeltaLake.WaitForQualityCheck.IsNull() {
			*waitForQualityCheck2 = r.Destination.DeltaLake.WaitForQualityCheck.ValueBool()
		} else {
			waitForQualityCheck2 = nil
		}
		var primaryKey2 []string = nil
		for _, primaryKeyItem2 := range r.Destination.DeltaLake.PrimaryKey {
			primaryKey2 = append(primaryKey2, primaryKeyItem2.ValueString())
		}
		automaticSchemaChanges2 := new(bool)
		if !r.Destination.DeltaLake.AutomaticSchemaChanges.IsUnknown() && !r.Destination.DeltaLake.AutomaticSchemaChanges.IsNull() {
			*automaticSchemaChanges2 = r.Destination.DeltaLake.AutomaticSchemaChanges.ValueBool()
		} else {
			automaticSchemaChanges2 = nil
		}
		schema17 := r.Destination.DeltaLake.Schema.ValueString()
		table21 := r.Destination.DeltaLake.Table.ValueString()
		lastUpdatedColumn20 := new(string)
		if !r.Destination.DeltaLake.LastUpdatedColumn.IsUnknown() && !r.Destination.DeltaLake.LastUpdatedColumn.IsNull() {
			*lastUpdatedColumn20 = r.Destination.DeltaLake.LastUpdatedColumn.ValueString()
		} else {
			lastUpdatedColumn20 = nil
		}
		retainHistory2 := new(bool)
		if !r.Destination.DeltaLake.RetainHistory.IsUnknown() && !r.Destination.DeltaLake.RetainHistory.IsNull() {
			*retainHistory2 = r.Destination.DeltaLake.RetainHistory.ValueBool()
		} else {
			retainHistory2 = nil
		}
		pre10Dot2RuntimeSupport := new(bool)
		if !r.Destination.DeltaLake.Pre10Dot2RuntimeSupport.IsUnknown() && !r.Destination.DeltaLake.Pre10Dot2RuntimeSupport.IsNull() {
			*pre10Dot2RuntimeSupport = r.Destination.DeltaLake.Pre10Dot2RuntimeSupport.ValueBool()
		} else {
			pre10Dot2RuntimeSupport = nil
		}
		destinationDeltaLake = &shared.DestinationDeltaLake{
			Type:                    typeVar92,
			ConnectionID:            connectionId91,
			WaitForQualityCheck:     waitForQualityCheck2,
			PrimaryKey:              primaryKey2,
			AutomaticSchemaChanges:  automaticSchemaChanges2,
			Schema:                  schema17,
			Table:                   table21,
			LastUpdatedColumn:       lastUpdatedColumn20,
			RetainHistory:           retainHistory2,
			Pre10Dot2RuntimeSupport: pre10Dot2RuntimeSupport,
		}
	}
	if destinationDeltaLake != nil {
		destination = shared.DestinationTypes{
			DestinationDeltaLake: destinationDeltaLake,
		}
	}
	var destinationS3DataLake *shared.DestinationS3DataLake
	if r.Destination.S3DataLake != nil {
		typeVar93 := shared.DestinationS3DataLakeType(r.Destination.S3DataLake.Type.ValueString())
		connectionId92 := r.Destination.S3DataLake.ConnectionID.ValueString()
		waitForQualityCheck3 := new(bool)
		if !r.Destination.S3DataLake.WaitForQualityCheck.IsUnknown() && !r.Destination.S3DataLake.WaitForQualityCheck.IsNull() {
			*waitForQualityCheck3 = r.Destination.S3DataLake.WaitForQualityCheck.ValueBool()
		} else {
			waitForQualityCheck3 = nil
		}
		var primaryKey3 []string = nil
		for _, primaryKeyItem3 := range r.Destination.S3DataLake.PrimaryKey {
			primaryKey3 = append(primaryKey3, primaryKeyItem3.ValueString())
		}
		automaticSchemaChanges3 := new(bool)
		if !r.Destination.S3DataLake.AutomaticSchemaChanges.IsUnknown() && !r.Destination.S3DataLake.AutomaticSchemaChanges.IsNull() {
			*automaticSchemaChanges3 = r.Destination.S3DataLake.AutomaticSchemaChanges.ValueBool()
		} else {
			automaticSchemaChanges3 = nil
		}
		pathPrefix := r.Destination.S3DataLake.PathPrefix.ValueString()
		outputFormat := new(shared.OutputFormat)
		if !r.Destination.S3DataLake.OutputFormat.IsUnknown() && !r.Destination.S3DataLake.OutputFormat.IsNull() {
			*outputFormat = shared.OutputFormat(r.Destination.S3DataLake.OutputFormat.ValueString())
		} else {
			outputFormat = nil
		}
		generateSnapshots := new(bool)
		if !r.Destination.S3DataLake.GenerateSnapshots.IsUnknown() && !r.Destination.S3DataLake.GenerateSnapshots.IsNull() {
			*generateSnapshots = r.Destination.S3DataLake.GenerateSnapshots.ValueBool()
		} else {
			generateSnapshots = nil
		}
		destinationS3DataLake = &shared.DestinationS3DataLake{
			Type:                   typeVar93,
			ConnectionID:           connectionId92,
			WaitForQualityCheck:    waitForQualityCheck3,
			PrimaryKey:             primaryKey3,
			AutomaticSchemaChanges: automaticSchemaChanges3,
			PathPrefix:             pathPrefix,
			OutputFormat:           outputFormat,
			GenerateSnapshots:      generateSnapshots,
		}
	}
	if destinationS3DataLake != nil {
		destination = shared.DestinationTypes{
			DestinationS3DataLake: destinationS3DataLake,
		}
	}
	var destinationIceberg *shared.DestinationIceberg
	if r.Destination.Iceberg != nil {
		typeVar94 := shared.DestinationIcebergType(r.Destination.Iceberg.Type.ValueString())
		connectionId93 := r.Destination.Iceberg.ConnectionID.ValueString()
		waitForQualityCheck4 := new(bool)
		if !r.Destination.Iceberg.WaitForQualityCheck.IsUnknown() && !r.Destination.Iceberg.WaitForQualityCheck.IsNull() {
			*waitForQualityCheck4 = r.Destination.Iceberg.WaitForQualityCheck.ValueBool()
		} else {
			waitForQualityCheck4 = nil
		}
		var primaryKey4 []string = nil
		for _, primaryKeyItem4 := range r.Destination.Iceberg.PrimaryKey {
			primaryKey4 = append(primaryKey4, primaryKeyItem4.ValueString())
		}
		automaticSchemaChanges4 := new(bool)
		if !r.Destination.Iceberg.AutomaticSchemaChanges.IsUnknown() && !r.Destination.Iceberg.AutomaticSchemaChanges.IsNull() {
			*automaticSchemaChanges4 = r.Destination.Iceberg.AutomaticSchemaChanges.ValueBool()
		} else {
			automaticSchemaChanges4 = nil
		}
		schema18 := new(string)
		if !r.Destination.Iceberg.Schema.IsUnknown() && !r.Destination.Iceberg.Schema.IsNull() {
			*schema18 = r.Destination.Iceberg.Schema.ValueString()
		} else {
			schema18 = nil
		}
		table22 := r.Destination.Iceberg.Table.ValueString()
		destinationIceberg = &shared.DestinationIceberg{
			Type:                   typeVar94,
			ConnectionID:           connectionId93,
			WaitForQualityCheck:    waitForQualityCheck4,
			PrimaryKey:             primaryKey4,
			AutomaticSchemaChanges: automaticSchemaChanges4,
			Schema:                 schema18,
			Table:                  table22,
		}
	}
	if destinationIceberg != nil {
		destination = shared.DestinationTypes{
			DestinationIceberg: destinationIceberg,
		}
	}
	var script *shared.ScriptOrLegacyScriptInput
	if r.Script != nil {
		var scriptInput *shared.ScriptInput
		if r.Script.Script != nil {
			var transforms []shared.TransformTypes = nil
			for _, transformsItem := range r.Script.Script.Transforms {
				if transformsItem.AddFilePath != nil {
					typeVar95 := shared.TransformAddFilePathType(transformsItem.AddFilePath.Type.ValueString())
					transformAddFilePath := shared.TransformAddFilePath{
						Type: typeVar95,
					}
					transforms = append(transforms, shared.TransformTypes{
						TransformAddFilePath: &transformAddFilePath,
					})
				}
				if transformsItem.FlattenJSONObject != nil {
					typeVar96 := shared.TransformExtractJSONFieldsType(transformsItem.FlattenJSONObject.Type.ValueString())
					column1 := transformsItem.FlattenJSONObject.Column.ValueString()
					var keys []shared.Keys = nil
					for _, keysItem := range transformsItem.FlattenJSONObject.Keys {
						name1 := keysItem.Name.ValueString()
						var type1 shared.Type
						type11 := new(shared.Type1)
						if !keysItem.Type.One.IsUnknown() && !keysItem.Type.One.IsNull() {
							*type11 = shared.Type1(keysItem.Type.One.ValueString())
						} else {
							type11 = nil
						}
						if type11 != nil {
							type1 = shared.Type{
								Type1: type11,
							}
						}
						var typeDecimal *shared.TypeDecimal
						if keysItem.Type.TypeDecimal != nil {
							typeVar97 := shared.TypeDecimalType(keysItem.Type.TypeDecimal.Type.ValueString())
							precision := keysItem.Type.TypeDecimal.Precision.ValueInt64()
							scale := keysItem.Type.TypeDecimal.Scale.ValueInt64()
							typeDecimal = &shared.TypeDecimal{
								Type:      typeVar97,
								Precision: precision,
								Scale:     scale,
							}
						}
						if typeDecimal != nil {
							type1 = shared.Type{
								TypeDecimal: typeDecimal,
							}
						}
						var typeStringWithMaxLength *shared.TypeStringWithMaxLength
						if keysItem.Type.TypeStringWithMaxLength != nil {
							typeVar98 := shared.TypeStringWithMaxLengthType(keysItem.Type.TypeStringWithMaxLength.Type.ValueString())
							length := keysItem.Type.TypeStringWithMaxLength.Length.ValueInt64()
							typeStringWithMaxLength = &shared.TypeStringWithMaxLength{
								Type:   typeVar98,
								Length: length,
							}
						}
						if typeStringWithMaxLength != nil {
							type1 = shared.Type{
								TypeStringWithMaxLength: typeStringWithMaxLength,
							}
						}
						keys = append(keys, shared.Keys{
							Name: name1,
							Type: type1,
						})
					}
					discoverNewKeys := transformsItem.FlattenJSONObject.DiscoverNewKeys.ValueBool()
					prefix := new(string)
					if !transformsItem.FlattenJSONObject.Prefix.IsUnknown() && !transformsItem.FlattenJSONObject.Prefix.IsNull() {
						*prefix = transformsItem.FlattenJSONObject.Prefix.ValueString()
					} else {
						prefix = nil
					}
					transformExtractJSONFields := shared.TransformExtractJSONFields{
						Type:            typeVar96,
						Column:          column1,
						Keys:            keys,
						DiscoverNewKeys: discoverNewKeys,
						Prefix:          prefix,
					}
					transforms = append(transforms, shared.TransformTypes{
						TransformExtractJSONFields: &transformExtractJSONFields,
					})
				}
				if transformsItem.ParquetToRows != nil {
					typeVar99 := shared.TransformParquetToRowsType(transformsItem.ParquetToRows.Type.ValueString())
					transformParquetToRows := shared.TransformParquetToRows{
						Type: typeVar99,
					}
					transforms = append(transforms, shared.TransformTypes{
						TransformParquetToRows: &transformParquetToRows,
					})
				}
				if transformsItem.ParseByRegex != nil {
					typeVar100 := shared.TransformParseByRegexType(transformsItem.ParseByRegex.Type.ValueString())
					regex := transformsItem.ParseByRegex.Regex.ValueString()
					column2 := transformsItem.ParseByRegex.Column.ValueString()
					transformParseByRegex := shared.TransformParseByRegex{
						Type:   typeVar100,
						Regex:  regex,
						Column: column2,
					}
					transforms = append(transforms, shared.TransformTypes{
						TransformParseByRegex: &transformParseByRegex,
					})
				}
				if transformsItem.RenameColumns != nil {
					typeVar101 := shared.TransformRenameColumnsType(transformsItem.RenameColumns.Type.ValueString())
					var columns1 []shared.Columns = nil
					for _, columnsItem1 := range transformsItem.RenameColumns.Columns {
						column3 := columnsItem1.Column.ValueString()
						name2 := columnsItem1.Name.ValueString()
						columns1 = append(columns1, shared.Columns{
							Column: column3,
							Name:   name2,
						})
					}
					transformRenameColumns := shared.TransformRenameColumns{
						Type:    typeVar101,
						Columns: columns1,
					}
					transforms = append(transforms, shared.TransformTypes{
						TransformRenameColumns: &transformRenameColumns,
					})
				}
			}
			inferredColumnTypes := make(map[string]shared.Type)
			for inferredColumnTypesKey, inferredColumnTypesValue := range r.Script.Script.InferredColumnTypes {
				var inferredColumnTypesInst shared.Type
				type12 := new(shared.Type1)
				if !inferredColumnTypesValue.One.IsUnknown() && !inferredColumnTypesValue.One.IsNull() {
					*type12 = shared.Type1(inferredColumnTypesValue.One.ValueString())
				} else {
					type12 = nil
				}
				if type12 != nil {
					inferredColumnTypesInst = shared.Type{
						Type1: type12,
					}
				}
				var typeDecimal1 *shared.TypeDecimal
				if inferredColumnTypesValue.TypeDecimal != nil {
					typeVar102 := shared.TypeDecimalType(inferredColumnTypesValue.TypeDecimal.Type.ValueString())
					precision1 := inferredColumnTypesValue.TypeDecimal.Precision.ValueInt64()
					scale1 := inferredColumnTypesValue.TypeDecimal.Scale.ValueInt64()
					typeDecimal1 = &shared.TypeDecimal{
						Type:      typeVar102,
						Precision: precision1,
						Scale:     scale1,
					}
				}
				if typeDecimal1 != nil {
					inferredColumnTypesInst = shared.Type{
						TypeDecimal: typeDecimal1,
					}
				}
				var typeStringWithMaxLength1 *shared.TypeStringWithMaxLength
				if inferredColumnTypesValue.TypeStringWithMaxLength != nil {
					typeVar103 := shared.TypeStringWithMaxLengthType(inferredColumnTypesValue.TypeStringWithMaxLength.Type.ValueString())
					length1 := inferredColumnTypesValue.TypeStringWithMaxLength.Length.ValueInt64()
					typeStringWithMaxLength1 = &shared.TypeStringWithMaxLength{
						Type:   typeVar103,
						Length: length1,
					}
				}
				if typeStringWithMaxLength1 != nil {
					inferredColumnTypesInst = shared.Type{
						TypeStringWithMaxLength: typeStringWithMaxLength1,
					}
				}
				inferredColumnTypes[inferredColumnTypesKey] = inferredColumnTypesInst
			}
			charset := new(string)
			if !r.Script.Script.Charset.IsUnknown() && !r.Script.Script.Charset.IsNull() {
				*charset = r.Script.Script.Charset.ValueString()
			} else {
				charset = nil
			}
			scriptInput = &shared.ScriptInput{
				Transforms:          transforms,
				InferredColumnTypes: inferredColumnTypes,
				Charset:             charset,
			}
		}
		if scriptInput != nil {
			script = &shared.ScriptOrLegacyScriptInput{
				ScriptInput: scriptInput,
			}
		}
		var legacyScriptInput *shared.LegacyScriptInput
		if r.Script.LegacyScript != nil {
			legacyScript := r.Script.LegacyScript.LegacyScript.ValueString()
			legacyScriptInput = &shared.LegacyScriptInput{
				LegacyScript: legacyScript,
			}
		}
		if legacyScriptInput != nil {
			script = &shared.ScriptOrLegacyScriptInput{
				LegacyScriptInput: legacyScriptInput,
			}
		}
	}
	paused := new(bool)
	if !r.Paused.IsUnknown() && !r.Paused.IsNull() {
		*paused = r.Paused.ValueBool()
	} else {
		paused = nil
	}
	var parsingErrorSettings *shared.ParsingErrorSettings
	if r.ParsingErrorSettings != nil {
		threshold, _ := r.ParsingErrorSettings.Threshold.ValueBigFloat().Float64()
		action := shared.Action(r.ParsingErrorSettings.Action.ValueString())
		parsingErrorSettings = &shared.ParsingErrorSettings{
			Threshold: threshold,
			Action:    action,
		}
	}
	var shares []string = nil
	for _, sharesItem := range r.Shares {
		shares = append(shares, sharesItem.ValueString())
	}
	out := shared.PipelineInput{
		Name:                 name,
		Source:               source,
		Destination:          destination,
		Script:               script,
		Paused:               paused,
		ParsingErrorSettings: parsingErrorSettings,
		Shares:               shares,
	}
	return &out
}

func (r *PipelineResourceModel) RefreshFromSharedPipelineOutput(resp *shared.PipelineOutput) {
	r.CreateDate = types.StringValue(resp.CreateDate.Format(time.RFC3339Nano))
	if len(r.Destinations) > len(resp.Destinations) {
		r.Destinations = r.Destinations[:len(resp.Destinations)]
	}
	for destinationsCount, destinationsItem := range resp.Destinations {
		var destinations1 DestinationInfoAndPipelineVersions
		destinations1.CurrentVersion = types.Int64Value(destinationsItem.CurrentVersion)
		if destinationsItem.Destination.DestinationDeltaLake != nil {
			destinations1.Destination.DeltaLake = &DestinationDeltaLake{}
			destinations1.Destination.DeltaLake.AutomaticSchemaChanges = types.BoolPointerValue(destinationsItem.Destination.DestinationDeltaLake.AutomaticSchemaChanges)
			destinations1.Destination.DeltaLake.ConnectionID = types.StringValue(destinationsItem.Destination.DestinationDeltaLake.ConnectionID)
			destinations1.Destination.DeltaLake.LastUpdatedColumn = types.StringPointerValue(destinationsItem.Destination.DestinationDeltaLake.LastUpdatedColumn)
			destinations1.Destination.DeltaLake.Pre10Dot2RuntimeSupport = types.BoolPointerValue(destinationsItem.Destination.DestinationDeltaLake.Pre10Dot2RuntimeSupport)
			destinations1.Destination.DeltaLake.PrimaryKey = nil
			for _, v := range destinationsItem.Destination.DestinationDeltaLake.PrimaryKey {
				destinations1.Destination.DeltaLake.PrimaryKey = append(destinations1.Destination.DeltaLake.PrimaryKey, types.StringValue(v))
			}
			destinations1.Destination.DeltaLake.RetainHistory = types.BoolPointerValue(destinationsItem.Destination.DestinationDeltaLake.RetainHistory)
			destinations1.Destination.DeltaLake.Schema = types.StringValue(destinationsItem.Destination.DestinationDeltaLake.Schema)
			destinations1.Destination.DeltaLake.Table = types.StringValue(destinationsItem.Destination.DestinationDeltaLake.Table)
			destinations1.Destination.DeltaLake.Type = types.StringValue(string(destinationsItem.Destination.DestinationDeltaLake.Type))
			destinations1.Destination.DeltaLake.WaitForQualityCheck = types.BoolPointerValue(destinationsItem.Destination.DestinationDeltaLake.WaitForQualityCheck)
		}
		if destinationsItem.Destination.DestinationIceberg != nil {
			destinations1.Destination.Iceberg = &DestinationIceberg{}
			destinations1.Destination.Iceberg.AutomaticSchemaChanges = types.BoolPointerValue(destinationsItem.Destination.DestinationIceberg.AutomaticSchemaChanges)
			destinations1.Destination.Iceberg.ConnectionID = types.StringValue(destinationsItem.Destination.DestinationIceberg.ConnectionID)
			destinations1.Destination.Iceberg.PrimaryKey = nil
			for _, v := range destinationsItem.Destination.DestinationIceberg.PrimaryKey {
				destinations1.Destination.Iceberg.PrimaryKey = append(destinations1.Destination.Iceberg.PrimaryKey, types.StringValue(v))
			}
			destinations1.Destination.Iceberg.Schema = types.StringPointerValue(destinationsItem.Destination.DestinationIceberg.Schema)
			destinations1.Destination.Iceberg.Table = types.StringValue(destinationsItem.Destination.DestinationIceberg.Table)
			destinations1.Destination.Iceberg.Type = types.StringValue(string(destinationsItem.Destination.DestinationIceberg.Type))
			destinations1.Destination.Iceberg.WaitForQualityCheck = types.BoolPointerValue(destinationsItem.Destination.DestinationIceberg.WaitForQualityCheck)
		}
		if destinationsItem.Destination.DestinationRedshift != nil {
			destinations1.Destination.Redshift = &DestinationRedshift{}
			destinations1.Destination.Redshift.AutomaticSchemaChanges = types.BoolPointerValue(destinationsItem.Destination.DestinationRedshift.AutomaticSchemaChanges)
			destinations1.Destination.Redshift.CompressColumns = types.BoolPointerValue(destinationsItem.Destination.DestinationRedshift.CompressColumns)
			destinations1.Destination.Redshift.ConnectionID = types.StringValue(destinationsItem.Destination.DestinationRedshift.ConnectionID)
			if destinationsItem.Destination.DestinationRedshift.DistributionStyle == nil {
				destinations1.Destination.Redshift.DistributionStyle = nil
			} else {
				destinations1.Destination.Redshift.DistributionStyle = &DistributionStyle{}
				if destinationsItem.Destination.DestinationRedshift.DistributionStyle.One != nil {
					if destinationsItem.Destination.DestinationRedshift.DistributionStyle.One != nil {
						destinations1.Destination.Redshift.DistributionStyle.One = types.StringValue(string(*destinationsItem.Destination.DestinationRedshift.DistributionStyle.One))
					} else {
						destinations1.Destination.Redshift.DistributionStyle.One = types.StringNull()
					}
				}
				if destinationsItem.Destination.DestinationRedshift.DistributionStyle.DistributionStyleKey != nil {
					destinations1.Destination.Redshift.DistributionStyle.DistributionStyleKey = &DistributionStyleKey{}
					destinations1.Destination.Redshift.DistributionStyle.DistributionStyleKey.Column = types.StringValue(destinationsItem.Destination.DestinationRedshift.DistributionStyle.DistributionStyleKey.Column)
					destinations1.Destination.Redshift.DistributionStyle.DistributionStyleKey.Type = types.StringValue(string(destinationsItem.Destination.DestinationRedshift.DistributionStyle.DistributionStyleKey.Type))
				}
			}
			destinations1.Destination.Redshift.LastUpdatedColumn = types.StringPointerValue(destinationsItem.Destination.DestinationRedshift.LastUpdatedColumn)
			destinations1.Destination.Redshift.PrimaryKey = nil
			for _, v := range destinationsItem.Destination.DestinationRedshift.PrimaryKey {
				destinations1.Destination.Redshift.PrimaryKey = append(destinations1.Destination.Redshift.PrimaryKey, types.StringValue(v))
			}
			destinations1.Destination.Redshift.RetainHistory = types.BoolPointerValue(destinationsItem.Destination.DestinationRedshift.RetainHistory)
			destinations1.Destination.Redshift.Schema = types.StringPointerValue(destinationsItem.Destination.DestinationRedshift.Schema)
			destinations1.Destination.Redshift.SortColumns = nil
			for _, v := range destinationsItem.Destination.DestinationRedshift.SortColumns {
				destinations1.Destination.Redshift.SortColumns = append(destinations1.Destination.Redshift.SortColumns, types.StringValue(v))
			}
			destinations1.Destination.Redshift.Table = types.StringValue(destinationsItem.Destination.DestinationRedshift.Table)
			destinations1.Destination.Redshift.TruncateStrings = types.BoolPointerValue(destinationsItem.Destination.DestinationRedshift.TruncateStrings)
			destinations1.Destination.Redshift.Type = types.StringValue(string(destinationsItem.Destination.DestinationRedshift.Type))
			destinations1.Destination.Redshift.WaitForQualityCheck = types.BoolPointerValue(destinationsItem.Destination.DestinationRedshift.WaitForQualityCheck)
		}
		if destinationsItem.Destination.DestinationS3DataLake != nil {
			destinations1.Destination.S3DataLake = &DestinationS3DataLake{}
			destinations1.Destination.S3DataLake.AutomaticSchemaChanges = types.BoolPointerValue(destinationsItem.Destination.DestinationS3DataLake.AutomaticSchemaChanges)
			destinations1.Destination.S3DataLake.ConnectionID = types.StringValue(destinationsItem.Destination.DestinationS3DataLake.ConnectionID)
			destinations1.Destination.S3DataLake.GenerateSnapshots = types.BoolPointerValue(destinationsItem.Destination.DestinationS3DataLake.GenerateSnapshots)
			if destinationsItem.Destination.DestinationS3DataLake.OutputFormat != nil {
				destinations1.Destination.S3DataLake.OutputFormat = types.StringValue(string(*destinationsItem.Destination.DestinationS3DataLake.OutputFormat))
			} else {
				destinations1.Destination.S3DataLake.OutputFormat = types.StringNull()
			}
			destinations1.Destination.S3DataLake.PathPrefix = types.StringValue(destinationsItem.Destination.DestinationS3DataLake.PathPrefix)
			destinations1.Destination.S3DataLake.PrimaryKey = nil
			for _, v := range destinationsItem.Destination.DestinationS3DataLake.PrimaryKey {
				destinations1.Destination.S3DataLake.PrimaryKey = append(destinations1.Destination.S3DataLake.PrimaryKey, types.StringValue(v))
			}
			destinations1.Destination.S3DataLake.Type = types.StringValue(string(destinationsItem.Destination.DestinationS3DataLake.Type))
			destinations1.Destination.S3DataLake.WaitForQualityCheck = types.BoolPointerValue(destinationsItem.Destination.DestinationS3DataLake.WaitForQualityCheck)
		}
		if destinationsItem.Destination.DestinationSnowflake != nil {
			destinations1.Destination.Snowflake = &DestinationSnowflake{}
			destinations1.Destination.Snowflake.AutomaticSchemaChanges = types.BoolPointerValue(destinationsItem.Destination.DestinationSnowflake.AutomaticSchemaChanges)
			destinations1.Destination.Snowflake.ClusteringKeys = nil
			for _, v := range destinationsItem.Destination.DestinationSnowflake.ClusteringKeys {
				destinations1.Destination.Snowflake.ClusteringKeys = append(destinations1.Destination.Snowflake.ClusteringKeys, types.StringValue(v))
			}
			destinations1.Destination.Snowflake.ConnectionID = types.StringValue(destinationsItem.Destination.DestinationSnowflake.ConnectionID)
			destinations1.Destination.Snowflake.LastUpdatedColumn = types.StringPointerValue(destinationsItem.Destination.DestinationSnowflake.LastUpdatedColumn)
			destinations1.Destination.Snowflake.PrimaryKey = nil
			for _, v := range destinationsItem.Destination.DestinationSnowflake.PrimaryKey {
				destinations1.Destination.Snowflake.PrimaryKey = append(destinations1.Destination.Snowflake.PrimaryKey, types.StringValue(v))
			}
			destinations1.Destination.Snowflake.RetainHistory = types.BoolPointerValue(destinationsItem.Destination.DestinationSnowflake.RetainHistory)
			destinations1.Destination.Snowflake.Schema = types.StringPointerValue(destinationsItem.Destination.DestinationSnowflake.Schema)
			destinations1.Destination.Snowflake.Table = types.StringValue(destinationsItem.Destination.DestinationSnowflake.Table)
			destinations1.Destination.Snowflake.Type = types.StringValue(string(destinationsItem.Destination.DestinationSnowflake.Type))
			destinations1.Destination.Snowflake.WaitForQualityCheck = types.BoolPointerValue(destinationsItem.Destination.DestinationSnowflake.WaitForQualityCheck)
		}
		for operationErrorsByOperationCount, operationErrorsByOperationItem := range destinationsItem.ParsingErrors.OperationErrorsByOperation {
			var operationErrorsByOperation1 OperationErrorsByOperation
			operationErrorsByOperation1.OperationDescription = types.StringValue(operationErrorsByOperationItem.OperationDescription)
			operationErrorsByOperation1.OperationIndex = types.Int64Value(operationErrorsByOperationItem.OperationIndex)
			operationErrorsByOperation1.RowCount = types.Int64Value(operationErrorsByOperationItem.RowCount)
			if operationErrorsByOperationCount+1 > len(destinations1.ParsingErrors.OperationErrorsByOperation) {
				destinations1.ParsingErrors.OperationErrorsByOperation = append(destinations1.ParsingErrors.OperationErrorsByOperation, operationErrorsByOperation1)
			} else {
				destinations1.ParsingErrors.OperationErrorsByOperation[operationErrorsByOperationCount].OperationDescription = operationErrorsByOperation1.OperationDescription
				destinations1.ParsingErrors.OperationErrorsByOperation[operationErrorsByOperationCount].OperationIndex = operationErrorsByOperation1.OperationIndex
				destinations1.ParsingErrors.OperationErrorsByOperation[operationErrorsByOperationCount].RowCount = operationErrorsByOperation1.RowCount
			}
		}
		for parsingErrorsPerDayCount, parsingErrorsPerDayItem := range destinationsItem.ParsingErrors.ParsingErrorsPerDay {
			var parsingErrorsPerDay1 ParsingErrorPerDay
			parsingErrorsPerDay1.Day = types.StringValue(parsingErrorsPerDayItem.Day.String())
			parsingErrorsPerDay1.ErrorType = types.StringValue(string(parsingErrorsPerDayItem.ErrorType))
			parsingErrorsPerDay1.RowCount = types.Int64Value(parsingErrorsPerDayItem.RowCount)
			if parsingErrorsPerDayCount+1 > len(destinations1.ParsingErrors.ParsingErrorsPerDay) {
				destinations1.ParsingErrors.ParsingErrorsPerDay = append(destinations1.ParsingErrors.ParsingErrorsPerDay, parsingErrorsPerDay1)
			} else {
				destinations1.ParsingErrors.ParsingErrorsPerDay[parsingErrorsPerDayCount].Day = parsingErrorsPerDay1.Day
				destinations1.ParsingErrors.ParsingErrorsPerDay[parsingErrorsPerDayCount].ErrorType = parsingErrorsPerDay1.ErrorType
				destinations1.ParsingErrors.ParsingErrorsPerDay[parsingErrorsPerDayCount].RowCount = parsingErrorsPerDay1.RowCount
			}
		}
		for typeErrorsByColumnCount, typeErrorsByColumnItem := range destinationsItem.ParsingErrors.TypeErrorsByColumn {
			var typeErrorsByColumn1 TypeErrorsByColumn
			typeErrorsByColumn1.ColumnName = types.StringValue(typeErrorsByColumnItem.ColumnName)
			typeErrorsByColumn1.RowCount = types.Int64Value(typeErrorsByColumnItem.RowCount)
			typeErrorsByColumn1.Type = types.StringValue(typeErrorsByColumnItem.Type)
			if typeErrorsByColumnCount+1 > len(destinations1.ParsingErrors.TypeErrorsByColumn) {
				destinations1.ParsingErrors.TypeErrorsByColumn = append(destinations1.ParsingErrors.TypeErrorsByColumn, typeErrorsByColumn1)
			} else {
				destinations1.ParsingErrors.TypeErrorsByColumn[typeErrorsByColumnCount].ColumnName = typeErrorsByColumn1.ColumnName
				destinations1.ParsingErrors.TypeErrorsByColumn[typeErrorsByColumnCount].RowCount = typeErrorsByColumn1.RowCount
				destinations1.ParsingErrors.TypeErrorsByColumn[typeErrorsByColumnCount].Type = typeErrorsByColumn1.Type
			}
		}
		destinations1.RefreshVersion = types.Int64PointerValue(destinationsItem.RefreshVersion)
		for rowsCurrentlyInWarehouseCount, rowsCurrentlyInWarehouseItem := range destinationsItem.RetentionData.RetentionByDay.RowsCurrentlyInWarehouse {
			var rowsCurrentlyInWarehouse1 RetentionDayRowCount
			if rowsCurrentlyInWarehouseItem.Date != nil {
				rowsCurrentlyInWarehouse1.Date = types.StringValue(rowsCurrentlyInWarehouseItem.Date.String())
			} else {
				rowsCurrentlyInWarehouse1.Date = types.StringNull()
			}
			rowsCurrentlyInWarehouse1.RowCount = types.Int64Value(rowsCurrentlyInWarehouseItem.RowCount)
			if rowsCurrentlyInWarehouseCount+1 > len(destinations1.RetentionData.RetentionByDay.RowsCurrentlyInWarehouse) {
				destinations1.RetentionData.RetentionByDay.RowsCurrentlyInWarehouse = append(destinations1.RetentionData.RetentionByDay.RowsCurrentlyInWarehouse, rowsCurrentlyInWarehouse1)
			} else {
				destinations1.RetentionData.RetentionByDay.RowsCurrentlyInWarehouse[rowsCurrentlyInWarehouseCount].Date = rowsCurrentlyInWarehouse1.Date
				destinations1.RetentionData.RetentionByDay.RowsCurrentlyInWarehouse[rowsCurrentlyInWarehouseCount].RowCount = rowsCurrentlyInWarehouse1.RowCount
			}
		}
		for rowsRemovedFromWarehouseCount, rowsRemovedFromWarehouseItem := range destinationsItem.RetentionData.RetentionByDay.RowsRemovedFromWarehouse {
			var rowsRemovedFromWarehouse1 RetentionDayRowCount
			if rowsRemovedFromWarehouseItem.Date != nil {
				rowsRemovedFromWarehouse1.Date = types.StringValue(rowsRemovedFromWarehouseItem.Date.String())
			} else {
				rowsRemovedFromWarehouse1.Date = types.StringNull()
			}
			rowsRemovedFromWarehouse1.RowCount = types.Int64Value(rowsRemovedFromWarehouseItem.RowCount)
			if rowsRemovedFromWarehouseCount+1 > len(destinations1.RetentionData.RetentionByDay.RowsRemovedFromWarehouse) {
				destinations1.RetentionData.RetentionByDay.RowsRemovedFromWarehouse = append(destinations1.RetentionData.RetentionByDay.RowsRemovedFromWarehouse, rowsRemovedFromWarehouse1)
			} else {
				destinations1.RetentionData.RetentionByDay.RowsRemovedFromWarehouse[rowsRemovedFromWarehouseCount].Date = rowsRemovedFromWarehouse1.Date
				destinations1.RetentionData.RetentionByDay.RowsRemovedFromWarehouse[rowsRemovedFromWarehouseCount].RowCount = rowsRemovedFromWarehouse1.RowCount
			}
		}
		if destinationsItem.RetentionData.RetentionPolicy == nil {
			destinations1.RetentionData.RetentionPolicy = nil
		} else {
			destinations1.RetentionData.RetentionPolicy = &RetentionPolicy{}
			destinations1.RetentionData.RetentionPolicy.Column = types.StringValue(destinationsItem.RetentionData.RetentionPolicy.Column)
			destinations1.RetentionData.RetentionPolicy.Period = types.Int64Value(destinationsItem.RetentionData.RetentionPolicy.Period)
		}
		for schemaChangeActivityCount, schemaChangeActivityItem := range destinationsItem.SchemaChangeActivity {
			var schemaChangeActivity1 SchemaChange
			if schemaChangeActivityItem.DateTime != nil {
				schemaChangeActivity1.DateTime = types.StringValue(schemaChangeActivityItem.DateTime.Format(time.RFC3339Nano))
			} else {
				schemaChangeActivity1.DateTime = types.StringNull()
			}
			schemaChangeActivity1.SchemaChangeDescription = types.StringPointerValue(schemaChangeActivityItem.SchemaChangeDescription)
			if schemaChangeActivityCount+1 > len(destinations1.SchemaChangeActivity) {
				destinations1.SchemaChangeActivity = append(destinations1.SchemaChangeActivity, schemaChangeActivity1)
			} else {
				destinations1.SchemaChangeActivity[schemaChangeActivityCount].DateTime = schemaChangeActivity1.DateTime
				destinations1.SchemaChangeActivity[schemaChangeActivityCount].SchemaChangeDescription = schemaChangeActivity1.SchemaChangeDescription
			}
		}
		if destinationsCount+1 > len(r.Destinations) {
			r.Destinations = append(r.Destinations, destinations1)
		} else {
			r.Destinations[destinationsCount].CurrentVersion = destinations1.CurrentVersion
			r.Destinations[destinationsCount].Destination = destinations1.Destination
			r.Destinations[destinationsCount].ParsingErrors = destinations1.ParsingErrors
			r.Destinations[destinationsCount].RefreshVersion = destinations1.RefreshVersion
			r.Destinations[destinationsCount].RetentionData = destinations1.RetentionData
			r.Destinations[destinationsCount].SchemaChangeActivity = destinations1.SchemaChangeActivity
		}
	}
	r.ID = types.StringValue(resp.ID)
	if resp.LastRefreshFinishDate != nil {
		r.LastRefreshFinishDate = types.StringValue(resp.LastRefreshFinishDate.Format(time.RFC3339Nano))
	} else {
		r.LastRefreshFinishDate = types.StringNull()
	}
	if resp.LastRefreshStartDate != nil {
		r.LastRefreshStartDate = types.StringValue(resp.LastRefreshStartDate.Format(time.RFC3339Nano))
	} else {
		r.LastRefreshStartDate = types.StringNull()
	}
	r.Latency = types.Int64PointerValue(resp.Latency)
	r.LatestScriptVersion = types.Int64Value(resp.LatestScriptVersion)
	r.Name = types.StringValue(resp.Name)
	r.Owner.EmailAddress = types.StringValue(resp.Owner.EmailAddress)
	r.Owner.FirstName = types.StringValue(resp.Owner.FirstName)
	r.Owner.ID = types.StringValue(resp.Owner.ID)
	r.Owner.LastName = types.StringValue(resp.Owner.LastName)
	if resp.ParsingErrorSettings == nil {
		r.ParsingErrorSettings = nil
	} else {
		r.ParsingErrorSettings = &ParsingErrorSettings{}
		r.ParsingErrorSettings.Action = types.StringValue(string(resp.ParsingErrorSettings.Action))
		r.ParsingErrorSettings.Threshold = types.NumberValue(big.NewFloat(float64(resp.ParsingErrorSettings.Threshold)))
	}
	r.Paused = types.BoolValue(resp.Paused)
	r.PipelineMode = types.StringValue(string(resp.PipelineMode))
	if resp.RefreshSchedule.RefreshScheduleModeDaily != nil {
		r.RefreshSchedule.Daily = &UpdateScheduleModeDaily{}
		r.RefreshSchedule.Daily.HourOfDay = types.Int64Value(resp.RefreshSchedule.RefreshScheduleModeDaily.HourOfDay)
		r.RefreshSchedule.Daily.Mode = types.StringValue(string(resp.RefreshSchedule.RefreshScheduleModeDaily.Mode))
	}
	if resp.RefreshSchedule.RefreshScheduleModeHourly != nil {
		r.RefreshSchedule.Hourly = &UpdateScheduleModeHourly{}
		r.RefreshSchedule.Hourly.Mode = types.StringValue(string(resp.RefreshSchedule.RefreshScheduleModeHourly.Mode))
	}
	if resp.RefreshSchedule.RefreshScheduleModeMonthly != nil {
		r.RefreshSchedule.Monthly = &UpdateScheduleModeMonthly{}
		r.RefreshSchedule.Monthly.DayOfMonth = types.Int64Value(resp.RefreshSchedule.RefreshScheduleModeMonthly.DayOfMonth)
		r.RefreshSchedule.Monthly.HourOfDay = types.Int64Value(resp.RefreshSchedule.RefreshScheduleModeMonthly.HourOfDay)
		r.RefreshSchedule.Monthly.Mode = types.StringValue(string(resp.RefreshSchedule.RefreshScheduleModeMonthly.Mode))
	}
	if resp.RefreshSchedule.RefreshScheduleModeNever != nil {
		r.RefreshSchedule.Never = &RefreshScheduleModeNever{}
		r.RefreshSchedule.Never.Mode = types.StringValue(string(resp.RefreshSchedule.RefreshScheduleModeNever.Mode))
	}
	if resp.RefreshSchedule.RefreshScheduleModeWeekly != nil {
		r.RefreshSchedule.Weekly = &UpdateScheduleModeWeekly{}
		r.RefreshSchedule.Weekly.DayOfWeek = types.Int64Value(resp.RefreshSchedule.RefreshScheduleModeWeekly.DayOfWeek)
		r.RefreshSchedule.Weekly.HourOfDay = types.Int64Value(resp.RefreshSchedule.RefreshScheduleModeWeekly.HourOfDay)
		r.RefreshSchedule.Weekly.Mode = types.StringValue(string(resp.RefreshSchedule.RefreshScheduleModeWeekly.Mode))
	}
	r.Shares = nil
	for _, v := range resp.Shares {
		r.Shares = append(r.Shares, types.StringValue(v))
	}
	if resp.Source.SourceActiveCampaign != nil {
		r.Source.ActiveCampaign = &SourceActiveCampaign{}
		r.Source.ActiveCampaign.ConnectionID = types.StringValue(resp.Source.SourceActiveCampaign.ConnectionID)
		r.Source.ActiveCampaign.Entity = types.StringValue(resp.Source.SourceActiveCampaign.Entity)
		r.Source.ActiveCampaign.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceActiveCampaign.LatencyThreshold)
		r.Source.ActiveCampaign.Type = types.StringValue(string(resp.Source.SourceActiveCampaign.Type))
	}
	if resp.Source.SourceBigQuery != nil {
		r.Source.Bigquery = &SourceBigQuery{}
		r.Source.Bigquery.ConnectionID = types.StringValue(resp.Source.SourceBigQuery.ConnectionID)
		r.Source.Bigquery.Dataset = types.StringPointerValue(resp.Source.SourceBigQuery.Dataset)
		r.Source.Bigquery.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceBigQuery.LastUpdatedColumn)
		r.Source.Bigquery.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceBigQuery.LatencyThreshold)
		r.Source.Bigquery.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceBigQuery.PrimaryKeyColumns {
			r.Source.Bigquery.PrimaryKeyColumns = append(r.Source.Bigquery.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Bigquery.Table = types.StringPointerValue(resp.Source.SourceBigQuery.Table)
		r.Source.Bigquery.TableNameFilter = types.StringPointerValue(resp.Source.SourceBigQuery.TableNameFilter)
		r.Source.Bigquery.Type = types.StringValue(string(resp.Source.SourceBigQuery.Type))
	}
	if resp.Source.SourceBingAds != nil {
		r.Source.BingAds = &SourceBingAds{}
		r.Source.BingAds.ConnectionID = types.StringValue(resp.Source.SourceBingAds.ConnectionID)
		r.Source.BingAds.Entity = types.StringValue(resp.Source.SourceBingAds.Entity)
		r.Source.BingAds.Fields = nil
		for _, v := range resp.Source.SourceBingAds.Fields {
			r.Source.BingAds.Fields = append(r.Source.BingAds.Fields, types.StringValue(v))
		}
		r.Source.BingAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceBingAds.LatencyThreshold)
		r.Source.BingAds.Type = types.StringValue(string(resp.Source.SourceBingAds.Type))
	}
	if resp.Source.SourceBlackline != nil {
		r.Source.Blackline = &SourceBlackline{}
		r.Source.Blackline.ConnectionID = types.StringValue(resp.Source.SourceBlackline.ConnectionID)
		r.Source.Blackline.Entity = types.StringValue(resp.Source.SourceBlackline.Entity)
		r.Source.Blackline.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceBlackline.LatencyThreshold)
		r.Source.Blackline.Type = types.StringValue(string(resp.Source.SourceBlackline.Type))
	}
	if resp.Source.SourceBraintree != nil {
		r.Source.Braintree = &SourceBraintree{}
		r.Source.Braintree.ConnectionID = types.StringValue(resp.Source.SourceBraintree.ConnectionID)
		r.Source.Braintree.Entity = types.StringValue(resp.Source.SourceBraintree.Entity)
		r.Source.Braintree.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceBraintree.LatencyThreshold)
		r.Source.Braintree.Type = types.StringValue(string(resp.Source.SourceBraintree.Type))
	}
	if resp.Source.SourceConfluentCloud != nil {
		r.Source.ConfluentCloud = &SourceConfluentCloud{}
		r.Source.ConfluentCloud.ConnectionID = types.StringValue(resp.Source.SourceConfluentCloud.ConnectionID)
		r.Source.ConfluentCloud.Entity = types.StringValue(resp.Source.SourceConfluentCloud.Entity)
		r.Source.ConfluentCloud.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceConfluentCloud.LatencyThreshold)
		r.Source.ConfluentCloud.Type = types.StringValue(string(resp.Source.SourceConfluentCloud.Type))
	}
	if resp.Source.SourceCoupa != nil {
		r.Source.Coupa = &SourceCoupa{}
		r.Source.Coupa.ConnectionID = types.StringValue(resp.Source.SourceCoupa.ConnectionID)
		r.Source.Coupa.Entity = types.StringValue(resp.Source.SourceCoupa.Entity)
		r.Source.Coupa.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceCoupa.LatencyThreshold)
		r.Source.Coupa.Type = types.StringValue(string(resp.Source.SourceCoupa.Type))
	}
	if resp.Source.SourceCriteo != nil {
		r.Source.Criteo = &SourceCriteo{}
		r.Source.Criteo.ConnectionID = types.StringValue(resp.Source.SourceCriteo.ConnectionID)
		r.Source.Criteo.Currency = nil
		for _, v := range resp.Source.SourceCriteo.Currency {
			r.Source.Criteo.Currency = append(r.Source.Criteo.Currency, types.StringValue(v))
		}
		r.Source.Criteo.Dimensions = nil
		for _, v := range resp.Source.SourceCriteo.Dimensions {
			r.Source.Criteo.Dimensions = append(r.Source.Criteo.Dimensions, types.StringValue(v))
		}
		r.Source.Criteo.Entity = types.StringValue(resp.Source.SourceCriteo.Entity)
		r.Source.Criteo.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceCriteo.LatencyThreshold)
		r.Source.Criteo.Metrics = nil
		for _, v := range resp.Source.SourceCriteo.Metrics {
			r.Source.Criteo.Metrics = append(r.Source.Criteo.Metrics, types.StringValue(v))
		}
		r.Source.Criteo.Timezone = nil
		for _, v := range resp.Source.SourceCriteo.Timezone {
			r.Source.Criteo.Timezone = append(r.Source.Criteo.Timezone, types.StringValue(v))
		}
		r.Source.Criteo.Type = types.StringValue(string(resp.Source.SourceCriteo.Type))
	}
	if resp.Source.SourceDb2 != nil {
		r.Source.Db2 = &SourceDb2{}
		r.Source.Db2.ConnectionID = types.StringValue(resp.Source.SourceDb2.ConnectionID)
		r.Source.Db2.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceDb2.LastUpdatedColumn)
		r.Source.Db2.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceDb2.LatencyThreshold)
		r.Source.Db2.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceDb2.PrimaryKeyColumns {
			r.Source.Db2.PrimaryKeyColumns = append(r.Source.Db2.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Db2.Schema = types.StringPointerValue(resp.Source.SourceDb2.Schema)
		r.Source.Db2.Table = types.StringPointerValue(resp.Source.SourceDb2.Table)
		r.Source.Db2.TableNameFilter = types.StringPointerValue(resp.Source.SourceDb2.TableNameFilter)
		r.Source.Db2.Type = types.StringValue(string(resp.Source.SourceDb2.Type))
	}
	if resp.Source.SourceDb2Sharded != nil {
		r.Source.Db2Sharded = &SourceDb2Sharded{}
		r.Source.Db2Sharded.ConnectionID = types.StringValue(resp.Source.SourceDb2Sharded.ConnectionID)
		r.Source.Db2Sharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceDb2Sharded.LastUpdatedColumn)
		r.Source.Db2Sharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceDb2Sharded.LatencyThreshold)
		r.Source.Db2Sharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceDb2Sharded.PrimaryKeyColumns {
			r.Source.Db2Sharded.PrimaryKeyColumns = append(r.Source.Db2Sharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Db2Sharded.Schema = types.StringPointerValue(resp.Source.SourceDb2Sharded.Schema)
		r.Source.Db2Sharded.Table = types.StringPointerValue(resp.Source.SourceDb2Sharded.Table)
		r.Source.Db2Sharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceDb2Sharded.TableNameFilter)
		r.Source.Db2Sharded.Type = types.StringValue(string(resp.Source.SourceDb2Sharded.Type))
	}
	if resp.Source.SourceDeltaLake != nil {
		r.Source.DeltaLake = &SourceDeltaLake{}
		r.Source.DeltaLake.ConnectionID = types.StringValue(resp.Source.SourceDeltaLake.ConnectionID)
		r.Source.DeltaLake.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceDeltaLake.LastUpdatedColumn)
		r.Source.DeltaLake.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceDeltaLake.LatencyThreshold)
		r.Source.DeltaLake.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceDeltaLake.PrimaryKeyColumns {
			r.Source.DeltaLake.PrimaryKeyColumns = append(r.Source.DeltaLake.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.DeltaLake.Schema = types.StringPointerValue(resp.Source.SourceDeltaLake.Schema)
		r.Source.DeltaLake.Table = types.StringPointerValue(resp.Source.SourceDeltaLake.Table)
		r.Source.DeltaLake.TableNameFilter = types.StringPointerValue(resp.Source.SourceDeltaLake.TableNameFilter)
		r.Source.DeltaLake.Type = types.StringValue(string(resp.Source.SourceDeltaLake.Type))
	}
	if resp.Source.SourceElasticSearch != nil {
		r.Source.Elasticsearch = &SourceElasticSearch{}
		r.Source.Elasticsearch.ConnectionID = types.StringValue(resp.Source.SourceElasticSearch.ConnectionID)
		r.Source.Elasticsearch.Entity = types.StringValue(resp.Source.SourceElasticSearch.Entity)
		r.Source.Elasticsearch.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceElasticSearch.LatencyThreshold)
		r.Source.Elasticsearch.Type = types.StringValue(string(resp.Source.SourceElasticSearch.Type))
	}
	if resp.Source.SourceElluminate != nil {
		r.Source.Elluminate = &SourceElluminate{}
		r.Source.Elluminate.ConnectionID = types.StringValue(resp.Source.SourceElluminate.ConnectionID)
		r.Source.Elluminate.DomainName = nil
		for _, v := range resp.Source.SourceElluminate.DomainName {
			r.Source.Elluminate.DomainName = append(r.Source.Elluminate.DomainName, types.StringValue(v))
		}
		r.Source.Elluminate.Entity = types.StringValue(resp.Source.SourceElluminate.Entity)
		r.Source.Elluminate.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceElluminate.LatencyThreshold)
		r.Source.Elluminate.SchemaName = types.StringValue(resp.Source.SourceElluminate.SchemaName)
		r.Source.Elluminate.Type = types.StringValue(string(resp.Source.SourceElluminate.Type))
	}
	if resp.Source.SourceEloqua != nil {
		r.Source.Eloqua = &SourceEloqua{}
		r.Source.Eloqua.ConnectionID = types.StringValue(resp.Source.SourceEloqua.ConnectionID)
		r.Source.Eloqua.Entity = types.StringValue(resp.Source.SourceEloqua.Entity)
		r.Source.Eloqua.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceEloqua.LatencyThreshold)
		r.Source.Eloqua.Type = types.StringValue(string(resp.Source.SourceEloqua.Type))
	}
	if resp.Source.SourceErpx != nil {
		r.Source.Erpx = &SourceErpx{}
		r.Source.Erpx.ConnectionID = types.StringValue(resp.Source.SourceErpx.ConnectionID)
		r.Source.Erpx.Entity = types.StringValue(resp.Source.SourceErpx.Entity)
		r.Source.Erpx.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceErpx.LatencyThreshold)
		r.Source.Erpx.Type = types.StringValue(string(resp.Source.SourceErpx.Type))
	}
	if resp.Source.SourceFacebookAds != nil {
		r.Source.FacebookAds = &SourceFacebookAds{}
		r.Source.FacebookAds.Breakdowns = nil
		for _, v := range resp.Source.SourceFacebookAds.Breakdowns {
			r.Source.FacebookAds.Breakdowns = append(r.Source.FacebookAds.Breakdowns, types.StringValue(v))
		}
		r.Source.FacebookAds.ConnectionID = types.StringValue(resp.Source.SourceFacebookAds.ConnectionID)
		r.Source.FacebookAds.Entity = types.StringValue(resp.Source.SourceFacebookAds.Entity)
		r.Source.FacebookAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceFacebookAds.LatencyThreshold)
		r.Source.FacebookAds.Type = types.StringValue(string(resp.Source.SourceFacebookAds.Type))
	}
	if resp.Source.SourceFifteenFive != nil {
		r.Source.FifteenFive = &SourceFifteenFive{}
		r.Source.FifteenFive.ConnectionID = types.StringValue(resp.Source.SourceFifteenFive.ConnectionID)
		r.Source.FifteenFive.Entity = types.StringValue(resp.Source.SourceFifteenFive.Entity)
		r.Source.FifteenFive.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceFifteenFive.LatencyThreshold)
		r.Source.FifteenFive.Type = types.StringValue(string(resp.Source.SourceFifteenFive.Type))
	}
	if resp.Source.SourceFreshchat != nil {
		r.Source.Freshchat = &SourceFreshchat{}
		r.Source.Freshchat.ConnectionID = types.StringValue(resp.Source.SourceFreshchat.ConnectionID)
		r.Source.Freshchat.Entity = types.StringValue(resp.Source.SourceFreshchat.Entity)
		r.Source.Freshchat.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceFreshchat.LatencyThreshold)
		r.Source.Freshchat.Type = types.StringValue(string(resp.Source.SourceFreshchat.Type))
		r.Source.Freshchat.View = nil
		for _, v := range resp.Source.SourceFreshchat.View {
			r.Source.Freshchat.View = append(r.Source.Freshchat.View, types.StringValue(v))
		}
	}
	if resp.Source.SourceFreshsales != nil {
		r.Source.Freshsales = &SourceFreshsales{}
		r.Source.Freshsales.ConnectionID = types.StringValue(resp.Source.SourceFreshsales.ConnectionID)
		r.Source.Freshsales.Entity = types.StringValue(resp.Source.SourceFreshsales.Entity)
		r.Source.Freshsales.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceFreshsales.LatencyThreshold)
		r.Source.Freshsales.Type = types.StringValue(string(resp.Source.SourceFreshsales.Type))
		r.Source.Freshsales.View = nil
		for _, v := range resp.Source.SourceFreshsales.View {
			r.Source.Freshsales.View = append(r.Source.Freshsales.View, types.StringValue(v))
		}
	}
	if resp.Source.SourceFreshworks != nil {
		r.Source.Freshworks = &SourceFreshworks{}
		r.Source.Freshworks.ConnectionID = types.StringValue(resp.Source.SourceFreshworks.ConnectionID)
		r.Source.Freshworks.Entity = types.StringValue(resp.Source.SourceFreshworks.Entity)
		r.Source.Freshworks.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceFreshworks.LatencyThreshold)
		r.Source.Freshworks.Type = types.StringValue(string(resp.Source.SourceFreshworks.Type))
	}
	if resp.Source.SourceFtp != nil {
		r.Source.Ftp = &SourceFtp{}
		r.Source.Ftp.ConnectionID = types.StringValue(resp.Source.SourceFtp.ConnectionID)
		r.Source.Ftp.FileNameFilter = types.StringPointerValue(resp.Source.SourceFtp.FileNameFilter)
		r.Source.Ftp.GlobPattern = types.StringPointerValue(resp.Source.SourceFtp.GlobPattern)
		r.Source.Ftp.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceFtp.LatencyThreshold)
		if resp.Source.SourceFtp.LowWatermark != nil {
			r.Source.Ftp.LowWatermark = types.StringValue(resp.Source.SourceFtp.LowWatermark.String())
		} else {
			r.Source.Ftp.LowWatermark = types.StringNull()
		}
		r.Source.Ftp.NewFileBehavior = types.StringValue(string(resp.Source.SourceFtp.NewFileBehavior))
		r.Source.Ftp.Paths = nil
		for _, v := range resp.Source.SourceFtp.Paths {
			r.Source.Ftp.Paths = append(r.Source.Ftp.Paths, types.StringValue(v))
		}
		r.Source.Ftp.Type = types.StringValue(string(resp.Source.SourceFtp.Type))
	}
	if resp.Source.SourceGong != nil {
		r.Source.Gong = &SourceGong{}
		r.Source.Gong.ConnectionID = types.StringValue(resp.Source.SourceGong.ConnectionID)
		r.Source.Gong.Entity = types.StringValue(resp.Source.SourceGong.Entity)
		r.Source.Gong.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceGong.LatencyThreshold)
		r.Source.Gong.Type = types.StringValue(string(resp.Source.SourceGong.Type))
	}
	if resp.Source.SourceGoogleAds != nil {
		r.Source.GoogleAds = &SourceGoogleAds{}
		r.Source.GoogleAds.AttributedResources = nil
		for _, v := range resp.Source.SourceGoogleAds.AttributedResources {
			r.Source.GoogleAds.AttributedResources = append(r.Source.GoogleAds.AttributedResources, types.StringValue(v))
		}
		r.Source.GoogleAds.ConnectionID = types.StringValue(resp.Source.SourceGoogleAds.ConnectionID)
		r.Source.GoogleAds.Entity = types.StringValue(resp.Source.SourceGoogleAds.Entity)
		r.Source.GoogleAds.Fields = nil
		for _, v := range resp.Source.SourceGoogleAds.Fields {
			r.Source.GoogleAds.Fields = append(r.Source.GoogleAds.Fields, types.StringValue(v))
		}
		r.Source.GoogleAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceGoogleAds.LatencyThreshold)
		r.Source.GoogleAds.Metrics = nil
		for _, v := range resp.Source.SourceGoogleAds.Metrics {
			r.Source.GoogleAds.Metrics = append(r.Source.GoogleAds.Metrics, types.StringValue(v))
		}
		r.Source.GoogleAds.Segments = nil
		for _, v := range resp.Source.SourceGoogleAds.Segments {
			r.Source.GoogleAds.Segments = append(r.Source.GoogleAds.Segments, types.StringValue(v))
		}
		r.Source.GoogleAds.Type = types.StringValue(string(resp.Source.SourceGoogleAds.Type))
	}
	if resp.Source.SourceGoogleAnalyticsGa4 != nil {
		r.Source.GoogleAnalyticsGa4 = &SourceGoogleAnalyticsGa4{}
		r.Source.GoogleAnalyticsGa4.ConnectionID = types.StringValue(resp.Source.SourceGoogleAnalyticsGa4.ConnectionID)
		r.Source.GoogleAnalyticsGa4.Dimensions = nil
		for _, v := range resp.Source.SourceGoogleAnalyticsGa4.Dimensions {
			r.Source.GoogleAnalyticsGa4.Dimensions = append(r.Source.GoogleAnalyticsGa4.Dimensions, types.StringValue(v))
		}
		r.Source.GoogleAnalyticsGa4.Entity = types.StringValue(resp.Source.SourceGoogleAnalyticsGa4.Entity)
		r.Source.GoogleAnalyticsGa4.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceGoogleAnalyticsGa4.LatencyThreshold)
		r.Source.GoogleAnalyticsGa4.Metrics = nil
		for _, v := range resp.Source.SourceGoogleAnalyticsGa4.Metrics {
			r.Source.GoogleAnalyticsGa4.Metrics = append(r.Source.GoogleAnalyticsGa4.Metrics, types.StringValue(v))
		}
		r.Source.GoogleAnalyticsGa4.Type = types.StringValue(string(resp.Source.SourceGoogleAnalyticsGa4.Type))
	}
	if resp.Source.SourceGoogleCloudStorage != nil {
		r.Source.GoogleCloudStorage = &SourceGoogleCloudStorage{}
		r.Source.GoogleCloudStorage.ConnectionID = types.StringValue(resp.Source.SourceGoogleCloudStorage.ConnectionID)
		r.Source.GoogleCloudStorage.FileNameFilter = types.StringPointerValue(resp.Source.SourceGoogleCloudStorage.FileNameFilter)
		r.Source.GoogleCloudStorage.GlobPattern = types.StringPointerValue(resp.Source.SourceGoogleCloudStorage.GlobPattern)
		r.Source.GoogleCloudStorage.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceGoogleCloudStorage.LatencyThreshold)
		if resp.Source.SourceGoogleCloudStorage.LowWatermark != nil {
			r.Source.GoogleCloudStorage.LowWatermark = types.StringValue(resp.Source.SourceGoogleCloudStorage.LowWatermark.String())
		} else {
			r.Source.GoogleCloudStorage.LowWatermark = types.StringNull()
		}
		r.Source.GoogleCloudStorage.NewFileBehavior = types.StringValue(string(resp.Source.SourceGoogleCloudStorage.NewFileBehavior))
		r.Source.GoogleCloudStorage.Paths = nil
		for _, v := range resp.Source.SourceGoogleCloudStorage.Paths {
			r.Source.GoogleCloudStorage.Paths = append(r.Source.GoogleCloudStorage.Paths, types.StringValue(v))
		}
		r.Source.GoogleCloudStorage.Type = types.StringValue(string(resp.Source.SourceGoogleCloudStorage.Type))
	}
	if resp.Source.SourceGoogleSheets != nil {
		r.Source.GoogleSheets = &SourceGoogleSheets{}
		r.Source.GoogleSheets.ConnectionID = types.StringValue(resp.Source.SourceGoogleSheets.ConnectionID)
		r.Source.GoogleSheets.Entity = types.StringValue(resp.Source.SourceGoogleSheets.Entity)
		r.Source.GoogleSheets.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceGoogleSheets.LatencyThreshold)
		r.Source.GoogleSheets.Type = types.StringValue(string(resp.Source.SourceGoogleSheets.Type))
	}
	if resp.Source.SourceHubspot != nil {
		r.Source.Hubspot = &SourceHubspot{}
		r.Source.Hubspot.ConnectionID = types.StringValue(resp.Source.SourceHubspot.ConnectionID)
		r.Source.Hubspot.Entity = types.StringValue(resp.Source.SourceHubspot.Entity)
		r.Source.Hubspot.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceHubspot.LatencyThreshold)
		r.Source.Hubspot.Type = types.StringValue(string(resp.Source.SourceHubspot.Type))
	}
	if resp.Source.SourceImpactRadius != nil {
		r.Source.ImpactRadius = &SourceImpactRadius{}
		r.Source.ImpactRadius.ConnectionID = types.StringValue(resp.Source.SourceImpactRadius.ConnectionID)
		r.Source.ImpactRadius.Entity = types.StringValue(resp.Source.SourceImpactRadius.Entity)
		r.Source.ImpactRadius.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceImpactRadius.LatencyThreshold)
		r.Source.ImpactRadius.Type = types.StringValue(string(resp.Source.SourceImpactRadius.Type))
	}
	if resp.Source.SourceIntercom != nil {
		r.Source.Intercom = &SourceIntercom{}
		r.Source.Intercom.ConnectionID = types.StringValue(resp.Source.SourceIntercom.ConnectionID)
		r.Source.Intercom.Entity = types.StringValue(resp.Source.SourceIntercom.Entity)
		r.Source.Intercom.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceIntercom.LatencyThreshold)
		r.Source.Intercom.Type = types.StringValue(string(resp.Source.SourceIntercom.Type))
	}
	if resp.Source.SourceJira != nil {
		r.Source.Jira = &SourceJira{}
		r.Source.Jira.ConnectionID = types.StringValue(resp.Source.SourceJira.ConnectionID)
		r.Source.Jira.Entity = types.StringValue(resp.Source.SourceJira.Entity)
		r.Source.Jira.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceJira.LatencyThreshold)
		r.Source.Jira.Type = types.StringValue(string(resp.Source.SourceJira.Type))
	}
	if resp.Source.SourceJiraAlign != nil {
		r.Source.JiraAlign = &SourceJiraAlign{}
		r.Source.JiraAlign.ConnectionID = types.StringValue(resp.Source.SourceJiraAlign.ConnectionID)
		r.Source.JiraAlign.Entity = types.StringValue(resp.Source.SourceJiraAlign.Entity)
		r.Source.JiraAlign.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceJiraAlign.LatencyThreshold)
		r.Source.JiraAlign.Type = types.StringValue(string(resp.Source.SourceJiraAlign.Type))
	}
	if resp.Source.SourceKafka != nil {
		r.Source.Kafka = &SourceKafka{}
		r.Source.Kafka.ConnectionID = types.StringValue(resp.Source.SourceKafka.ConnectionID)
		r.Source.Kafka.Entity = types.StringValue(resp.Source.SourceKafka.Entity)
		r.Source.Kafka.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceKafka.LatencyThreshold)
		r.Source.Kafka.Type = types.StringValue(string(resp.Source.SourceKafka.Type))
	}
	if resp.Source.SourceKustomer != nil {
		r.Source.Kustomer = &SourceKustomer{}
		r.Source.Kustomer.ConnectionID = types.StringValue(resp.Source.SourceKustomer.ConnectionID)
		r.Source.Kustomer.Entity = types.StringValue(resp.Source.SourceKustomer.Entity)
		r.Source.Kustomer.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceKustomer.LatencyThreshold)
		r.Source.Kustomer.Type = types.StringValue(string(resp.Source.SourceKustomer.Type))
	}
	if resp.Source.SourceLdap != nil {
		r.Source.Ldap = &SourceLdap{}
		r.Source.Ldap.ConnectionID = types.StringValue(resp.Source.SourceLdap.ConnectionID)
		r.Source.Ldap.Entity = types.StringValue(resp.Source.SourceLdap.Entity)
		r.Source.Ldap.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceLdap.LatencyThreshold)
		r.Source.Ldap.Type = types.StringValue(string(resp.Source.SourceLdap.Type))
	}
	if resp.Source.SourceLdapVirtualListView != nil {
		r.Source.LdapVirtualListView = &SourceLdapVirtualListView{}
		r.Source.LdapVirtualListView.ConnectionID = types.StringValue(resp.Source.SourceLdapVirtualListView.ConnectionID)
		r.Source.LdapVirtualListView.Entity = types.StringValue(resp.Source.SourceLdapVirtualListView.Entity)
		r.Source.LdapVirtualListView.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceLdapVirtualListView.LatencyThreshold)
		r.Source.LdapVirtualListView.Type = types.StringValue(string(resp.Source.SourceLdapVirtualListView.Type))
	}
	if resp.Source.SourceLinkedInAds != nil {
		r.Source.LinkedInAds = &SourceLinkedInAds{}
		r.Source.LinkedInAds.ConnectionID = types.StringValue(resp.Source.SourceLinkedInAds.ConnectionID)
		r.Source.LinkedInAds.Entity = types.StringValue(resp.Source.SourceLinkedInAds.Entity)
		r.Source.LinkedInAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceLinkedInAds.LatencyThreshold)
		r.Source.LinkedInAds.Metrics = nil
		for _, v := range resp.Source.SourceLinkedInAds.Metrics {
			r.Source.LinkedInAds.Metrics = append(r.Source.LinkedInAds.Metrics, types.StringValue(v))
		}
		r.Source.LinkedInAds.Pivots = nil
		for _, v := range resp.Source.SourceLinkedInAds.Pivots {
			r.Source.LinkedInAds.Pivots = append(r.Source.LinkedInAds.Pivots, types.StringValue(v))
		}
		r.Source.LinkedInAds.Type = types.StringValue(string(resp.Source.SourceLinkedInAds.Type))
	}
	if resp.Source.SourceMarketo != nil {
		r.Source.Marketo = &SourceMarketo{}
		r.Source.Marketo.ActivityTypes = nil
		for _, v := range resp.Source.SourceMarketo.ActivityTypes {
			r.Source.Marketo.ActivityTypes = append(r.Source.Marketo.ActivityTypes, types.StringValue(v))
		}
		r.Source.Marketo.ConnectionID = types.StringValue(resp.Source.SourceMarketo.ConnectionID)
		r.Source.Marketo.Entity = types.StringValue(resp.Source.SourceMarketo.Entity)
		r.Source.Marketo.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceMarketo.LatencyThreshold)
		r.Source.Marketo.Type = types.StringValue(string(resp.Source.SourceMarketo.Type))
	}
	if resp.Source.SourceMixpanel != nil {
		r.Source.Mixpanel = &SourceMixpanel{}
		r.Source.Mixpanel.ConnectionID = types.StringValue(resp.Source.SourceMixpanel.ConnectionID)
		r.Source.Mixpanel.Entity = types.StringValue(resp.Source.SourceMixpanel.Entity)
		r.Source.Mixpanel.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceMixpanel.LatencyThreshold)
		r.Source.Mixpanel.Type = types.StringValue(string(resp.Source.SourceMixpanel.Type))
	}
	if resp.Source.SourceMongodb != nil {
		r.Source.Mongodb = &SourceMongodb{}
		r.Source.Mongodb.ConnectionID = types.StringValue(resp.Source.SourceMongodb.ConnectionID)
		r.Source.Mongodb.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceMongodb.LatencyThreshold)
		r.Source.Mongodb.Table = types.StringPointerValue(resp.Source.SourceMongodb.Table)
		r.Source.Mongodb.TableNameFilter = types.StringPointerValue(resp.Source.SourceMongodb.TableNameFilter)
		r.Source.Mongodb.Type = types.StringValue(string(resp.Source.SourceMongodb.Type))
	}
	if resp.Source.SourceMysql != nil {
		r.Source.Mysql = &SourceMysql{}
		r.Source.Mysql.ConnectionID = types.StringValue(resp.Source.SourceMysql.ConnectionID)
		r.Source.Mysql.Database = types.StringPointerValue(resp.Source.SourceMysql.Database)
		r.Source.Mysql.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceMysql.LastUpdatedColumn)
		r.Source.Mysql.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceMysql.LatencyThreshold)
		r.Source.Mysql.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceMysql.PrimaryKeyColumns {
			r.Source.Mysql.PrimaryKeyColumns = append(r.Source.Mysql.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Mysql.Table = types.StringPointerValue(resp.Source.SourceMysql.Table)
		r.Source.Mysql.TableNameFilter = types.StringPointerValue(resp.Source.SourceMysql.TableNameFilter)
		r.Source.Mysql.Type = types.StringValue(string(resp.Source.SourceMysql.Type))
	}
	if resp.Source.SourceMysqlSharded != nil {
		r.Source.MysqlSharded = &SourceMysqlSharded{}
		r.Source.MysqlSharded.ConnectionID = types.StringValue(resp.Source.SourceMysqlSharded.ConnectionID)
		r.Source.MysqlSharded.Database = types.StringPointerValue(resp.Source.SourceMysqlSharded.Database)
		r.Source.MysqlSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceMysqlSharded.LastUpdatedColumn)
		r.Source.MysqlSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceMysqlSharded.LatencyThreshold)
		r.Source.MysqlSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceMysqlSharded.PrimaryKeyColumns {
			r.Source.MysqlSharded.PrimaryKeyColumns = append(r.Source.MysqlSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.MysqlSharded.Table = types.StringPointerValue(resp.Source.SourceMysqlSharded.Table)
		r.Source.MysqlSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceMysqlSharded.TableNameFilter)
		r.Source.MysqlSharded.Type = types.StringValue(string(resp.Source.SourceMysqlSharded.Type))
	}
	if resp.Source.SourceNetsuite != nil {
		r.Source.Netsuite = &SourceNetsuite{}
		r.Source.Netsuite.ConnectionID = types.StringValue(resp.Source.SourceNetsuite.ConnectionID)
		r.Source.Netsuite.Entity = types.StringValue(resp.Source.SourceNetsuite.Entity)
		r.Source.Netsuite.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceNetsuite.LatencyThreshold)
		r.Source.Netsuite.Type = types.StringValue(string(resp.Source.SourceNetsuite.Type))
	}
	if resp.Source.SourceNetsuiteV2 != nil {
		r.Source.NetsuiteV2 = &SourceNetsuiteV2{}
		r.Source.NetsuiteV2.ConnectionID = types.StringValue(resp.Source.SourceNetsuiteV2.ConnectionID)
		r.Source.NetsuiteV2.Entity = types.StringValue(resp.Source.SourceNetsuiteV2.Entity)
		r.Source.NetsuiteV2.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceNetsuiteV2.LatencyThreshold)
		r.Source.NetsuiteV2.Type = types.StringValue(string(resp.Source.SourceNetsuiteV2.Type))
	}
	if resp.Source.SourceOracle != nil {
		r.Source.Oracle = &SourceOracle{}
		r.Source.Oracle.ConnectionID = types.StringValue(resp.Source.SourceOracle.ConnectionID)
		r.Source.Oracle.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceOracle.LastUpdatedColumn)
		r.Source.Oracle.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceOracle.LatencyThreshold)
		r.Source.Oracle.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceOracle.PrimaryKeyColumns {
			r.Source.Oracle.PrimaryKeyColumns = append(r.Source.Oracle.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Oracle.Schema = types.StringPointerValue(resp.Source.SourceOracle.Schema)
		r.Source.Oracle.Table = types.StringPointerValue(resp.Source.SourceOracle.Table)
		r.Source.Oracle.TableNameFilter = types.StringPointerValue(resp.Source.SourceOracle.TableNameFilter)
		r.Source.Oracle.Type = types.StringValue(string(resp.Source.SourceOracle.Type))
	}
	if resp.Source.SourceOracleSharded != nil {
		r.Source.OracleSharded = &SourceOracleSharded{}
		r.Source.OracleSharded.ConnectionID = types.StringValue(resp.Source.SourceOracleSharded.ConnectionID)
		r.Source.OracleSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceOracleSharded.LastUpdatedColumn)
		r.Source.OracleSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceOracleSharded.LatencyThreshold)
		r.Source.OracleSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceOracleSharded.PrimaryKeyColumns {
			r.Source.OracleSharded.PrimaryKeyColumns = append(r.Source.OracleSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.OracleSharded.Schema = types.StringPointerValue(resp.Source.SourceOracleSharded.Schema)
		r.Source.OracleSharded.Table = types.StringPointerValue(resp.Source.SourceOracleSharded.Table)
		r.Source.OracleSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceOracleSharded.TableNameFilter)
		r.Source.OracleSharded.Type = types.StringValue(string(resp.Source.SourceOracleSharded.Type))
	}
	if resp.Source.SourceOutlook != nil {
		r.Source.Outlook = &SourceOutlook{}
		r.Source.Outlook.ConnectionID = types.StringValue(resp.Source.SourceOutlook.ConnectionID)
		r.Source.Outlook.Entity = types.StringValue(resp.Source.SourceOutlook.Entity)
		r.Source.Outlook.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceOutlook.LatencyThreshold)
		r.Source.Outlook.Type = types.StringValue(string(resp.Source.SourceOutlook.Type))
	}
	if resp.Source.SourceOutreach != nil {
		r.Source.Outreach = &SourceOutreach{}
		r.Source.Outreach.ConnectionID = types.StringValue(resp.Source.SourceOutreach.ConnectionID)
		r.Source.Outreach.Entity = types.StringValue(resp.Source.SourceOutreach.Entity)
		r.Source.Outreach.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceOutreach.LatencyThreshold)
		r.Source.Outreach.Type = types.StringValue(string(resp.Source.SourceOutreach.Type))
	}
	if resp.Source.SourcePinterestAds != nil {
		r.Source.PinterestAds = &SourcePinterestAds{}
		r.Source.PinterestAds.Columns = nil
		for _, v := range resp.Source.SourcePinterestAds.Columns {
			r.Source.PinterestAds.Columns = append(r.Source.PinterestAds.Columns, types.StringValue(v))
		}
		r.Source.PinterestAds.ConnectionID = types.StringValue(resp.Source.SourcePinterestAds.ConnectionID)
		r.Source.PinterestAds.Entity = types.StringValue(resp.Source.SourcePinterestAds.Entity)
		r.Source.PinterestAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourcePinterestAds.LatencyThreshold)
		r.Source.PinterestAds.Level = nil
		for _, v := range resp.Source.SourcePinterestAds.Level {
			r.Source.PinterestAds.Level = append(r.Source.PinterestAds.Level, types.StringValue(v))
		}
		r.Source.PinterestAds.TargetingTypes = nil
		for _, v := range resp.Source.SourcePinterestAds.TargetingTypes {
			r.Source.PinterestAds.TargetingTypes = append(r.Source.PinterestAds.TargetingTypes, types.StringValue(v))
		}
		r.Source.PinterestAds.Type = types.StringValue(string(resp.Source.SourcePinterestAds.Type))
	}
	if resp.Source.SourcePostgres != nil {
		r.Source.Postgres = &SourcePostgres{}
		r.Source.Postgres.ConnectionID = types.StringValue(resp.Source.SourcePostgres.ConnectionID)
		r.Source.Postgres.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourcePostgres.LastUpdatedColumn)
		r.Source.Postgres.LatencyThreshold = types.Int64PointerValue(resp.Source.SourcePostgres.LatencyThreshold)
		r.Source.Postgres.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourcePostgres.PrimaryKeyColumns {
			r.Source.Postgres.PrimaryKeyColumns = append(r.Source.Postgres.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Postgres.Schema = types.StringPointerValue(resp.Source.SourcePostgres.Schema)
		r.Source.Postgres.Table = types.StringPointerValue(resp.Source.SourcePostgres.Table)
		r.Source.Postgres.TableNameFilter = types.StringPointerValue(resp.Source.SourcePostgres.TableNameFilter)
		r.Source.Postgres.Type = types.StringValue(string(resp.Source.SourcePostgres.Type))
	}
	if resp.Source.SourcePostgresSharded != nil {
		r.Source.PostgresSharded = &SourcePostgresSharded{}
		r.Source.PostgresSharded.ConnectionID = types.StringValue(resp.Source.SourcePostgresSharded.ConnectionID)
		r.Source.PostgresSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourcePostgresSharded.LastUpdatedColumn)
		r.Source.PostgresSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourcePostgresSharded.LatencyThreshold)
		r.Source.PostgresSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourcePostgresSharded.PrimaryKeyColumns {
			r.Source.PostgresSharded.PrimaryKeyColumns = append(r.Source.PostgresSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.PostgresSharded.Schema = types.StringPointerValue(resp.Source.SourcePostgresSharded.Schema)
		r.Source.PostgresSharded.Table = types.StringPointerValue(resp.Source.SourcePostgresSharded.Table)
		r.Source.PostgresSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourcePostgresSharded.TableNameFilter)
		r.Source.PostgresSharded.Type = types.StringValue(string(resp.Source.SourcePostgresSharded.Type))
	}
	if resp.Source.SourceQuoraAds != nil {
		r.Source.QuoraAds = &SourceQuoraAds{}
		r.Source.QuoraAds.ConnectionID = types.StringValue(resp.Source.SourceQuoraAds.ConnectionID)
		r.Source.QuoraAds.Entity = types.StringValue(resp.Source.SourceQuoraAds.Entity)
		r.Source.QuoraAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceQuoraAds.LatencyThreshold)
		r.Source.QuoraAds.Type = types.StringValue(string(resp.Source.SourceQuoraAds.Type))
	}
	if resp.Source.SourceRaveMedidata != nil {
		r.Source.RaveMedidata = &SourceRaveMedidata{}
		r.Source.RaveMedidata.ConnectionID = types.StringValue(resp.Source.SourceRaveMedidata.ConnectionID)
		r.Source.RaveMedidata.Entity = types.StringValue(resp.Source.SourceRaveMedidata.Entity)
		r.Source.RaveMedidata.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceRaveMedidata.LatencyThreshold)
		r.Source.RaveMedidata.Type = types.StringValue(string(resp.Source.SourceRaveMedidata.Type))
	}
	if resp.Source.SourceRecurly != nil {
		r.Source.Recurly = &SourceRecurly{}
		r.Source.Recurly.ConnectionID = types.StringValue(resp.Source.SourceRecurly.ConnectionID)
		r.Source.Recurly.Entity = types.StringValue(resp.Source.SourceRecurly.Entity)
		r.Source.Recurly.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceRecurly.LatencyThreshold)
		r.Source.Recurly.Type = types.StringValue(string(resp.Source.SourceRecurly.Type))
	}
	if resp.Source.SourceRedshift != nil {
		r.Source.Redshift = &SourceRedshift{}
		r.Source.Redshift.ConnectionID = types.StringValue(resp.Source.SourceRedshift.ConnectionID)
		r.Source.Redshift.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceRedshift.LastUpdatedColumn)
		r.Source.Redshift.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceRedshift.LatencyThreshold)
		r.Source.Redshift.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceRedshift.PrimaryKeyColumns {
			r.Source.Redshift.PrimaryKeyColumns = append(r.Source.Redshift.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Redshift.Schema = types.StringPointerValue(resp.Source.SourceRedshift.Schema)
		r.Source.Redshift.Table = types.StringPointerValue(resp.Source.SourceRedshift.Table)
		r.Source.Redshift.TableNameFilter = types.StringPointerValue(resp.Source.SourceRedshift.TableNameFilter)
		r.Source.Redshift.Type = types.StringValue(string(resp.Source.SourceRedshift.Type))
	}
	if resp.Source.SourceRedshiftSharded != nil {
		r.Source.RedshiftSharded = &SourceRedshiftSharded{}
		r.Source.RedshiftSharded.ConnectionID = types.StringValue(resp.Source.SourceRedshiftSharded.ConnectionID)
		r.Source.RedshiftSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceRedshiftSharded.LastUpdatedColumn)
		r.Source.RedshiftSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceRedshiftSharded.LatencyThreshold)
		r.Source.RedshiftSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceRedshiftSharded.PrimaryKeyColumns {
			r.Source.RedshiftSharded.PrimaryKeyColumns = append(r.Source.RedshiftSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.RedshiftSharded.Schema = types.StringPointerValue(resp.Source.SourceRedshiftSharded.Schema)
		r.Source.RedshiftSharded.Table = types.StringPointerValue(resp.Source.SourceRedshiftSharded.Table)
		r.Source.RedshiftSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceRedshiftSharded.TableNameFilter)
		r.Source.RedshiftSharded.Type = types.StringValue(string(resp.Source.SourceRedshiftSharded.Type))
	}
	if resp.Source.SourceS3Input != nil {
		r.Source.S3Input = &SourceS3Input{}
		r.Source.S3Input.ConnectionID = types.StringValue(resp.Source.SourceS3Input.ConnectionID)
		r.Source.S3Input.FileNameFilter = types.StringPointerValue(resp.Source.SourceS3Input.FileNameFilter)
		r.Source.S3Input.FilesCanChange = types.BoolPointerValue(resp.Source.SourceS3Input.FilesCanChange)
		r.Source.S3Input.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceS3Input.LatencyThreshold)
		if resp.Source.SourceS3Input.LowWatermark != nil {
			r.Source.S3Input.LowWatermark = types.StringValue(resp.Source.SourceS3Input.LowWatermark.String())
		} else {
			r.Source.S3Input.LowWatermark = types.StringNull()
		}
		r.Source.S3Input.NewFileBehavior = types.StringValue(string(resp.Source.SourceS3Input.NewFileBehavior))
		r.Source.S3Input.Paths = nil
		for _, v := range resp.Source.SourceS3Input.Paths {
			r.Source.S3Input.Paths = append(r.Source.S3Input.Paths, types.StringValue(v))
		}
		r.Source.S3Input.TriggeredByEvent = types.BoolPointerValue(resp.Source.SourceS3Input.TriggeredByEvent)
		r.Source.S3Input.Type = types.StringValue(string(resp.Source.SourceS3Input.Type))
	}
	if resp.Source.SourceS3Legacy != nil {
		r.Source.S3Legacy = &SourceS3Legacy{}
		r.Source.S3Legacy.ConnectionID = types.StringValue(resp.Source.SourceS3Legacy.ConnectionID)
		r.Source.S3Legacy.FileNameFilter = types.StringPointerValue(resp.Source.SourceS3Legacy.FileNameFilter)
		r.Source.S3Legacy.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceS3Legacy.LatencyThreshold)
		if resp.Source.SourceS3Legacy.LowWatermark != nil {
			r.Source.S3Legacy.LowWatermark = types.StringValue(resp.Source.SourceS3Legacy.LowWatermark.String())
		} else {
			r.Source.S3Legacy.LowWatermark = types.StringNull()
		}
		r.Source.S3Legacy.NewFileBehavior = types.StringValue(string(resp.Source.SourceS3Legacy.NewFileBehavior))
		r.Source.S3Legacy.Paths = nil
		for _, v := range resp.Source.SourceS3Legacy.Paths {
			r.Source.S3Legacy.Paths = append(r.Source.S3Legacy.Paths, types.StringValue(v))
		}
		r.Source.S3Legacy.Type = types.StringValue(string(resp.Source.SourceS3Legacy.Type))
	}
	if resp.Source.SourceSalesforce != nil {
		r.Source.Salesforce = &SourceSalesforce{}
		r.Source.Salesforce.ConnectionID = types.StringValue(resp.Source.SourceSalesforce.ConnectionID)
		r.Source.Salesforce.Entity = types.StringValue(resp.Source.SourceSalesforce.Entity)
		r.Source.Salesforce.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSalesforce.LatencyThreshold)
		r.Source.Salesforce.Type = types.StringValue(string(resp.Source.SourceSalesforce.Type))
	}
	if resp.Source.SourceSalesforceMarketingCloud != nil {
		r.Source.SalesforceMarketingCloud = &SourceSalesforceMarketingCloud{}
		r.Source.SalesforceMarketingCloud.ConnectionID = types.StringValue(resp.Source.SourceSalesforceMarketingCloud.ConnectionID)
		r.Source.SalesforceMarketingCloud.Entity = types.StringValue(resp.Source.SourceSalesforceMarketingCloud.Entity)
		r.Source.SalesforceMarketingCloud.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSalesforceMarketingCloud.LatencyThreshold)
		r.Source.SalesforceMarketingCloud.Type = types.StringValue(string(resp.Source.SourceSalesforceMarketingCloud.Type))
	}
	if resp.Source.SourceSapConcur != nil {
		r.Source.SapConcur = &SourceSapConcur{}
		r.Source.SapConcur.ConnectionID = types.StringValue(resp.Source.SourceSapConcur.ConnectionID)
		r.Source.SapConcur.Entity = types.StringValue(resp.Source.SourceSapConcur.Entity)
		r.Source.SapConcur.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSapConcur.LatencyThreshold)
		r.Source.SapConcur.Type = types.StringValue(string(resp.Source.SourceSapConcur.Type))
	}
	if resp.Source.SourceSapHana != nil {
		r.Source.SapHana = &SourceSapHana{}
		r.Source.SapHana.ConnectionID = types.StringValue(resp.Source.SourceSapHana.ConnectionID)
		r.Source.SapHana.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceSapHana.LastUpdatedColumn)
		r.Source.SapHana.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSapHana.LatencyThreshold)
		r.Source.SapHana.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceSapHana.PrimaryKeyColumns {
			r.Source.SapHana.PrimaryKeyColumns = append(r.Source.SapHana.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.SapHana.Schema = types.StringPointerValue(resp.Source.SourceSapHana.Schema)
		r.Source.SapHana.Table = types.StringPointerValue(resp.Source.SourceSapHana.Table)
		r.Source.SapHana.TableNameFilter = types.StringPointerValue(resp.Source.SourceSapHana.TableNameFilter)
		r.Source.SapHana.Type = types.StringValue(string(resp.Source.SourceSapHana.Type))
	}
	if resp.Source.SourceSapHanaSharded != nil {
		r.Source.SapHanaSharded = &SourceSapHanaSharded{}
		r.Source.SapHanaSharded.ConnectionID = types.StringValue(resp.Source.SourceSapHanaSharded.ConnectionID)
		r.Source.SapHanaSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceSapHanaSharded.LastUpdatedColumn)
		r.Source.SapHanaSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSapHanaSharded.LatencyThreshold)
		r.Source.SapHanaSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceSapHanaSharded.PrimaryKeyColumns {
			r.Source.SapHanaSharded.PrimaryKeyColumns = append(r.Source.SapHanaSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.SapHanaSharded.Schema = types.StringPointerValue(resp.Source.SourceSapHanaSharded.Schema)
		r.Source.SapHanaSharded.Table = types.StringPointerValue(resp.Source.SourceSapHanaSharded.Table)
		r.Source.SapHanaSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceSapHanaSharded.TableNameFilter)
		r.Source.SapHanaSharded.Type = types.StringValue(string(resp.Source.SourceSapHanaSharded.Type))
	}
	if resp.Source.SourceSeismic != nil {
		r.Source.Seismic = &SourceSeismic{}
		r.Source.Seismic.ConnectionID = types.StringValue(resp.Source.SourceSeismic.ConnectionID)
		r.Source.Seismic.Entity = types.StringValue(resp.Source.SourceSeismic.Entity)
		r.Source.Seismic.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSeismic.LatencyThreshold)
		r.Source.Seismic.Type = types.StringValue(string(resp.Source.SourceSeismic.Type))
	}
	if resp.Source.SourceServiceNow != nil {
		r.Source.ServiceNow = &SourceServiceNow{}
		r.Source.ServiceNow.ConnectionID = types.StringValue(resp.Source.SourceServiceNow.ConnectionID)
		r.Source.ServiceNow.Entity = types.StringValue(resp.Source.SourceServiceNow.Entity)
		r.Source.ServiceNow.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceServiceNow.LatencyThreshold)
		r.Source.ServiceNow.Type = types.StringValue(string(resp.Source.SourceServiceNow.Type))
	}
	if resp.Source.SourceSftp != nil {
		r.Source.Sftp = &SourceSftp{}
		r.Source.Sftp.ConnectionID = types.StringValue(resp.Source.SourceSftp.ConnectionID)
		r.Source.Sftp.FileNameFilter = types.StringPointerValue(resp.Source.SourceSftp.FileNameFilter)
		r.Source.Sftp.GlobPattern = types.StringPointerValue(resp.Source.SourceSftp.GlobPattern)
		r.Source.Sftp.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSftp.LatencyThreshold)
		if resp.Source.SourceSftp.LowWatermark != nil {
			r.Source.Sftp.LowWatermark = types.StringValue(resp.Source.SourceSftp.LowWatermark.String())
		} else {
			r.Source.Sftp.LowWatermark = types.StringNull()
		}
		r.Source.Sftp.NewFileBehavior = types.StringValue(string(resp.Source.SourceSftp.NewFileBehavior))
		r.Source.Sftp.Paths = nil
		for _, v := range resp.Source.SourceSftp.Paths {
			r.Source.Sftp.Paths = append(r.Source.Sftp.Paths, types.StringValue(v))
		}
		r.Source.Sftp.Type = types.StringValue(string(resp.Source.SourceSftp.Type))
	}
	if resp.Source.SourceShopify != nil {
		r.Source.Shopify = &SourceShopify{}
		r.Source.Shopify.ConnectionID = types.StringValue(resp.Source.SourceShopify.ConnectionID)
		r.Source.Shopify.Entity = types.StringValue(resp.Source.SourceShopify.Entity)
		r.Source.Shopify.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceShopify.LatencyThreshold)
		r.Source.Shopify.Type = types.StringValue(string(resp.Source.SourceShopify.Type))
	}
	if resp.Source.SourceSkyward != nil {
		r.Source.Skyward = &SourceSkyward{}
		r.Source.Skyward.ConnectionID = types.StringValue(resp.Source.SourceSkyward.ConnectionID)
		r.Source.Skyward.Entity = types.StringValue(resp.Source.SourceSkyward.Entity)
		r.Source.Skyward.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSkyward.LatencyThreshold)
		r.Source.Skyward.Type = types.StringValue(string(resp.Source.SourceSkyward.Type))
	}
	if resp.Source.SourceSnapchatAds != nil {
		r.Source.SnapchatAds = &SourceSnapchatAds{}
		r.Source.SnapchatAds.AdditionalMetrics = nil
		for _, v := range resp.Source.SourceSnapchatAds.AdditionalMetrics {
			r.Source.SnapchatAds.AdditionalMetrics = append(r.Source.SnapchatAds.AdditionalMetrics, types.StringValue(v))
		}
		r.Source.SnapchatAds.Breakdown = types.StringPointerValue(resp.Source.SourceSnapchatAds.Breakdown)
		r.Source.SnapchatAds.ConnectionID = types.StringValue(resp.Source.SourceSnapchatAds.ConnectionID)
		r.Source.SnapchatAds.Entity = types.StringValue(resp.Source.SourceSnapchatAds.Entity)
		r.Source.SnapchatAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSnapchatAds.LatencyThreshold)
		r.Source.SnapchatAds.Metrics = nil
		for _, v := range resp.Source.SourceSnapchatAds.Metrics {
			r.Source.SnapchatAds.Metrics = append(r.Source.SnapchatAds.Metrics, types.StringValue(v))
		}
		r.Source.SnapchatAds.ReportDimension = nil
		for _, v := range resp.Source.SourceSnapchatAds.ReportDimension {
			r.Source.SnapchatAds.ReportDimension = append(r.Source.SnapchatAds.ReportDimension, types.StringValue(v))
		}
		r.Source.SnapchatAds.Type = types.StringValue(string(resp.Source.SourceSnapchatAds.Type))
	}
	if resp.Source.SourceSnowflake != nil {
		r.Source.Snowflake = &SourceSnowflake{}
		r.Source.Snowflake.ConnectionID = types.StringValue(resp.Source.SourceSnowflake.ConnectionID)
		r.Source.Snowflake.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceSnowflake.LastUpdatedColumn)
		r.Source.Snowflake.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSnowflake.LatencyThreshold)
		r.Source.Snowflake.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceSnowflake.PrimaryKeyColumns {
			r.Source.Snowflake.PrimaryKeyColumns = append(r.Source.Snowflake.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Snowflake.Schema = types.StringPointerValue(resp.Source.SourceSnowflake.Schema)
		r.Source.Snowflake.Table = types.StringPointerValue(resp.Source.SourceSnowflake.Table)
		r.Source.Snowflake.TableNameFilter = types.StringPointerValue(resp.Source.SourceSnowflake.TableNameFilter)
		r.Source.Snowflake.Type = types.StringValue(string(resp.Source.SourceSnowflake.Type))
	}
	if resp.Source.SourceSnowflakeSharded != nil {
		r.Source.SnowflakeSharded = &SourceSnowflakeSharded{}
		r.Source.SnowflakeSharded.ConnectionID = types.StringValue(resp.Source.SourceSnowflakeSharded.ConnectionID)
		r.Source.SnowflakeSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceSnowflakeSharded.LastUpdatedColumn)
		r.Source.SnowflakeSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSnowflakeSharded.LatencyThreshold)
		r.Source.SnowflakeSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceSnowflakeSharded.PrimaryKeyColumns {
			r.Source.SnowflakeSharded.PrimaryKeyColumns = append(r.Source.SnowflakeSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.SnowflakeSharded.Schema = types.StringPointerValue(resp.Source.SourceSnowflakeSharded.Schema)
		r.Source.SnowflakeSharded.Table = types.StringPointerValue(resp.Source.SourceSnowflakeSharded.Table)
		r.Source.SnowflakeSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceSnowflakeSharded.TableNameFilter)
		r.Source.SnowflakeSharded.Type = types.StringValue(string(resp.Source.SourceSnowflakeSharded.Type))
	}
	if resp.Source.SourceSQLServer != nil {
		r.Source.SQLServer = &SourceSQLServer{}
		r.Source.SQLServer.ConnectionID = types.StringValue(resp.Source.SourceSQLServer.ConnectionID)
		r.Source.SQLServer.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceSQLServer.LastUpdatedColumn)
		r.Source.SQLServer.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSQLServer.LatencyThreshold)
		r.Source.SQLServer.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceSQLServer.PrimaryKeyColumns {
			r.Source.SQLServer.PrimaryKeyColumns = append(r.Source.SQLServer.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.SQLServer.Schema = types.StringPointerValue(resp.Source.SourceSQLServer.Schema)
		r.Source.SQLServer.Table = types.StringPointerValue(resp.Source.SourceSQLServer.Table)
		r.Source.SQLServer.TableNameFilter = types.StringPointerValue(resp.Source.SourceSQLServer.TableNameFilter)
		r.Source.SQLServer.Type = types.StringValue(string(resp.Source.SourceSQLServer.Type))
	}
	if resp.Source.SourceSQLServerSharded != nil {
		r.Source.SQLServerSharded = &SourceSQLServerSharded{}
		r.Source.SQLServerSharded.ConnectionID = types.StringValue(resp.Source.SourceSQLServerSharded.ConnectionID)
		r.Source.SQLServerSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceSQLServerSharded.LastUpdatedColumn)
		r.Source.SQLServerSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSQLServerSharded.LatencyThreshold)
		r.Source.SQLServerSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceSQLServerSharded.PrimaryKeyColumns {
			r.Source.SQLServerSharded.PrimaryKeyColumns = append(r.Source.SQLServerSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.SQLServerSharded.Schema = types.StringPointerValue(resp.Source.SourceSQLServerSharded.Schema)
		r.Source.SQLServerSharded.Table = types.StringPointerValue(resp.Source.SourceSQLServerSharded.Table)
		r.Source.SQLServerSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceSQLServerSharded.TableNameFilter)
		r.Source.SQLServerSharded.Type = types.StringValue(string(resp.Source.SourceSQLServerSharded.Type))
	}
	if resp.Source.SourceSquare != nil {
		r.Source.Square = &SourceSquare{}
		r.Source.Square.ConnectionID = types.StringValue(resp.Source.SourceSquare.ConnectionID)
		r.Source.Square.Entity = types.StringValue(resp.Source.SourceSquare.Entity)
		r.Source.Square.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSquare.LatencyThreshold)
		r.Source.Square.Type = types.StringValue(string(resp.Source.SourceSquare.Type))
	}
	if resp.Source.SourceStreaming != nil {
		r.Source.Streaming = &SourceStreaming{}
		r.Source.Streaming.ConnectionID = types.StringValue(resp.Source.SourceStreaming.ConnectionID)
		r.Source.Streaming.FileNameFilter = types.StringPointerValue(resp.Source.SourceStreaming.FileNameFilter)
		r.Source.Streaming.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceStreaming.LatencyThreshold)
		if resp.Source.SourceStreaming.LowWatermark != nil {
			r.Source.Streaming.LowWatermark = types.StringValue(resp.Source.SourceStreaming.LowWatermark.String())
		} else {
			r.Source.Streaming.LowWatermark = types.StringNull()
		}
		r.Source.Streaming.NewFileBehavior = types.StringValue(string(resp.Source.SourceStreaming.NewFileBehavior))
		r.Source.Streaming.Paths = nil
		for _, v := range resp.Source.SourceStreaming.Paths {
			r.Source.Streaming.Paths = append(r.Source.Streaming.Paths, types.StringValue(v))
		}
		r.Source.Streaming.Type = types.StringValue(string(resp.Source.SourceStreaming.Type))
	}
	if resp.Source.SourceStripe != nil {
		r.Source.Stripe = &SourceStripe{}
		r.Source.Stripe.ConnectionID = types.StringValue(resp.Source.SourceStripe.ConnectionID)
		r.Source.Stripe.Entity = types.StringValue(resp.Source.SourceStripe.Entity)
		r.Source.Stripe.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceStripe.LatencyThreshold)
		r.Source.Stripe.Type = types.StringValue(string(resp.Source.SourceStripe.Type))
	}
	if resp.Source.SourceSumTotal != nil {
		r.Source.Sumtotal = &SourceSumTotal{}
		r.Source.Sumtotal.ConnectionID = types.StringValue(resp.Source.SourceSumTotal.ConnectionID)
		r.Source.Sumtotal.Entity = types.StringValue(resp.Source.SourceSumTotal.Entity)
		r.Source.Sumtotal.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSumTotal.LatencyThreshold)
		r.Source.Sumtotal.Type = types.StringValue(string(resp.Source.SourceSumTotal.Type))
	}
	if resp.Source.SourceTheTradeDesk != nil {
		r.Source.TheTradeDesk = &SourceTheTradeDesk{}
		r.Source.TheTradeDesk.ConnectionID = types.StringValue(resp.Source.SourceTheTradeDesk.ConnectionID)
		r.Source.TheTradeDesk.Entity = types.StringValue(resp.Source.SourceTheTradeDesk.Entity)
		r.Source.TheTradeDesk.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceTheTradeDesk.LatencyThreshold)
		r.Source.TheTradeDesk.Type = types.StringValue(string(resp.Source.SourceTheTradeDesk.Type))
	}
	if resp.Source.SourceTikTokAds != nil {
		r.Source.TikTokAds = &SourceTikTokAds{}
		r.Source.TikTokAds.ConnectionID = types.StringValue(resp.Source.SourceTikTokAds.ConnectionID)
		r.Source.TikTokAds.DataLevel = types.StringPointerValue(resp.Source.SourceTikTokAds.DataLevel)
		r.Source.TikTokAds.Dimensions = nil
		for _, v := range resp.Source.SourceTikTokAds.Dimensions {
			r.Source.TikTokAds.Dimensions = append(r.Source.TikTokAds.Dimensions, types.StringValue(v))
		}
		r.Source.TikTokAds.Entity = types.StringValue(resp.Source.SourceTikTokAds.Entity)
		r.Source.TikTokAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceTikTokAds.LatencyThreshold)
		r.Source.TikTokAds.Metrics = nil
		for _, v := range resp.Source.SourceTikTokAds.Metrics {
			r.Source.TikTokAds.Metrics = append(r.Source.TikTokAds.Metrics, types.StringValue(v))
		}
		r.Source.TikTokAds.Type = types.StringValue(string(resp.Source.SourceTikTokAds.Type))
	}
	if resp.Source.SourceTwilio != nil {
		r.Source.Twilio = &SourceTwilio{}
		r.Source.Twilio.ConnectionID = types.StringValue(resp.Source.SourceTwilio.ConnectionID)
		r.Source.Twilio.Entity = types.StringValue(resp.Source.SourceTwilio.Entity)
		r.Source.Twilio.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceTwilio.LatencyThreshold)
		r.Source.Twilio.Type = types.StringValue(string(resp.Source.SourceTwilio.Type))
	}
	if resp.Source.SourceTwitter != nil {
		r.Source.TwitterAds = &SourceTwitter{}
		r.Source.TwitterAds.ConnectionID = types.StringValue(resp.Source.SourceTwitter.ConnectionID)
		r.Source.TwitterAds.Entity = types.StringValue(resp.Source.SourceTwitter.Entity)
		r.Source.TwitterAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceTwitter.LatencyThreshold)
		r.Source.TwitterAds.Type = types.StringValue(string(resp.Source.SourceTwitter.Type))
	}
	if resp.Source.SourceUserDefinedAPI != nil {
		r.Source.UserDefinedAPI = &SourceUserDefinedAPI{}
		r.Source.UserDefinedAPI.ConnectionID = types.StringValue(resp.Source.SourceUserDefinedAPI.ConnectionID)
		r.Source.UserDefinedAPI.Entity = types.StringValue(resp.Source.SourceUserDefinedAPI.Entity)
		r.Source.UserDefinedAPI.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceUserDefinedAPI.LatencyThreshold)
		r.Source.UserDefinedAPI.Type = types.StringValue(string(resp.Source.SourceUserDefinedAPI.Type))
	}
	if resp.Source.SourceUserVoice != nil {
		r.Source.Uservoice = &SourceUserVoice{}
		r.Source.Uservoice.ConnectionID = types.StringValue(resp.Source.SourceUserVoice.ConnectionID)
		r.Source.Uservoice.Entity = types.StringValue(resp.Source.SourceUserVoice.Entity)
		r.Source.Uservoice.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceUserVoice.LatencyThreshold)
		r.Source.Uservoice.Type = types.StringValue(string(resp.Source.SourceUserVoice.Type))
	}
	if resp.Source.SourceVeeva != nil {
		r.Source.Veeva = &SourceVeeva{}
		r.Source.Veeva.ConnectionID = types.StringValue(resp.Source.SourceVeeva.ConnectionID)
		r.Source.Veeva.Entity = types.StringValue(resp.Source.SourceVeeva.Entity)
		r.Source.Veeva.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceVeeva.LatencyThreshold)
		r.Source.Veeva.Type = types.StringValue(string(resp.Source.SourceVeeva.Type))
	}
	if resp.Source.SourceVerizonMediaDsp != nil {
		r.Source.VerizonMediaDsp = &SourceVerizonMediaDsp{}
		r.Source.VerizonMediaDsp.ConnectionID = types.StringValue(resp.Source.SourceVerizonMediaDsp.ConnectionID)
		r.Source.VerizonMediaDsp.Dimensions = nil
		for _, v := range resp.Source.SourceVerizonMediaDsp.Dimensions {
			r.Source.VerizonMediaDsp.Dimensions = append(r.Source.VerizonMediaDsp.Dimensions, types.StringValue(v))
		}
		r.Source.VerizonMediaDsp.Entity = types.StringValue(resp.Source.SourceVerizonMediaDsp.Entity)
		r.Source.VerizonMediaDsp.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceVerizonMediaDsp.LatencyThreshold)
		r.Source.VerizonMediaDsp.Metrics = nil
		for _, v := range resp.Source.SourceVerizonMediaDsp.Metrics {
			r.Source.VerizonMediaDsp.Metrics = append(r.Source.VerizonMediaDsp.Metrics, types.StringValue(v))
		}
		r.Source.VerizonMediaDsp.Type = types.StringValue(string(resp.Source.SourceVerizonMediaDsp.Type))
	}
	if resp.Source.SourceWorkdayReport != nil {
		r.Source.WorkdayReport = &SourceWorkdayReport{}
		r.Source.WorkdayReport.ConnectionID = types.StringValue(resp.Source.SourceWorkdayReport.ConnectionID)
		r.Source.WorkdayReport.Entity = types.StringValue(resp.Source.SourceWorkdayReport.Entity)
		r.Source.WorkdayReport.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceWorkdayReport.LatencyThreshold)
		r.Source.WorkdayReport.Type = types.StringValue(string(resp.Source.SourceWorkdayReport.Type))
	}
	if resp.Source.SourceWorkfront != nil {
		r.Source.Workfront = &SourceWorkfront{}
		r.Source.Workfront.ConnectionID = types.StringValue(resp.Source.SourceWorkfront.ConnectionID)
		r.Source.Workfront.Entity = types.StringValue(resp.Source.SourceWorkfront.Entity)
		r.Source.Workfront.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceWorkfront.LatencyThreshold)
		r.Source.Workfront.Type = types.StringValue(string(resp.Source.SourceWorkfront.Type))
	}
	if resp.Source.SourceZendesk != nil {
		r.Source.Zendesk = &SourceZendesk{}
		r.Source.Zendesk.ConnectionID = types.StringValue(resp.Source.SourceZendesk.ConnectionID)
		r.Source.Zendesk.Entity = types.StringValue(resp.Source.SourceZendesk.Entity)
		r.Source.Zendesk.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceZendesk.LatencyThreshold)
		r.Source.Zendesk.Type = types.StringValue(string(resp.Source.SourceZendesk.Type))
	}
	if resp.Source.SourceZoomPhone != nil {
		r.Source.ZoomPhone = &SourceZoomPhone{}
		r.Source.ZoomPhone.ConnectionID = types.StringValue(resp.Source.SourceZoomPhone.ConnectionID)
		r.Source.ZoomPhone.Entity = types.StringValue(resp.Source.SourceZoomPhone.Entity)
		r.Source.ZoomPhone.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceZoomPhone.LatencyThreshold)
		r.Source.ZoomPhone.Type = types.StringValue(string(resp.Source.SourceZoomPhone.Type))
	}
	if resp.Source.SourceZuora != nil {
		r.Source.Zuora = &SourceZuora{}
		r.Source.Zuora.ConnectionID = types.StringValue(resp.Source.SourceZuora.ConnectionID)
		r.Source.Zuora.Entity = types.StringValue(resp.Source.SourceZuora.Entity)
		r.Source.Zuora.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceZuora.LatencyThreshold)
		r.Source.Zuora.Type = types.StringValue(string(resp.Source.SourceZuora.Type))
	}
	if resp.StopReason != nil {
		r.StopReason = types.StringValue(string(*resp.StopReason))
	} else {
		r.StopReason = types.StringNull()
	}
	if resp.UpdateSchedule == nil {
		r.UpdateSchedule = nil
	} else {
		r.UpdateSchedule = &UpdateScheduleTypes{}
		if resp.UpdateSchedule.UpdateScheduleModeDaily != nil {
			r.UpdateSchedule.Daily = &UpdateScheduleModeDaily{}
			r.UpdateSchedule.Daily.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeDaily.HourOfDay)
			r.UpdateSchedule.Daily.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeDaily.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeHourly != nil {
			r.UpdateSchedule.Hourly = &UpdateScheduleModeHourly{}
			r.UpdateSchedule.Hourly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeHourly.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeInterval != nil {
			r.UpdateSchedule.Interval = &UpdateScheduleModeInterval{}
			r.UpdateSchedule.Interval.IntervalMinutes = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeInterval.IntervalMinutes)
			r.UpdateSchedule.Interval.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeInterval.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeMonthly != nil {
			r.UpdateSchedule.Monthly = &UpdateScheduleModeMonthly{}
			r.UpdateSchedule.Monthly.DayOfMonth = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeMonthly.DayOfMonth)
			r.UpdateSchedule.Monthly.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeMonthly.HourOfDay)
			r.UpdateSchedule.Monthly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeMonthly.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeWeekly != nil {
			r.UpdateSchedule.Weekly = &UpdateScheduleModeWeekly{}
			r.UpdateSchedule.Weekly.DayOfWeek = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeWeekly.DayOfWeek)
			r.UpdateSchedule.Weekly.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeWeekly.HourOfDay)
			r.UpdateSchedule.Weekly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeWeekly.Mode))
		}
	}
}

func (r *PipelineResourceModel) ToSharedPipelineUpdate() *shared.PipelineUpdate {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	paused := new(bool)
	if !r.Paused.IsUnknown() && !r.Paused.IsNull() {
		*paused = r.Paused.ValueBool()
	} else {
		paused = nil
	}
	var shares []string = nil
	for _, sharesItem := range r.Shares {
		shares = append(shares, sharesItem.ValueString())
	}
	var parsingErrorSettings *shared.PipelineUpdateParsingErrorSettings
	if r.ParsingErrorSettings != nil {
		threshold, _ := r.ParsingErrorSettings.Threshold.ValueBigFloat().Float64()
		action := shared.PipelineUpdateAction(r.ParsingErrorSettings.Action.ValueString())
		parsingErrorSettings = &shared.PipelineUpdateParsingErrorSettings{
			Threshold: threshold,
			Action:    action,
		}
	}
	var updateSchedule *shared.PipelineUpdateUpdateScheduleTypes
	if r.UpdateSchedule != nil {
		var intervalUpdateScheduleMode *shared.IntervalUpdateScheduleMode
		if r.UpdateSchedule.Interval != nil {
			mode := shared.UpdateScheduleTypesMode(r.UpdateSchedule.Interval.Mode.ValueString())
			intervalMinutes := r.UpdateSchedule.Interval.IntervalMinutes.ValueInt64()
			intervalUpdateScheduleMode = &shared.IntervalUpdateScheduleMode{
				Mode:            mode,
				IntervalMinutes: intervalMinutes,
			}
		}
		if intervalUpdateScheduleMode != nil {
			updateSchedule = &shared.PipelineUpdateUpdateScheduleTypes{
				IntervalUpdateScheduleMode: intervalUpdateScheduleMode,
			}
		}
		var hourlyUpdateScheduleMode *shared.HourlyUpdateScheduleMode
		if r.UpdateSchedule.Hourly != nil {
			mode1 := shared.UpdateScheduleModeHourlyUpdateScheduleTypesMode(r.UpdateSchedule.Hourly.Mode.ValueString())
			hourlyUpdateScheduleMode = &shared.HourlyUpdateScheduleMode{
				Mode: mode1,
			}
		}
		if hourlyUpdateScheduleMode != nil {
			updateSchedule = &shared.PipelineUpdateUpdateScheduleTypes{
				HourlyUpdateScheduleMode: hourlyUpdateScheduleMode,
			}
		}
		var dailyUpdateScheduleMode *shared.DailyUpdateScheduleMode
		if r.UpdateSchedule.Daily != nil {
			mode2 := shared.UpdateScheduleModeDailyUpdateScheduleTypesMode(r.UpdateSchedule.Daily.Mode.ValueString())
			hourOfDay := r.UpdateSchedule.Daily.HourOfDay.ValueInt64()
			dailyUpdateScheduleMode = &shared.DailyUpdateScheduleMode{
				Mode:      mode2,
				HourOfDay: hourOfDay,
			}
		}
		if dailyUpdateScheduleMode != nil {
			updateSchedule = &shared.PipelineUpdateUpdateScheduleTypes{
				DailyUpdateScheduleMode: dailyUpdateScheduleMode,
			}
		}
		var weeklyUpdateScheduleMode *shared.WeeklyUpdateScheduleMode
		if r.UpdateSchedule.Weekly != nil {
			mode3 := shared.UpdateScheduleModeWeeklyUpdateScheduleTypesMode(r.UpdateSchedule.Weekly.Mode.ValueString())
			dayOfWeek := r.UpdateSchedule.Weekly.DayOfWeek.ValueInt64()
			hourOfDay1 := r.UpdateSchedule.Weekly.HourOfDay.ValueInt64()
			weeklyUpdateScheduleMode = &shared.WeeklyUpdateScheduleMode{
				Mode:      mode3,
				DayOfWeek: dayOfWeek,
				HourOfDay: hourOfDay1,
			}
		}
		if weeklyUpdateScheduleMode != nil {
			updateSchedule = &shared.PipelineUpdateUpdateScheduleTypes{
				WeeklyUpdateScheduleMode: weeklyUpdateScheduleMode,
			}
		}
		var monthlyUpdateScheduleMode *shared.MonthlyUpdateScheduleMode
		if r.UpdateSchedule.Monthly != nil {
			mode4 := shared.UpdateScheduleModeMonthlyUpdateScheduleTypesMode(r.UpdateSchedule.Monthly.Mode.ValueString())
			dayOfMonth := r.UpdateSchedule.Monthly.DayOfMonth.ValueInt64()
			hourOfDay2 := r.UpdateSchedule.Monthly.HourOfDay.ValueInt64()
			monthlyUpdateScheduleMode = &shared.MonthlyUpdateScheduleMode{
				Mode:       mode4,
				DayOfMonth: dayOfMonth,
				HourOfDay:  hourOfDay2,
			}
		}
		if monthlyUpdateScheduleMode != nil {
			updateSchedule = &shared.PipelineUpdateUpdateScheduleTypes{
				MonthlyUpdateScheduleMode: monthlyUpdateScheduleMode,
			}
		}
	}
	var refreshSchedule *shared.ScheduleTypes
	var neverScheduleMode *shared.NeverScheduleMode
	if r.RefreshSchedule.Never != nil {
		mode5 := shared.ScheduleTypesMode(r.RefreshSchedule.Never.Mode.ValueString())
		neverScheduleMode = &shared.NeverScheduleMode{
			Mode: mode5,
		}
	}
	if neverScheduleMode != nil {
		refreshSchedule = &shared.ScheduleTypes{
			NeverScheduleMode: neverScheduleMode,
		}
	}
	var hourlyScheduleMode *shared.HourlyScheduleMode
	if r.RefreshSchedule.Hourly != nil {
		mode6 := shared.RefreshScheduleModeHourlyScheduleTypesMode(r.RefreshSchedule.Hourly.Mode.ValueString())
		hourlyScheduleMode = &shared.HourlyScheduleMode{
			Mode: mode6,
		}
	}
	if hourlyScheduleMode != nil {
		refreshSchedule = &shared.ScheduleTypes{
			HourlyScheduleMode: hourlyScheduleMode,
		}
	}
	var dailyScheduleMode *shared.DailyScheduleMode
	if r.RefreshSchedule.Daily != nil {
		mode7 := shared.RefreshScheduleModeDailyScheduleTypesMode(r.RefreshSchedule.Daily.Mode.ValueString())
		hourOfDay3 := r.RefreshSchedule.Daily.HourOfDay.ValueInt64()
		dailyScheduleMode = &shared.DailyScheduleMode{
			Mode:      mode7,
			HourOfDay: hourOfDay3,
		}
	}
	if dailyScheduleMode != nil {
		refreshSchedule = &shared.ScheduleTypes{
			DailyScheduleMode: dailyScheduleMode,
		}
	}
	var weeklyScheduleMode *shared.WeeklyScheduleMode
	if r.RefreshSchedule.Weekly != nil {
		mode8 := shared.RefreshScheduleModeWeeklyScheduleTypesMode(r.RefreshSchedule.Weekly.Mode.ValueString())
		dayOfWeek1 := r.RefreshSchedule.Weekly.DayOfWeek.ValueInt64()
		hourOfDay4 := r.RefreshSchedule.Weekly.HourOfDay.ValueInt64()
		weeklyScheduleMode = &shared.WeeklyScheduleMode{
			Mode:      mode8,
			DayOfWeek: dayOfWeek1,
			HourOfDay: hourOfDay4,
		}
	}
	if weeklyScheduleMode != nil {
		refreshSchedule = &shared.ScheduleTypes{
			WeeklyScheduleMode: weeklyScheduleMode,
		}
	}
	var monthlyScheduleMode *shared.MonthlyScheduleMode
	if r.RefreshSchedule.Monthly != nil {
		mode9 := shared.RefreshScheduleModeMonthlyScheduleTypesMode(r.RefreshSchedule.Monthly.Mode.ValueString())
		dayOfMonth1 := r.RefreshSchedule.Monthly.DayOfMonth.ValueInt64()
		hourOfDay5 := r.RefreshSchedule.Monthly.HourOfDay.ValueInt64()
		monthlyScheduleMode = &shared.MonthlyScheduleMode{
			Mode:       mode9,
			DayOfMonth: dayOfMonth1,
			HourOfDay:  hourOfDay5,
		}
	}
	if monthlyScheduleMode != nil {
		refreshSchedule = &shared.ScheduleTypes{
			MonthlyScheduleMode: monthlyScheduleMode,
		}
	}
	out := shared.PipelineUpdate{
		Name:                 name,
		Paused:               paused,
		Shares:               shares,
		ParsingErrorSettings: parsingErrorSettings,
		UpdateSchedule:       updateSchedule,
		RefreshSchedule:      refreshSchedule,
	}
	return &out
}

func (r *PipelineResourceModel) ToSharedPipelineDelete() *shared.PipelineDelete {
	deletionOfExportProducts := new(bool)
	if !r.DeletionOfExportProducts.IsUnknown() && !r.DeletionOfExportProducts.IsNull() {
		*deletionOfExportProducts = r.DeletionOfExportProducts.ValueBool()
	} else {
		deletionOfExportProducts = nil
	}
	out := shared.PipelineDelete{
		DeletionOfExportProducts: deletionOfExportProducts,
	}
	return &out
}
