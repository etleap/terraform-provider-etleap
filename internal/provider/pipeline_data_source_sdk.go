// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"
)

func (r *PipelineDataSourceModel) RefreshFromSharedPipelineOutput(resp *shared.PipelineOutput) {
	r.CreateDate = types.StringValue(resp.CreateDate.Format(time.RFC3339Nano))
	if len(r.Destinations) > len(resp.Destinations) {
		r.Destinations = r.Destinations[:len(resp.Destinations)]
	}
	for destinationsCount, destinationsItem := range resp.Destinations {
		var destinations1 DestinationInfoAndPipelineVersions
		destinations1.CurrentVersion = types.Int64Value(destinationsItem.CurrentVersion)
		if destinationsItem.Destination.DestinationDeltaLake != nil {
			destinations1.Destination.DeltaLake = &DestinationDeltaLake{}
			destinations1.Destination.DeltaLake.AutomaticSchemaChanges = types.BoolPointerValue(destinationsItem.Destination.DestinationDeltaLake.AutomaticSchemaChanges)
			destinations1.Destination.DeltaLake.ConnectionID = types.StringValue(destinationsItem.Destination.DestinationDeltaLake.ConnectionID)
			destinations1.Destination.DeltaLake.LastUpdatedColumn = types.StringPointerValue(destinationsItem.Destination.DestinationDeltaLake.LastUpdatedColumn)
			destinations1.Destination.DeltaLake.Pre10Dot2RuntimeSupport = types.BoolPointerValue(destinationsItem.Destination.DestinationDeltaLake.Pre10Dot2RuntimeSupport)
			destinations1.Destination.DeltaLake.PrimaryKey = nil
			for _, v := range destinationsItem.Destination.DestinationDeltaLake.PrimaryKey {
				destinations1.Destination.DeltaLake.PrimaryKey = append(destinations1.Destination.DeltaLake.PrimaryKey, types.StringValue(v))
			}
			destinations1.Destination.DeltaLake.RetainHistory = types.BoolPointerValue(destinationsItem.Destination.DestinationDeltaLake.RetainHistory)
			destinations1.Destination.DeltaLake.Schema = types.StringValue(destinationsItem.Destination.DestinationDeltaLake.Schema)
			destinations1.Destination.DeltaLake.SchemaChangingTo = types.StringPointerValue(destinationsItem.Destination.DestinationDeltaLake.SchemaChangingTo)
			destinations1.Destination.DeltaLake.Table = types.StringValue(destinationsItem.Destination.DestinationDeltaLake.Table)
			destinations1.Destination.DeltaLake.TableChangingTo = types.StringPointerValue(destinationsItem.Destination.DestinationDeltaLake.TableChangingTo)
			destinations1.Destination.DeltaLake.Type = types.StringValue(string(destinationsItem.Destination.DestinationDeltaLake.Type))
			destinations1.Destination.DeltaLake.WaitForQualityCheck = types.BoolPointerValue(destinationsItem.Destination.DestinationDeltaLake.WaitForQualityCheck)
		}
		if destinationsItem.Destination.DestinationRedshift != nil {
			destinations1.Destination.Redshift = &DestinationRedshift{}
			destinations1.Destination.Redshift.AutomaticSchemaChanges = types.BoolPointerValue(destinationsItem.Destination.DestinationRedshift.AutomaticSchemaChanges)
			destinations1.Destination.Redshift.CompressColumns = types.BoolPointerValue(destinationsItem.Destination.DestinationRedshift.CompressColumns)
			destinations1.Destination.Redshift.ConnectionID = types.StringValue(destinationsItem.Destination.DestinationRedshift.ConnectionID)
			if destinationsItem.Destination.DestinationRedshift.DistributionStyle == nil {
				destinations1.Destination.Redshift.DistributionStyle = nil
			} else {
				destinations1.Destination.Redshift.DistributionStyle = &DistributionStyle{}
				if destinationsItem.Destination.DestinationRedshift.DistributionStyle.One != nil {
					if destinationsItem.Destination.DestinationRedshift.DistributionStyle.One != nil {
						destinations1.Destination.Redshift.DistributionStyle.One = types.StringValue(string(*destinationsItem.Destination.DestinationRedshift.DistributionStyle.One))
					} else {
						destinations1.Destination.Redshift.DistributionStyle.One = types.StringNull()
					}
				}
				if destinationsItem.Destination.DestinationRedshift.DistributionStyle.DistributionStyleKey != nil {
					destinations1.Destination.Redshift.DistributionStyle.DistributionStyleKey = &DistributionStyleKey{}
					destinations1.Destination.Redshift.DistributionStyle.DistributionStyleKey.Column = types.StringValue(destinationsItem.Destination.DestinationRedshift.DistributionStyle.DistributionStyleKey.Column)
					destinations1.Destination.Redshift.DistributionStyle.DistributionStyleKey.Type = types.StringValue(string(destinationsItem.Destination.DestinationRedshift.DistributionStyle.DistributionStyleKey.Type))
				}
			}
			destinations1.Destination.Redshift.LastUpdatedColumn = types.StringPointerValue(destinationsItem.Destination.DestinationRedshift.LastUpdatedColumn)
			destinations1.Destination.Redshift.PrimaryKey = nil
			for _, v := range destinationsItem.Destination.DestinationRedshift.PrimaryKey {
				destinations1.Destination.Redshift.PrimaryKey = append(destinations1.Destination.Redshift.PrimaryKey, types.StringValue(v))
			}
			destinations1.Destination.Redshift.RetainHistory = types.BoolPointerValue(destinationsItem.Destination.DestinationRedshift.RetainHistory)
			destinations1.Destination.Redshift.Schema = types.StringPointerValue(destinationsItem.Destination.DestinationRedshift.Schema)
			destinations1.Destination.Redshift.SchemaChangingTo = types.StringPointerValue(destinationsItem.Destination.DestinationRedshift.SchemaChangingTo)
			destinations1.Destination.Redshift.SortColumns = nil
			for _, v := range destinationsItem.Destination.DestinationRedshift.SortColumns {
				destinations1.Destination.Redshift.SortColumns = append(destinations1.Destination.Redshift.SortColumns, types.StringValue(v))
			}
			destinations1.Destination.Redshift.Table = types.StringValue(destinationsItem.Destination.DestinationRedshift.Table)
			destinations1.Destination.Redshift.TableChangingTo = types.StringPointerValue(destinationsItem.Destination.DestinationRedshift.TableChangingTo)
			destinations1.Destination.Redshift.TruncateStrings = types.BoolPointerValue(destinationsItem.Destination.DestinationRedshift.TruncateStrings)
			destinations1.Destination.Redshift.Type = types.StringValue(string(destinationsItem.Destination.DestinationRedshift.Type))
			destinations1.Destination.Redshift.WaitForQualityCheck = types.BoolPointerValue(destinationsItem.Destination.DestinationRedshift.WaitForQualityCheck)
		}
		if destinationsItem.Destination.DestinationS3DataLake != nil {
			destinations1.Destination.S3DataLake = &DestinationS3DataLake{}
			destinations1.Destination.S3DataLake.AutomaticSchemaChanges = types.BoolPointerValue(destinationsItem.Destination.DestinationS3DataLake.AutomaticSchemaChanges)
			destinations1.Destination.S3DataLake.ConnectionID = types.StringValue(destinationsItem.Destination.DestinationS3DataLake.ConnectionID)
			destinations1.Destination.S3DataLake.GenerateSnapshots = types.BoolPointerValue(destinationsItem.Destination.DestinationS3DataLake.GenerateSnapshots)
			if destinationsItem.Destination.DestinationS3DataLake.OutputFormat != nil {
				destinations1.Destination.S3DataLake.OutputFormat = types.StringValue(string(*destinationsItem.Destination.DestinationS3DataLake.OutputFormat))
			} else {
				destinations1.Destination.S3DataLake.OutputFormat = types.StringNull()
			}
			destinations1.Destination.S3DataLake.PathPrefix = types.StringValue(destinationsItem.Destination.DestinationS3DataLake.PathPrefix)
			destinations1.Destination.S3DataLake.PrimaryKey = nil
			for _, v := range destinationsItem.Destination.DestinationS3DataLake.PrimaryKey {
				destinations1.Destination.S3DataLake.PrimaryKey = append(destinations1.Destination.S3DataLake.PrimaryKey, types.StringValue(v))
			}
			destinations1.Destination.S3DataLake.Type = types.StringValue(string(destinationsItem.Destination.DestinationS3DataLake.Type))
			destinations1.Destination.S3DataLake.WaitForQualityCheck = types.BoolPointerValue(destinationsItem.Destination.DestinationS3DataLake.WaitForQualityCheck)
		}
		if destinationsItem.Destination.DestinationSnowflake != nil {
			destinations1.Destination.Snowflake = &DestinationSnowflake{}
			destinations1.Destination.Snowflake.AutomaticSchemaChanges = types.BoolPointerValue(destinationsItem.Destination.DestinationSnowflake.AutomaticSchemaChanges)
			destinations1.Destination.Snowflake.ClusteringKeys = nil
			for _, v := range destinationsItem.Destination.DestinationSnowflake.ClusteringKeys {
				destinations1.Destination.Snowflake.ClusteringKeys = append(destinations1.Destination.Snowflake.ClusteringKeys, types.StringValue(v))
			}
			destinations1.Destination.Snowflake.ConnectionID = types.StringValue(destinationsItem.Destination.DestinationSnowflake.ConnectionID)
			destinations1.Destination.Snowflake.LastUpdatedColumn = types.StringPointerValue(destinationsItem.Destination.DestinationSnowflake.LastUpdatedColumn)
			destinations1.Destination.Snowflake.PrimaryKey = nil
			for _, v := range destinationsItem.Destination.DestinationSnowflake.PrimaryKey {
				destinations1.Destination.Snowflake.PrimaryKey = append(destinations1.Destination.Snowflake.PrimaryKey, types.StringValue(v))
			}
			destinations1.Destination.Snowflake.RetainHistory = types.BoolPointerValue(destinationsItem.Destination.DestinationSnowflake.RetainHistory)
			destinations1.Destination.Snowflake.Schema = types.StringPointerValue(destinationsItem.Destination.DestinationSnowflake.Schema)
			destinations1.Destination.Snowflake.SchemaChangingTo = types.StringPointerValue(destinationsItem.Destination.DestinationSnowflake.SchemaChangingTo)
			destinations1.Destination.Snowflake.Table = types.StringValue(destinationsItem.Destination.DestinationSnowflake.Table)
			destinations1.Destination.Snowflake.TableChangingTo = types.StringPointerValue(destinationsItem.Destination.DestinationSnowflake.TableChangingTo)
			destinations1.Destination.Snowflake.Type = types.StringValue(string(destinationsItem.Destination.DestinationSnowflake.Type))
			destinations1.Destination.Snowflake.WaitForQualityCheck = types.BoolPointerValue(destinationsItem.Destination.DestinationSnowflake.WaitForQualityCheck)
		}
		for operationErrorsByOperationCount, operationErrorsByOperationItem := range destinationsItem.ParsingErrors.OperationErrorsByOperation {
			var operationErrorsByOperation1 OperationErrorsByOperation
			operationErrorsByOperation1.OperationDescription = types.StringValue(operationErrorsByOperationItem.OperationDescription)
			operationErrorsByOperation1.OperationIndex = types.Int64Value(operationErrorsByOperationItem.OperationIndex)
			operationErrorsByOperation1.RowCount = types.Int64Value(operationErrorsByOperationItem.RowCount)
			if operationErrorsByOperationCount+1 > len(destinations1.ParsingErrors.OperationErrorsByOperation) {
				destinations1.ParsingErrors.OperationErrorsByOperation = append(destinations1.ParsingErrors.OperationErrorsByOperation, operationErrorsByOperation1)
			} else {
				destinations1.ParsingErrors.OperationErrorsByOperation[operationErrorsByOperationCount].OperationDescription = operationErrorsByOperation1.OperationDescription
				destinations1.ParsingErrors.OperationErrorsByOperation[operationErrorsByOperationCount].OperationIndex = operationErrorsByOperation1.OperationIndex
				destinations1.ParsingErrors.OperationErrorsByOperation[operationErrorsByOperationCount].RowCount = operationErrorsByOperation1.RowCount
			}
		}
		for parsingErrorsPerDayCount, parsingErrorsPerDayItem := range destinationsItem.ParsingErrors.ParsingErrorsPerDay {
			var parsingErrorsPerDay1 ParsingErrorPerDay
			parsingErrorsPerDay1.Day = types.StringValue(parsingErrorsPerDayItem.Day.String())
			parsingErrorsPerDay1.ErrorType = types.StringValue(string(parsingErrorsPerDayItem.ErrorType))
			parsingErrorsPerDay1.RowCount = types.Int64Value(parsingErrorsPerDayItem.RowCount)
			if parsingErrorsPerDayCount+1 > len(destinations1.ParsingErrors.ParsingErrorsPerDay) {
				destinations1.ParsingErrors.ParsingErrorsPerDay = append(destinations1.ParsingErrors.ParsingErrorsPerDay, parsingErrorsPerDay1)
			} else {
				destinations1.ParsingErrors.ParsingErrorsPerDay[parsingErrorsPerDayCount].Day = parsingErrorsPerDay1.Day
				destinations1.ParsingErrors.ParsingErrorsPerDay[parsingErrorsPerDayCount].ErrorType = parsingErrorsPerDay1.ErrorType
				destinations1.ParsingErrors.ParsingErrorsPerDay[parsingErrorsPerDayCount].RowCount = parsingErrorsPerDay1.RowCount
			}
		}
		for typeErrorsByColumnCount, typeErrorsByColumnItem := range destinationsItem.ParsingErrors.TypeErrorsByColumn {
			var typeErrorsByColumn1 TypeErrorsByColumn
			typeErrorsByColumn1.ColumnName = types.StringValue(typeErrorsByColumnItem.ColumnName)
			typeErrorsByColumn1.RowCount = types.Int64Value(typeErrorsByColumnItem.RowCount)
			typeErrorsByColumn1.Type = types.StringValue(typeErrorsByColumnItem.Type)
			if typeErrorsByColumnCount+1 > len(destinations1.ParsingErrors.TypeErrorsByColumn) {
				destinations1.ParsingErrors.TypeErrorsByColumn = append(destinations1.ParsingErrors.TypeErrorsByColumn, typeErrorsByColumn1)
			} else {
				destinations1.ParsingErrors.TypeErrorsByColumn[typeErrorsByColumnCount].ColumnName = typeErrorsByColumn1.ColumnName
				destinations1.ParsingErrors.TypeErrorsByColumn[typeErrorsByColumnCount].RowCount = typeErrorsByColumn1.RowCount
				destinations1.ParsingErrors.TypeErrorsByColumn[typeErrorsByColumnCount].Type = typeErrorsByColumn1.Type
			}
		}
		destinations1.RefreshVersion = types.Int64PointerValue(destinationsItem.RefreshVersion)
		for rowsCurrentlyInWarehouseCount, rowsCurrentlyInWarehouseItem := range destinationsItem.RetentionData.RetentionByDay.RowsCurrentlyInWarehouse {
			var rowsCurrentlyInWarehouse1 RetentionDayRowCount
			if rowsCurrentlyInWarehouseItem.Date != nil {
				rowsCurrentlyInWarehouse1.Date = types.StringValue(rowsCurrentlyInWarehouseItem.Date.String())
			} else {
				rowsCurrentlyInWarehouse1.Date = types.StringNull()
			}
			rowsCurrentlyInWarehouse1.RowCount = types.Int64Value(rowsCurrentlyInWarehouseItem.RowCount)
			if rowsCurrentlyInWarehouseCount+1 > len(destinations1.RetentionData.RetentionByDay.RowsCurrentlyInWarehouse) {
				destinations1.RetentionData.RetentionByDay.RowsCurrentlyInWarehouse = append(destinations1.RetentionData.RetentionByDay.RowsCurrentlyInWarehouse, rowsCurrentlyInWarehouse1)
			} else {
				destinations1.RetentionData.RetentionByDay.RowsCurrentlyInWarehouse[rowsCurrentlyInWarehouseCount].Date = rowsCurrentlyInWarehouse1.Date
				destinations1.RetentionData.RetentionByDay.RowsCurrentlyInWarehouse[rowsCurrentlyInWarehouseCount].RowCount = rowsCurrentlyInWarehouse1.RowCount
			}
		}
		for rowsRemovedFromWarehouseCount, rowsRemovedFromWarehouseItem := range destinationsItem.RetentionData.RetentionByDay.RowsRemovedFromWarehouse {
			var rowsRemovedFromWarehouse1 RetentionDayRowCount
			if rowsRemovedFromWarehouseItem.Date != nil {
				rowsRemovedFromWarehouse1.Date = types.StringValue(rowsRemovedFromWarehouseItem.Date.String())
			} else {
				rowsRemovedFromWarehouse1.Date = types.StringNull()
			}
			rowsRemovedFromWarehouse1.RowCount = types.Int64Value(rowsRemovedFromWarehouseItem.RowCount)
			if rowsRemovedFromWarehouseCount+1 > len(destinations1.RetentionData.RetentionByDay.RowsRemovedFromWarehouse) {
				destinations1.RetentionData.RetentionByDay.RowsRemovedFromWarehouse = append(destinations1.RetentionData.RetentionByDay.RowsRemovedFromWarehouse, rowsRemovedFromWarehouse1)
			} else {
				destinations1.RetentionData.RetentionByDay.RowsRemovedFromWarehouse[rowsRemovedFromWarehouseCount].Date = rowsRemovedFromWarehouse1.Date
				destinations1.RetentionData.RetentionByDay.RowsRemovedFromWarehouse[rowsRemovedFromWarehouseCount].RowCount = rowsRemovedFromWarehouse1.RowCount
			}
		}
		if destinationsItem.RetentionData.RetentionPolicy == nil {
			destinations1.RetentionData.RetentionPolicy = nil
		} else {
			destinations1.RetentionData.RetentionPolicy = &RetentionPolicy{}
			destinations1.RetentionData.RetentionPolicy.Column = types.StringValue(destinationsItem.RetentionData.RetentionPolicy.Column)
			destinations1.RetentionData.RetentionPolicy.Period = types.Int64Value(destinationsItem.RetentionData.RetentionPolicy.Period)
		}
		for schemaChangeActivityCount, schemaChangeActivityItem := range destinationsItem.SchemaChangeActivity {
			var schemaChangeActivity1 SchemaChange
			if schemaChangeActivityItem.DateTime != nil {
				schemaChangeActivity1.DateTime = types.StringValue(schemaChangeActivityItem.DateTime.Format(time.RFC3339Nano))
			} else {
				schemaChangeActivity1.DateTime = types.StringNull()
			}
			schemaChangeActivity1.SchemaChangeDescription = types.StringPointerValue(schemaChangeActivityItem.SchemaChangeDescription)
			if schemaChangeActivityCount+1 > len(destinations1.SchemaChangeActivity) {
				destinations1.SchemaChangeActivity = append(destinations1.SchemaChangeActivity, schemaChangeActivity1)
			} else {
				destinations1.SchemaChangeActivity[schemaChangeActivityCount].DateTime = schemaChangeActivity1.DateTime
				destinations1.SchemaChangeActivity[schemaChangeActivityCount].SchemaChangeDescription = schemaChangeActivity1.SchemaChangeDescription
			}
		}
		if destinationsCount+1 > len(r.Destinations) {
			r.Destinations = append(r.Destinations, destinations1)
		} else {
			r.Destinations[destinationsCount].CurrentVersion = destinations1.CurrentVersion
			r.Destinations[destinationsCount].Destination = destinations1.Destination
			r.Destinations[destinationsCount].ParsingErrors = destinations1.ParsingErrors
			r.Destinations[destinationsCount].RefreshVersion = destinations1.RefreshVersion
			r.Destinations[destinationsCount].RetentionData = destinations1.RetentionData
			r.Destinations[destinationsCount].SchemaChangeActivity = destinations1.SchemaChangeActivity
		}
	}
	r.ID = types.StringValue(resp.ID)
	if resp.LastRefreshFinishDate != nil {
		r.LastRefreshFinishDate = types.StringValue(resp.LastRefreshFinishDate.Format(time.RFC3339Nano))
	} else {
		r.LastRefreshFinishDate = types.StringNull()
	}
	if resp.LastRefreshStartDate != nil {
		r.LastRefreshStartDate = types.StringValue(resp.LastRefreshStartDate.Format(time.RFC3339Nano))
	} else {
		r.LastRefreshStartDate = types.StringNull()
	}
	r.Latency = types.Int64PointerValue(resp.Latency)
	r.LatestScriptVersion = types.Int64Value(resp.LatestScriptVersion)
	r.Name = types.StringValue(resp.Name)
	r.Owner.EmailAddress = types.StringValue(resp.Owner.EmailAddress)
	r.Owner.FirstName = types.StringValue(resp.Owner.FirstName)
	r.Owner.ID = types.StringValue(resp.Owner.ID)
	r.Owner.LastName = types.StringValue(resp.Owner.LastName)
	if resp.ParsingErrorSettings == nil {
		r.ParsingErrorSettings = nil
	} else {
		r.ParsingErrorSettings = &ParsingErrorSettings{}
		r.ParsingErrorSettings.Action = types.StringValue(string(resp.ParsingErrorSettings.Action))
		r.ParsingErrorSettings.Threshold = types.NumberValue(big.NewFloat(float64(resp.ParsingErrorSettings.Threshold)))
	}
	r.Paused = types.BoolValue(resp.Paused)
	r.PipelineMode = types.StringValue(string(resp.PipelineMode))
	if resp.RefreshSchedule.RefreshScheduleModeDaily != nil {
		r.RefreshSchedule.Daily = &UpdateScheduleModeDaily{}
		r.RefreshSchedule.Daily.HourOfDay = types.Int64Value(resp.RefreshSchedule.RefreshScheduleModeDaily.HourOfDay)
		r.RefreshSchedule.Daily.Mode = types.StringValue(string(resp.RefreshSchedule.RefreshScheduleModeDaily.Mode))
	}
	if resp.RefreshSchedule.RefreshScheduleModeHourly != nil {
		r.RefreshSchedule.Hourly = &UpdateScheduleModeHourly{}
		r.RefreshSchedule.Hourly.Mode = types.StringValue(string(resp.RefreshSchedule.RefreshScheduleModeHourly.Mode))
	}
	if resp.RefreshSchedule.RefreshScheduleModeMonthly != nil {
		r.RefreshSchedule.Monthly = &UpdateScheduleModeMonthly{}
		r.RefreshSchedule.Monthly.DayOfMonth = types.Int64Value(resp.RefreshSchedule.RefreshScheduleModeMonthly.DayOfMonth)
		r.RefreshSchedule.Monthly.HourOfDay = types.Int64Value(resp.RefreshSchedule.RefreshScheduleModeMonthly.HourOfDay)
		r.RefreshSchedule.Monthly.Mode = types.StringValue(string(resp.RefreshSchedule.RefreshScheduleModeMonthly.Mode))
	}
	if resp.RefreshSchedule.RefreshScheduleModeNever != nil {
		r.RefreshSchedule.Never = &RefreshScheduleModeNever{}
		r.RefreshSchedule.Never.Mode = types.StringValue(string(resp.RefreshSchedule.RefreshScheduleModeNever.Mode))
	}
	if resp.RefreshSchedule.RefreshScheduleModeWeekly != nil {
		r.RefreshSchedule.Weekly = &UpdateScheduleModeWeekly{}
		r.RefreshSchedule.Weekly.DayOfWeek = types.Int64Value(resp.RefreshSchedule.RefreshScheduleModeWeekly.DayOfWeek)
		r.RefreshSchedule.Weekly.HourOfDay = types.Int64Value(resp.RefreshSchedule.RefreshScheduleModeWeekly.HourOfDay)
		r.RefreshSchedule.Weekly.Mode = types.StringValue(string(resp.RefreshSchedule.RefreshScheduleModeWeekly.Mode))
	}
	r.Shares = nil
	for _, v := range resp.Shares {
		r.Shares = append(r.Shares, types.StringValue(v))
	}
	if resp.Source.SourceActiveCampaign != nil {
		r.Source.ActiveCampaign = &SourceActiveCampaign{}
		r.Source.ActiveCampaign.ConnectionID = types.StringValue(resp.Source.SourceActiveCampaign.ConnectionID)
		r.Source.ActiveCampaign.Entity = types.StringValue(resp.Source.SourceActiveCampaign.Entity)
		r.Source.ActiveCampaign.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceActiveCampaign.LatencyThreshold)
		r.Source.ActiveCampaign.Type = types.StringValue(string(resp.Source.SourceActiveCampaign.Type))
	}
	if resp.Source.SourceBigQuery != nil {
		r.Source.Bigquery = &SourceBigQuery{}
		r.Source.Bigquery.ConnectionID = types.StringValue(resp.Source.SourceBigQuery.ConnectionID)
		r.Source.Bigquery.Dataset = types.StringPointerValue(resp.Source.SourceBigQuery.Dataset)
		r.Source.Bigquery.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceBigQuery.LastUpdatedColumn)
		r.Source.Bigquery.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceBigQuery.LatencyThreshold)
		r.Source.Bigquery.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceBigQuery.PrimaryKeyColumns {
			r.Source.Bigquery.PrimaryKeyColumns = append(r.Source.Bigquery.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Bigquery.Table = types.StringPointerValue(resp.Source.SourceBigQuery.Table)
		r.Source.Bigquery.TableNameFilter = types.StringPointerValue(resp.Source.SourceBigQuery.TableNameFilter)
		r.Source.Bigquery.Type = types.StringValue(string(resp.Source.SourceBigQuery.Type))
	}
	if resp.Source.SourceBingAds != nil {
		r.Source.BingAds = &SourceBingAds{}
		r.Source.BingAds.ConnectionID = types.StringValue(resp.Source.SourceBingAds.ConnectionID)
		r.Source.BingAds.Entity = types.StringValue(resp.Source.SourceBingAds.Entity)
		r.Source.BingAds.Fields = nil
		for _, v := range resp.Source.SourceBingAds.Fields {
			r.Source.BingAds.Fields = append(r.Source.BingAds.Fields, types.StringValue(v))
		}
		r.Source.BingAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceBingAds.LatencyThreshold)
		r.Source.BingAds.Type = types.StringValue(string(resp.Source.SourceBingAds.Type))
	}
	if resp.Source.SourceBlackline != nil {
		r.Source.Blackline = &SourceBlackline{}
		r.Source.Blackline.ConnectionID = types.StringValue(resp.Source.SourceBlackline.ConnectionID)
		r.Source.Blackline.Entity = types.StringValue(resp.Source.SourceBlackline.Entity)
		r.Source.Blackline.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceBlackline.LatencyThreshold)
		r.Source.Blackline.Type = types.StringValue(string(resp.Source.SourceBlackline.Type))
	}
	if resp.Source.SourceCriteo != nil {
		r.Source.Criteo = &SourceCriteo{}
		r.Source.Criteo.ConnectionID = types.StringValue(resp.Source.SourceCriteo.ConnectionID)
		r.Source.Criteo.Currency = nil
		for _, v := range resp.Source.SourceCriteo.Currency {
			r.Source.Criteo.Currency = append(r.Source.Criteo.Currency, types.StringValue(v))
		}
		r.Source.Criteo.Dimensions = nil
		for _, v := range resp.Source.SourceCriteo.Dimensions {
			r.Source.Criteo.Dimensions = append(r.Source.Criteo.Dimensions, types.StringValue(v))
		}
		r.Source.Criteo.Entity = types.StringValue(resp.Source.SourceCriteo.Entity)
		r.Source.Criteo.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceCriteo.LatencyThreshold)
		r.Source.Criteo.Metrics = nil
		for _, v := range resp.Source.SourceCriteo.Metrics {
			r.Source.Criteo.Metrics = append(r.Source.Criteo.Metrics, types.StringValue(v))
		}
		r.Source.Criteo.Timezone = nil
		for _, v := range resp.Source.SourceCriteo.Timezone {
			r.Source.Criteo.Timezone = append(r.Source.Criteo.Timezone, types.StringValue(v))
		}
		r.Source.Criteo.Type = types.StringValue(string(resp.Source.SourceCriteo.Type))
	}
	if resp.Source.SourceDb2 != nil {
		r.Source.Db2 = &SourceDb2{}
		r.Source.Db2.ConnectionID = types.StringValue(resp.Source.SourceDb2.ConnectionID)
		r.Source.Db2.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceDb2.LastUpdatedColumn)
		r.Source.Db2.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceDb2.LatencyThreshold)
		r.Source.Db2.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceDb2.PrimaryKeyColumns {
			r.Source.Db2.PrimaryKeyColumns = append(r.Source.Db2.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Db2.Schema = types.StringPointerValue(resp.Source.SourceDb2.Schema)
		r.Source.Db2.Table = types.StringPointerValue(resp.Source.SourceDb2.Table)
		r.Source.Db2.TableNameFilter = types.StringPointerValue(resp.Source.SourceDb2.TableNameFilter)
		r.Source.Db2.Type = types.StringValue(string(resp.Source.SourceDb2.Type))
	}
	if resp.Source.SourceDb2Sharded != nil {
		r.Source.Db2Sharded = &SourceDb2Sharded{}
		r.Source.Db2Sharded.ConnectionID = types.StringValue(resp.Source.SourceDb2Sharded.ConnectionID)
		r.Source.Db2Sharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceDb2Sharded.LastUpdatedColumn)
		r.Source.Db2Sharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceDb2Sharded.LatencyThreshold)
		r.Source.Db2Sharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceDb2Sharded.PrimaryKeyColumns {
			r.Source.Db2Sharded.PrimaryKeyColumns = append(r.Source.Db2Sharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Db2Sharded.Schema = types.StringPointerValue(resp.Source.SourceDb2Sharded.Schema)
		r.Source.Db2Sharded.Table = types.StringPointerValue(resp.Source.SourceDb2Sharded.Table)
		r.Source.Db2Sharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceDb2Sharded.TableNameFilter)
		r.Source.Db2Sharded.Type = types.StringValue(string(resp.Source.SourceDb2Sharded.Type))
	}
	if resp.Source.SourceDeltaLake != nil {
		r.Source.DeltaLake = &SourceDeltaLake{}
		r.Source.DeltaLake.ConnectionID = types.StringValue(resp.Source.SourceDeltaLake.ConnectionID)
		r.Source.DeltaLake.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceDeltaLake.LastUpdatedColumn)
		r.Source.DeltaLake.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceDeltaLake.LatencyThreshold)
		r.Source.DeltaLake.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceDeltaLake.PrimaryKeyColumns {
			r.Source.DeltaLake.PrimaryKeyColumns = append(r.Source.DeltaLake.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.DeltaLake.Schema = types.StringPointerValue(resp.Source.SourceDeltaLake.Schema)
		r.Source.DeltaLake.Table = types.StringPointerValue(resp.Source.SourceDeltaLake.Table)
		r.Source.DeltaLake.TableNameFilter = types.StringPointerValue(resp.Source.SourceDeltaLake.TableNameFilter)
		r.Source.DeltaLake.Type = types.StringValue(string(resp.Source.SourceDeltaLake.Type))
	}
	if resp.Source.SourceElasticSearch != nil {
		r.Source.Elasticsearch = &SourceElasticSearch{}
		r.Source.Elasticsearch.ConnectionID = types.StringValue(resp.Source.SourceElasticSearch.ConnectionID)
		r.Source.Elasticsearch.Entity = types.StringValue(resp.Source.SourceElasticSearch.Entity)
		r.Source.Elasticsearch.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceElasticSearch.LatencyThreshold)
		r.Source.Elasticsearch.Type = types.StringValue(string(resp.Source.SourceElasticSearch.Type))
	}
	if resp.Source.SourceElluminate != nil {
		r.Source.Elluminate = &SourceElluminate{}
		r.Source.Elluminate.ConnectionID = types.StringValue(resp.Source.SourceElluminate.ConnectionID)
		r.Source.Elluminate.DomainName = nil
		for _, v := range resp.Source.SourceElluminate.DomainName {
			r.Source.Elluminate.DomainName = append(r.Source.Elluminate.DomainName, types.StringValue(v))
		}
		r.Source.Elluminate.Entity = types.StringValue(resp.Source.SourceElluminate.Entity)
		r.Source.Elluminate.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceElluminate.LatencyThreshold)
		r.Source.Elluminate.SchemaName = types.StringValue(resp.Source.SourceElluminate.SchemaName)
		r.Source.Elluminate.Type = types.StringValue(string(resp.Source.SourceElluminate.Type))
	}
	if resp.Source.SourceEloqua != nil {
		r.Source.Eloqua = &SourceEloqua{}
		r.Source.Eloqua.ConnectionID = types.StringValue(resp.Source.SourceEloqua.ConnectionID)
		r.Source.Eloqua.Entity = types.StringValue(resp.Source.SourceEloqua.Entity)
		r.Source.Eloqua.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceEloqua.LatencyThreshold)
		r.Source.Eloqua.Type = types.StringValue(string(resp.Source.SourceEloqua.Type))
	}
	if resp.Source.SourceErpx != nil {
		r.Source.Erpx = &SourceErpx{}
		r.Source.Erpx.ConnectionID = types.StringValue(resp.Source.SourceErpx.ConnectionID)
		r.Source.Erpx.Entity = types.StringValue(resp.Source.SourceErpx.Entity)
		r.Source.Erpx.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceErpx.LatencyThreshold)
		r.Source.Erpx.Type = types.StringValue(string(resp.Source.SourceErpx.Type))
	}
	if resp.Source.SourceFacebookAds != nil {
		r.Source.FacebookAds = &SourceFacebookAds{}
		r.Source.FacebookAds.Breakdowns = nil
		for _, v := range resp.Source.SourceFacebookAds.Breakdowns {
			r.Source.FacebookAds.Breakdowns = append(r.Source.FacebookAds.Breakdowns, types.StringValue(v))
		}
		r.Source.FacebookAds.ConnectionID = types.StringValue(resp.Source.SourceFacebookAds.ConnectionID)
		r.Source.FacebookAds.Entity = types.StringValue(resp.Source.SourceFacebookAds.Entity)
		r.Source.FacebookAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceFacebookAds.LatencyThreshold)
		r.Source.FacebookAds.Type = types.StringValue(string(resp.Source.SourceFacebookAds.Type))
	}
	if resp.Source.SourceFifteenFive != nil {
		r.Source.FifteenFive = &SourceFifteenFive{}
		r.Source.FifteenFive.ConnectionID = types.StringValue(resp.Source.SourceFifteenFive.ConnectionID)
		r.Source.FifteenFive.Entity = types.StringValue(resp.Source.SourceFifteenFive.Entity)
		r.Source.FifteenFive.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceFifteenFive.LatencyThreshold)
		r.Source.FifteenFive.Type = types.StringValue(string(resp.Source.SourceFifteenFive.Type))
	}
	if resp.Source.SourceFreshchat != nil {
		r.Source.Freshchat = &SourceFreshchat{}
		r.Source.Freshchat.ConnectionID = types.StringValue(resp.Source.SourceFreshchat.ConnectionID)
		r.Source.Freshchat.Entity = types.StringValue(resp.Source.SourceFreshchat.Entity)
		r.Source.Freshchat.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceFreshchat.LatencyThreshold)
		r.Source.Freshchat.Type = types.StringValue(string(resp.Source.SourceFreshchat.Type))
		r.Source.Freshchat.View = nil
		for _, v := range resp.Source.SourceFreshchat.View {
			r.Source.Freshchat.View = append(r.Source.Freshchat.View, types.StringValue(v))
		}
	}
	if resp.Source.SourceFreshsales != nil {
		r.Source.Freshsales = &SourceFreshsales{}
		r.Source.Freshsales.ConnectionID = types.StringValue(resp.Source.SourceFreshsales.ConnectionID)
		r.Source.Freshsales.Entity = types.StringValue(resp.Source.SourceFreshsales.Entity)
		r.Source.Freshsales.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceFreshsales.LatencyThreshold)
		r.Source.Freshsales.Type = types.StringValue(string(resp.Source.SourceFreshsales.Type))
		r.Source.Freshsales.View = nil
		for _, v := range resp.Source.SourceFreshsales.View {
			r.Source.Freshsales.View = append(r.Source.Freshsales.View, types.StringValue(v))
		}
	}
	if resp.Source.SourceFreshworks != nil {
		r.Source.Freshworks = &SourceFreshworks{}
		r.Source.Freshworks.ConnectionID = types.StringValue(resp.Source.SourceFreshworks.ConnectionID)
		r.Source.Freshworks.Entity = types.StringValue(resp.Source.SourceFreshworks.Entity)
		r.Source.Freshworks.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceFreshworks.LatencyThreshold)
		r.Source.Freshworks.Type = types.StringValue(string(resp.Source.SourceFreshworks.Type))
	}
	if resp.Source.SourceFtp != nil {
		r.Source.Ftp = &SourceFtp{}
		r.Source.Ftp.ConnectionID = types.StringValue(resp.Source.SourceFtp.ConnectionID)
		r.Source.Ftp.FileNameFilter = types.StringPointerValue(resp.Source.SourceFtp.FileNameFilter)
		r.Source.Ftp.GlobPattern = types.StringPointerValue(resp.Source.SourceFtp.GlobPattern)
		r.Source.Ftp.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceFtp.LatencyThreshold)
		if resp.Source.SourceFtp.LowWatermark != nil {
			r.Source.Ftp.LowWatermark = types.StringValue(resp.Source.SourceFtp.LowWatermark.String())
		} else {
			r.Source.Ftp.LowWatermark = types.StringNull()
		}
		r.Source.Ftp.NewFileBehavior = types.StringValue(string(resp.Source.SourceFtp.NewFileBehavior))
		r.Source.Ftp.Paths = nil
		for _, v := range resp.Source.SourceFtp.Paths {
			r.Source.Ftp.Paths = append(r.Source.Ftp.Paths, types.StringValue(v))
		}
		r.Source.Ftp.Type = types.StringValue(string(resp.Source.SourceFtp.Type))
	}
	if resp.Source.SourceGong != nil {
		r.Source.Gong = &SourceGong{}
		r.Source.Gong.ConnectionID = types.StringValue(resp.Source.SourceGong.ConnectionID)
		r.Source.Gong.Entity = types.StringValue(resp.Source.SourceGong.Entity)
		r.Source.Gong.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceGong.LatencyThreshold)
		r.Source.Gong.Type = types.StringValue(string(resp.Source.SourceGong.Type))
	}
	if resp.Source.SourceGoogleAds != nil {
		r.Source.GoogleAds = &SourceGoogleAds{}
		r.Source.GoogleAds.AttributedResources = nil
		for _, v := range resp.Source.SourceGoogleAds.AttributedResources {
			r.Source.GoogleAds.AttributedResources = append(r.Source.GoogleAds.AttributedResources, types.StringValue(v))
		}
		r.Source.GoogleAds.ConnectionID = types.StringValue(resp.Source.SourceGoogleAds.ConnectionID)
		r.Source.GoogleAds.Entity = types.StringValue(resp.Source.SourceGoogleAds.Entity)
		r.Source.GoogleAds.Fields = nil
		for _, v := range resp.Source.SourceGoogleAds.Fields {
			r.Source.GoogleAds.Fields = append(r.Source.GoogleAds.Fields, types.StringValue(v))
		}
		r.Source.GoogleAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceGoogleAds.LatencyThreshold)
		r.Source.GoogleAds.Metrics = nil
		for _, v := range resp.Source.SourceGoogleAds.Metrics {
			r.Source.GoogleAds.Metrics = append(r.Source.GoogleAds.Metrics, types.StringValue(v))
		}
		r.Source.GoogleAds.Segments = nil
		for _, v := range resp.Source.SourceGoogleAds.Segments {
			r.Source.GoogleAds.Segments = append(r.Source.GoogleAds.Segments, types.StringValue(v))
		}
		r.Source.GoogleAds.Type = types.StringValue(string(resp.Source.SourceGoogleAds.Type))
	}
	if resp.Source.SourceGoogleAnalyticsGa4 != nil {
		r.Source.GoogleAnalyticsGa4 = &SourceGoogleAnalyticsGa4{}
		r.Source.GoogleAnalyticsGa4.ConnectionID = types.StringValue(resp.Source.SourceGoogleAnalyticsGa4.ConnectionID)
		r.Source.GoogleAnalyticsGa4.Dimensions = nil
		for _, v := range resp.Source.SourceGoogleAnalyticsGa4.Dimensions {
			r.Source.GoogleAnalyticsGa4.Dimensions = append(r.Source.GoogleAnalyticsGa4.Dimensions, types.StringValue(v))
		}
		r.Source.GoogleAnalyticsGa4.Entity = types.StringValue(resp.Source.SourceGoogleAnalyticsGa4.Entity)
		r.Source.GoogleAnalyticsGa4.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceGoogleAnalyticsGa4.LatencyThreshold)
		r.Source.GoogleAnalyticsGa4.Metrics = nil
		for _, v := range resp.Source.SourceGoogleAnalyticsGa4.Metrics {
			r.Source.GoogleAnalyticsGa4.Metrics = append(r.Source.GoogleAnalyticsGa4.Metrics, types.StringValue(v))
		}
		r.Source.GoogleAnalyticsGa4.Type = types.StringValue(string(resp.Source.SourceGoogleAnalyticsGa4.Type))
	}
	if resp.Source.SourceGoogleCloudStorage != nil {
		r.Source.GoogleCloudStorage = &SourceGoogleCloudStorage{}
		r.Source.GoogleCloudStorage.ConnectionID = types.StringValue(resp.Source.SourceGoogleCloudStorage.ConnectionID)
		r.Source.GoogleCloudStorage.FileNameFilter = types.StringPointerValue(resp.Source.SourceGoogleCloudStorage.FileNameFilter)
		r.Source.GoogleCloudStorage.GlobPattern = types.StringPointerValue(resp.Source.SourceGoogleCloudStorage.GlobPattern)
		r.Source.GoogleCloudStorage.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceGoogleCloudStorage.LatencyThreshold)
		if resp.Source.SourceGoogleCloudStorage.LowWatermark != nil {
			r.Source.GoogleCloudStorage.LowWatermark = types.StringValue(resp.Source.SourceGoogleCloudStorage.LowWatermark.String())
		} else {
			r.Source.GoogleCloudStorage.LowWatermark = types.StringNull()
		}
		r.Source.GoogleCloudStorage.NewFileBehavior = types.StringValue(string(resp.Source.SourceGoogleCloudStorage.NewFileBehavior))
		r.Source.GoogleCloudStorage.Paths = nil
		for _, v := range resp.Source.SourceGoogleCloudStorage.Paths {
			r.Source.GoogleCloudStorage.Paths = append(r.Source.GoogleCloudStorage.Paths, types.StringValue(v))
		}
		r.Source.GoogleCloudStorage.Type = types.StringValue(string(resp.Source.SourceGoogleCloudStorage.Type))
	}
	if resp.Source.SourceGoogleSheets != nil {
		r.Source.GoogleSheets = &SourceGoogleSheets{}
		r.Source.GoogleSheets.ConnectionID = types.StringValue(resp.Source.SourceGoogleSheets.ConnectionID)
		r.Source.GoogleSheets.Entity = types.StringValue(resp.Source.SourceGoogleSheets.Entity)
		r.Source.GoogleSheets.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceGoogleSheets.LatencyThreshold)
		r.Source.GoogleSheets.Type = types.StringValue(string(resp.Source.SourceGoogleSheets.Type))
	}
	if resp.Source.SourceHubspot != nil {
		r.Source.Hubspot = &SourceHubspot{}
		r.Source.Hubspot.ConnectionID = types.StringValue(resp.Source.SourceHubspot.ConnectionID)
		r.Source.Hubspot.Entity = types.StringValue(resp.Source.SourceHubspot.Entity)
		r.Source.Hubspot.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceHubspot.LatencyThreshold)
		r.Source.Hubspot.Type = types.StringValue(string(resp.Source.SourceHubspot.Type))
	}
	if resp.Source.SourceImpactRadius != nil {
		r.Source.ImpactRadius = &SourceImpactRadius{}
		r.Source.ImpactRadius.ConnectionID = types.StringValue(resp.Source.SourceImpactRadius.ConnectionID)
		r.Source.ImpactRadius.Entity = types.StringValue(resp.Source.SourceImpactRadius.Entity)
		r.Source.ImpactRadius.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceImpactRadius.LatencyThreshold)
		r.Source.ImpactRadius.Type = types.StringValue(string(resp.Source.SourceImpactRadius.Type))
	}
	if resp.Source.SourceIntercom != nil {
		r.Source.Intercom = &SourceIntercom{}
		r.Source.Intercom.ConnectionID = types.StringValue(resp.Source.SourceIntercom.ConnectionID)
		r.Source.Intercom.Entity = types.StringValue(resp.Source.SourceIntercom.Entity)
		r.Source.Intercom.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceIntercom.LatencyThreshold)
		r.Source.Intercom.Type = types.StringValue(string(resp.Source.SourceIntercom.Type))
	}
	if resp.Source.SourceJira != nil {
		r.Source.Jira = &SourceJira{}
		r.Source.Jira.ConnectionID = types.StringValue(resp.Source.SourceJira.ConnectionID)
		r.Source.Jira.Entity = types.StringValue(resp.Source.SourceJira.Entity)
		r.Source.Jira.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceJira.LatencyThreshold)
		r.Source.Jira.Type = types.StringValue(string(resp.Source.SourceJira.Type))
	}
	if resp.Source.SourceJiraAlign != nil {
		r.Source.JiraAlign = &SourceJiraAlign{}
		r.Source.JiraAlign.ConnectionID = types.StringValue(resp.Source.SourceJiraAlign.ConnectionID)
		r.Source.JiraAlign.Entity = types.StringValue(resp.Source.SourceJiraAlign.Entity)
		r.Source.JiraAlign.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceJiraAlign.LatencyThreshold)
		r.Source.JiraAlign.Type = types.StringValue(string(resp.Source.SourceJiraAlign.Type))
	}
	if resp.Source.SourceKafka != nil {
		r.Source.Kafka = &SourceKafka{}
		r.Source.Kafka.ConnectionID = types.StringValue(resp.Source.SourceKafka.ConnectionID)
		r.Source.Kafka.Entity = types.StringValue(resp.Source.SourceKafka.Entity)
		r.Source.Kafka.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceKafka.LatencyThreshold)
		r.Source.Kafka.Type = types.StringValue(string(resp.Source.SourceKafka.Type))
	}
	if resp.Source.SourceKustomer != nil {
		r.Source.Kustomer = &SourceKustomer{}
		r.Source.Kustomer.ConnectionID = types.StringValue(resp.Source.SourceKustomer.ConnectionID)
		r.Source.Kustomer.Entity = types.StringValue(resp.Source.SourceKustomer.Entity)
		r.Source.Kustomer.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceKustomer.LatencyThreshold)
		r.Source.Kustomer.Type = types.StringValue(string(resp.Source.SourceKustomer.Type))
	}
	if resp.Source.SourceLdap != nil {
		r.Source.Ldap = &SourceLdap{}
		r.Source.Ldap.ConnectionID = types.StringValue(resp.Source.SourceLdap.ConnectionID)
		r.Source.Ldap.Entity = types.StringValue(resp.Source.SourceLdap.Entity)
		r.Source.Ldap.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceLdap.LatencyThreshold)
		r.Source.Ldap.Type = types.StringValue(string(resp.Source.SourceLdap.Type))
	}
	if resp.Source.SourceLdapVirtualListView != nil {
		r.Source.LdapVirtualListView = &SourceLdapVirtualListView{}
		r.Source.LdapVirtualListView.ConnectionID = types.StringValue(resp.Source.SourceLdapVirtualListView.ConnectionID)
		r.Source.LdapVirtualListView.Entity = types.StringValue(resp.Source.SourceLdapVirtualListView.Entity)
		r.Source.LdapVirtualListView.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceLdapVirtualListView.LatencyThreshold)
		r.Source.LdapVirtualListView.Type = types.StringValue(string(resp.Source.SourceLdapVirtualListView.Type))
	}
	if resp.Source.SourceLinkedInAds != nil {
		r.Source.LinkedInAds = &SourceLinkedInAds{}
		r.Source.LinkedInAds.ConnectionID = types.StringValue(resp.Source.SourceLinkedInAds.ConnectionID)
		r.Source.LinkedInAds.Entity = types.StringValue(resp.Source.SourceLinkedInAds.Entity)
		r.Source.LinkedInAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceLinkedInAds.LatencyThreshold)
		r.Source.LinkedInAds.Metrics = nil
		for _, v := range resp.Source.SourceLinkedInAds.Metrics {
			r.Source.LinkedInAds.Metrics = append(r.Source.LinkedInAds.Metrics, types.StringValue(v))
		}
		r.Source.LinkedInAds.Pivots = nil
		for _, v := range resp.Source.SourceLinkedInAds.Pivots {
			r.Source.LinkedInAds.Pivots = append(r.Source.LinkedInAds.Pivots, types.StringValue(v))
		}
		r.Source.LinkedInAds.Type = types.StringValue(string(resp.Source.SourceLinkedInAds.Type))
	}
	if resp.Source.SourceMarketo != nil {
		r.Source.Marketo = &SourceMarketo{}
		r.Source.Marketo.ActivityTypes = nil
		for _, v := range resp.Source.SourceMarketo.ActivityTypes {
			r.Source.Marketo.ActivityTypes = append(r.Source.Marketo.ActivityTypes, types.StringValue(v))
		}
		r.Source.Marketo.ConnectionID = types.StringValue(resp.Source.SourceMarketo.ConnectionID)
		r.Source.Marketo.Entity = types.StringValue(resp.Source.SourceMarketo.Entity)
		r.Source.Marketo.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceMarketo.LatencyThreshold)
		r.Source.Marketo.Type = types.StringValue(string(resp.Source.SourceMarketo.Type))
	}
	if resp.Source.SourceMixpanel != nil {
		r.Source.Mixpanel = &SourceMixpanel{}
		r.Source.Mixpanel.ConnectionID = types.StringValue(resp.Source.SourceMixpanel.ConnectionID)
		r.Source.Mixpanel.Entity = types.StringValue(resp.Source.SourceMixpanel.Entity)
		r.Source.Mixpanel.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceMixpanel.LatencyThreshold)
		r.Source.Mixpanel.Type = types.StringValue(string(resp.Source.SourceMixpanel.Type))
	}
	if resp.Source.SourceMongodb != nil {
		r.Source.Mongodb = &SourceMongodb{}
		r.Source.Mongodb.ConnectionID = types.StringValue(resp.Source.SourceMongodb.ConnectionID)
		r.Source.Mongodb.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceMongodb.LatencyThreshold)
		r.Source.Mongodb.Table = types.StringPointerValue(resp.Source.SourceMongodb.Table)
		r.Source.Mongodb.TableNameFilter = types.StringPointerValue(resp.Source.SourceMongodb.TableNameFilter)
		r.Source.Mongodb.Type = types.StringValue(string(resp.Source.SourceMongodb.Type))
	}
	if resp.Source.SourceMysql != nil {
		r.Source.Mysql = &SourceMysql{}
		r.Source.Mysql.ConnectionID = types.StringValue(resp.Source.SourceMysql.ConnectionID)
		r.Source.Mysql.Database = types.StringPointerValue(resp.Source.SourceMysql.Database)
		r.Source.Mysql.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceMysql.LastUpdatedColumn)
		r.Source.Mysql.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceMysql.LatencyThreshold)
		r.Source.Mysql.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceMysql.PrimaryKeyColumns {
			r.Source.Mysql.PrimaryKeyColumns = append(r.Source.Mysql.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Mysql.Table = types.StringPointerValue(resp.Source.SourceMysql.Table)
		r.Source.Mysql.TableNameFilter = types.StringPointerValue(resp.Source.SourceMysql.TableNameFilter)
		r.Source.Mysql.Type = types.StringValue(string(resp.Source.SourceMysql.Type))
	}
	if resp.Source.SourceMysqlSharded != nil {
		r.Source.MysqlSharded = &SourceMysqlSharded{}
		r.Source.MysqlSharded.ConnectionID = types.StringValue(resp.Source.SourceMysqlSharded.ConnectionID)
		r.Source.MysqlSharded.Database = types.StringPointerValue(resp.Source.SourceMysqlSharded.Database)
		r.Source.MysqlSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceMysqlSharded.LastUpdatedColumn)
		r.Source.MysqlSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceMysqlSharded.LatencyThreshold)
		r.Source.MysqlSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceMysqlSharded.PrimaryKeyColumns {
			r.Source.MysqlSharded.PrimaryKeyColumns = append(r.Source.MysqlSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.MysqlSharded.Table = types.StringPointerValue(resp.Source.SourceMysqlSharded.Table)
		r.Source.MysqlSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceMysqlSharded.TableNameFilter)
		r.Source.MysqlSharded.Type = types.StringValue(string(resp.Source.SourceMysqlSharded.Type))
	}
	if resp.Source.SourceNetsuite != nil {
		r.Source.Netsuite = &SourceNetsuite{}
		r.Source.Netsuite.ConnectionID = types.StringValue(resp.Source.SourceNetsuite.ConnectionID)
		r.Source.Netsuite.Entity = types.StringValue(resp.Source.SourceNetsuite.Entity)
		r.Source.Netsuite.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceNetsuite.LatencyThreshold)
		r.Source.Netsuite.Type = types.StringValue(string(resp.Source.SourceNetsuite.Type))
	}
	if resp.Source.SourceNetsuiteV2 != nil {
		r.Source.NetsuiteV2 = &SourceNetsuiteV2{}
		r.Source.NetsuiteV2.ConnectionID = types.StringValue(resp.Source.SourceNetsuiteV2.ConnectionID)
		r.Source.NetsuiteV2.Entity = types.StringValue(resp.Source.SourceNetsuiteV2.Entity)
		r.Source.NetsuiteV2.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceNetsuiteV2.LatencyThreshold)
		r.Source.NetsuiteV2.Type = types.StringValue(string(resp.Source.SourceNetsuiteV2.Type))
	}
	if resp.Source.SourceOracle != nil {
		r.Source.Oracle = &SourceOracle{}
		r.Source.Oracle.ConnectionID = types.StringValue(resp.Source.SourceOracle.ConnectionID)
		r.Source.Oracle.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceOracle.LastUpdatedColumn)
		r.Source.Oracle.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceOracle.LatencyThreshold)
		r.Source.Oracle.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceOracle.PrimaryKeyColumns {
			r.Source.Oracle.PrimaryKeyColumns = append(r.Source.Oracle.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Oracle.Schema = types.StringPointerValue(resp.Source.SourceOracle.Schema)
		r.Source.Oracle.Table = types.StringPointerValue(resp.Source.SourceOracle.Table)
		r.Source.Oracle.TableNameFilter = types.StringPointerValue(resp.Source.SourceOracle.TableNameFilter)
		r.Source.Oracle.Type = types.StringValue(string(resp.Source.SourceOracle.Type))
	}
	if resp.Source.SourceOracleSharded != nil {
		r.Source.OracleSharded = &SourceOracleSharded{}
		r.Source.OracleSharded.ConnectionID = types.StringValue(resp.Source.SourceOracleSharded.ConnectionID)
		r.Source.OracleSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceOracleSharded.LastUpdatedColumn)
		r.Source.OracleSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceOracleSharded.LatencyThreshold)
		r.Source.OracleSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceOracleSharded.PrimaryKeyColumns {
			r.Source.OracleSharded.PrimaryKeyColumns = append(r.Source.OracleSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.OracleSharded.Schema = types.StringPointerValue(resp.Source.SourceOracleSharded.Schema)
		r.Source.OracleSharded.Table = types.StringPointerValue(resp.Source.SourceOracleSharded.Table)
		r.Source.OracleSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceOracleSharded.TableNameFilter)
		r.Source.OracleSharded.Type = types.StringValue(string(resp.Source.SourceOracleSharded.Type))
	}
	if resp.Source.SourceOutlook != nil {
		r.Source.Outlook = &SourceOutlook{}
		r.Source.Outlook.ConnectionID = types.StringValue(resp.Source.SourceOutlook.ConnectionID)
		r.Source.Outlook.Entity = types.StringValue(resp.Source.SourceOutlook.Entity)
		r.Source.Outlook.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceOutlook.LatencyThreshold)
		r.Source.Outlook.Type = types.StringValue(string(resp.Source.SourceOutlook.Type))
	}
	if resp.Source.SourceOutreach != nil {
		r.Source.Outreach = &SourceOutreach{}
		r.Source.Outreach.ConnectionID = types.StringValue(resp.Source.SourceOutreach.ConnectionID)
		r.Source.Outreach.Entity = types.StringValue(resp.Source.SourceOutreach.Entity)
		r.Source.Outreach.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceOutreach.LatencyThreshold)
		r.Source.Outreach.Type = types.StringValue(string(resp.Source.SourceOutreach.Type))
	}
	if resp.Source.SourcePinterestAds != nil {
		r.Source.PinterestAds = &SourcePinterestAds{}
		r.Source.PinterestAds.Columns = nil
		for _, v := range resp.Source.SourcePinterestAds.Columns {
			r.Source.PinterestAds.Columns = append(r.Source.PinterestAds.Columns, types.StringValue(v))
		}
		r.Source.PinterestAds.ConnectionID = types.StringValue(resp.Source.SourcePinterestAds.ConnectionID)
		r.Source.PinterestAds.Entity = types.StringValue(resp.Source.SourcePinterestAds.Entity)
		r.Source.PinterestAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourcePinterestAds.LatencyThreshold)
		r.Source.PinterestAds.Level = nil
		for _, v := range resp.Source.SourcePinterestAds.Level {
			r.Source.PinterestAds.Level = append(r.Source.PinterestAds.Level, types.StringValue(v))
		}
		r.Source.PinterestAds.TargetingTypes = nil
		for _, v := range resp.Source.SourcePinterestAds.TargetingTypes {
			r.Source.PinterestAds.TargetingTypes = append(r.Source.PinterestAds.TargetingTypes, types.StringValue(v))
		}
		r.Source.PinterestAds.Type = types.StringValue(string(resp.Source.SourcePinterestAds.Type))
	}
	if resp.Source.SourcePostgres != nil {
		r.Source.Postgres = &SourcePostgres{}
		r.Source.Postgres.ConnectionID = types.StringValue(resp.Source.SourcePostgres.ConnectionID)
		r.Source.Postgres.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourcePostgres.LastUpdatedColumn)
		r.Source.Postgres.LatencyThreshold = types.Int64PointerValue(resp.Source.SourcePostgres.LatencyThreshold)
		r.Source.Postgres.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourcePostgres.PrimaryKeyColumns {
			r.Source.Postgres.PrimaryKeyColumns = append(r.Source.Postgres.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Postgres.Schema = types.StringPointerValue(resp.Source.SourcePostgres.Schema)
		r.Source.Postgres.Table = types.StringPointerValue(resp.Source.SourcePostgres.Table)
		r.Source.Postgres.TableNameFilter = types.StringPointerValue(resp.Source.SourcePostgres.TableNameFilter)
		r.Source.Postgres.Type = types.StringValue(string(resp.Source.SourcePostgres.Type))
	}
	if resp.Source.SourcePostgresSharded != nil {
		r.Source.PostgresSharded = &SourcePostgresSharded{}
		r.Source.PostgresSharded.ConnectionID = types.StringValue(resp.Source.SourcePostgresSharded.ConnectionID)
		r.Source.PostgresSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourcePostgresSharded.LastUpdatedColumn)
		r.Source.PostgresSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourcePostgresSharded.LatencyThreshold)
		r.Source.PostgresSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourcePostgresSharded.PrimaryKeyColumns {
			r.Source.PostgresSharded.PrimaryKeyColumns = append(r.Source.PostgresSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.PostgresSharded.Schema = types.StringPointerValue(resp.Source.SourcePostgresSharded.Schema)
		r.Source.PostgresSharded.Table = types.StringPointerValue(resp.Source.SourcePostgresSharded.Table)
		r.Source.PostgresSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourcePostgresSharded.TableNameFilter)
		r.Source.PostgresSharded.Type = types.StringValue(string(resp.Source.SourcePostgresSharded.Type))
	}
	if resp.Source.SourceQuoraAds != nil {
		r.Source.QuoraAds = &SourceQuoraAds{}
		r.Source.QuoraAds.ConnectionID = types.StringValue(resp.Source.SourceQuoraAds.ConnectionID)
		r.Source.QuoraAds.Entity = types.StringValue(resp.Source.SourceQuoraAds.Entity)
		r.Source.QuoraAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceQuoraAds.LatencyThreshold)
		r.Source.QuoraAds.Type = types.StringValue(string(resp.Source.SourceQuoraAds.Type))
	}
	if resp.Source.SourceRaveMedidata != nil {
		r.Source.RaveMedidata = &SourceRaveMedidata{}
		r.Source.RaveMedidata.ConnectionID = types.StringValue(resp.Source.SourceRaveMedidata.ConnectionID)
		r.Source.RaveMedidata.Entity = types.StringValue(resp.Source.SourceRaveMedidata.Entity)
		r.Source.RaveMedidata.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceRaveMedidata.LatencyThreshold)
		r.Source.RaveMedidata.Type = types.StringValue(string(resp.Source.SourceRaveMedidata.Type))
	}
	if resp.Source.SourceRecurly != nil {
		r.Source.Recurly = &SourceRecurly{}
		r.Source.Recurly.ConnectionID = types.StringValue(resp.Source.SourceRecurly.ConnectionID)
		r.Source.Recurly.Entity = types.StringValue(resp.Source.SourceRecurly.Entity)
		r.Source.Recurly.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceRecurly.LatencyThreshold)
		r.Source.Recurly.Type = types.StringValue(string(resp.Source.SourceRecurly.Type))
	}
	if resp.Source.SourceRedshift != nil {
		r.Source.Redshift = &SourceRedshift{}
		r.Source.Redshift.ConnectionID = types.StringValue(resp.Source.SourceRedshift.ConnectionID)
		r.Source.Redshift.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceRedshift.LastUpdatedColumn)
		r.Source.Redshift.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceRedshift.LatencyThreshold)
		r.Source.Redshift.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceRedshift.PrimaryKeyColumns {
			r.Source.Redshift.PrimaryKeyColumns = append(r.Source.Redshift.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Redshift.Schema = types.StringPointerValue(resp.Source.SourceRedshift.Schema)
		r.Source.Redshift.Table = types.StringPointerValue(resp.Source.SourceRedshift.Table)
		r.Source.Redshift.TableNameFilter = types.StringPointerValue(resp.Source.SourceRedshift.TableNameFilter)
		r.Source.Redshift.Type = types.StringValue(string(resp.Source.SourceRedshift.Type))
	}
	if resp.Source.SourceRedshiftSharded != nil {
		r.Source.RedshiftSharded = &SourceRedshiftSharded{}
		r.Source.RedshiftSharded.ConnectionID = types.StringValue(resp.Source.SourceRedshiftSharded.ConnectionID)
		r.Source.RedshiftSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceRedshiftSharded.LastUpdatedColumn)
		r.Source.RedshiftSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceRedshiftSharded.LatencyThreshold)
		r.Source.RedshiftSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceRedshiftSharded.PrimaryKeyColumns {
			r.Source.RedshiftSharded.PrimaryKeyColumns = append(r.Source.RedshiftSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.RedshiftSharded.Schema = types.StringPointerValue(resp.Source.SourceRedshiftSharded.Schema)
		r.Source.RedshiftSharded.Table = types.StringPointerValue(resp.Source.SourceRedshiftSharded.Table)
		r.Source.RedshiftSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceRedshiftSharded.TableNameFilter)
		r.Source.RedshiftSharded.Type = types.StringValue(string(resp.Source.SourceRedshiftSharded.Type))
	}
	if resp.Source.SourceS3Input != nil {
		r.Source.S3Input = &SourceS3Input{}
		r.Source.S3Input.ConnectionID = types.StringValue(resp.Source.SourceS3Input.ConnectionID)
		r.Source.S3Input.FileNameFilter = types.StringPointerValue(resp.Source.SourceS3Input.FileNameFilter)
		r.Source.S3Input.FilesCanChange = types.BoolPointerValue(resp.Source.SourceS3Input.FilesCanChange)
		r.Source.S3Input.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceS3Input.LatencyThreshold)
		if resp.Source.SourceS3Input.LowWatermark != nil {
			r.Source.S3Input.LowWatermark = types.StringValue(resp.Source.SourceS3Input.LowWatermark.String())
		} else {
			r.Source.S3Input.LowWatermark = types.StringNull()
		}
		r.Source.S3Input.NewFileBehavior = types.StringValue(string(resp.Source.SourceS3Input.NewFileBehavior))
		r.Source.S3Input.Paths = nil
		for _, v := range resp.Source.SourceS3Input.Paths {
			r.Source.S3Input.Paths = append(r.Source.S3Input.Paths, types.StringValue(v))
		}
		r.Source.S3Input.TriggeredByEvent = types.BoolPointerValue(resp.Source.SourceS3Input.TriggeredByEvent)
		r.Source.S3Input.Type = types.StringValue(string(resp.Source.SourceS3Input.Type))
	}
	if resp.Source.SourceS3Legacy != nil {
		r.Source.S3Legacy = &SourceS3Legacy{}
		r.Source.S3Legacy.ConnectionID = types.StringValue(resp.Source.SourceS3Legacy.ConnectionID)
		r.Source.S3Legacy.FileNameFilter = types.StringPointerValue(resp.Source.SourceS3Legacy.FileNameFilter)
		r.Source.S3Legacy.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceS3Legacy.LatencyThreshold)
		if resp.Source.SourceS3Legacy.LowWatermark != nil {
			r.Source.S3Legacy.LowWatermark = types.StringValue(resp.Source.SourceS3Legacy.LowWatermark.String())
		} else {
			r.Source.S3Legacy.LowWatermark = types.StringNull()
		}
		r.Source.S3Legacy.NewFileBehavior = types.StringValue(string(resp.Source.SourceS3Legacy.NewFileBehavior))
		r.Source.S3Legacy.Paths = nil
		for _, v := range resp.Source.SourceS3Legacy.Paths {
			r.Source.S3Legacy.Paths = append(r.Source.S3Legacy.Paths, types.StringValue(v))
		}
		r.Source.S3Legacy.Type = types.StringValue(string(resp.Source.SourceS3Legacy.Type))
	}
	if resp.Source.SourceSalesforce != nil {
		r.Source.Salesforce = &SourceSalesforce{}
		r.Source.Salesforce.ConnectionID = types.StringValue(resp.Source.SourceSalesforce.ConnectionID)
		r.Source.Salesforce.Entity = types.StringValue(resp.Source.SourceSalesforce.Entity)
		r.Source.Salesforce.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSalesforce.LatencyThreshold)
		r.Source.Salesforce.Type = types.StringValue(string(resp.Source.SourceSalesforce.Type))
	}
	if resp.Source.SourceSalesforceMarketingCloud != nil {
		r.Source.SalesforceMarketingCloud = &SourceSalesforceMarketingCloud{}
		r.Source.SalesforceMarketingCloud.ConnectionID = types.StringValue(resp.Source.SourceSalesforceMarketingCloud.ConnectionID)
		r.Source.SalesforceMarketingCloud.Entity = types.StringValue(resp.Source.SourceSalesforceMarketingCloud.Entity)
		r.Source.SalesforceMarketingCloud.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSalesforceMarketingCloud.LatencyThreshold)
		r.Source.SalesforceMarketingCloud.Type = types.StringValue(string(resp.Source.SourceSalesforceMarketingCloud.Type))
	}
	if resp.Source.SourceSapHana != nil {
		r.Source.SapHana = &SourceSapHana{}
		r.Source.SapHana.ConnectionID = types.StringValue(resp.Source.SourceSapHana.ConnectionID)
		r.Source.SapHana.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceSapHana.LastUpdatedColumn)
		r.Source.SapHana.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSapHana.LatencyThreshold)
		r.Source.SapHana.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceSapHana.PrimaryKeyColumns {
			r.Source.SapHana.PrimaryKeyColumns = append(r.Source.SapHana.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.SapHana.Schema = types.StringPointerValue(resp.Source.SourceSapHana.Schema)
		r.Source.SapHana.Table = types.StringPointerValue(resp.Source.SourceSapHana.Table)
		r.Source.SapHana.TableNameFilter = types.StringPointerValue(resp.Source.SourceSapHana.TableNameFilter)
		r.Source.SapHana.Type = types.StringValue(string(resp.Source.SourceSapHana.Type))
	}
	if resp.Source.SourceSapHanaSharded != nil {
		r.Source.SapHanaSharded = &SourceSapHanaSharded{}
		r.Source.SapHanaSharded.ConnectionID = types.StringValue(resp.Source.SourceSapHanaSharded.ConnectionID)
		r.Source.SapHanaSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceSapHanaSharded.LastUpdatedColumn)
		r.Source.SapHanaSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSapHanaSharded.LatencyThreshold)
		r.Source.SapHanaSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceSapHanaSharded.PrimaryKeyColumns {
			r.Source.SapHanaSharded.PrimaryKeyColumns = append(r.Source.SapHanaSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.SapHanaSharded.Schema = types.StringPointerValue(resp.Source.SourceSapHanaSharded.Schema)
		r.Source.SapHanaSharded.Table = types.StringPointerValue(resp.Source.SourceSapHanaSharded.Table)
		r.Source.SapHanaSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceSapHanaSharded.TableNameFilter)
		r.Source.SapHanaSharded.Type = types.StringValue(string(resp.Source.SourceSapHanaSharded.Type))
	}
	if resp.Source.SourceSeismic != nil {
		r.Source.Seismic = &SourceSeismic{}
		r.Source.Seismic.ConnectionID = types.StringValue(resp.Source.SourceSeismic.ConnectionID)
		r.Source.Seismic.Entity = types.StringValue(resp.Source.SourceSeismic.Entity)
		r.Source.Seismic.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSeismic.LatencyThreshold)
		r.Source.Seismic.Type = types.StringValue(string(resp.Source.SourceSeismic.Type))
	}
	if resp.Source.SourceSftp != nil {
		r.Source.Sftp = &SourceSftp{}
		r.Source.Sftp.ConnectionID = types.StringValue(resp.Source.SourceSftp.ConnectionID)
		r.Source.Sftp.FileNameFilter = types.StringPointerValue(resp.Source.SourceSftp.FileNameFilter)
		r.Source.Sftp.GlobPattern = types.StringPointerValue(resp.Source.SourceSftp.GlobPattern)
		r.Source.Sftp.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSftp.LatencyThreshold)
		if resp.Source.SourceSftp.LowWatermark != nil {
			r.Source.Sftp.LowWatermark = types.StringValue(resp.Source.SourceSftp.LowWatermark.String())
		} else {
			r.Source.Sftp.LowWatermark = types.StringNull()
		}
		r.Source.Sftp.NewFileBehavior = types.StringValue(string(resp.Source.SourceSftp.NewFileBehavior))
		r.Source.Sftp.Paths = nil
		for _, v := range resp.Source.SourceSftp.Paths {
			r.Source.Sftp.Paths = append(r.Source.Sftp.Paths, types.StringValue(v))
		}
		r.Source.Sftp.Type = types.StringValue(string(resp.Source.SourceSftp.Type))
	}
	if resp.Source.SourceShopify != nil {
		r.Source.Shopify = &SourceShopify{}
		r.Source.Shopify.ConnectionID = types.StringValue(resp.Source.SourceShopify.ConnectionID)
		r.Source.Shopify.Entity = types.StringValue(resp.Source.SourceShopify.Entity)
		r.Source.Shopify.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceShopify.LatencyThreshold)
		r.Source.Shopify.Type = types.StringValue(string(resp.Source.SourceShopify.Type))
	}
	if resp.Source.SourceSkyward != nil {
		r.Source.Skyward = &SourceSkyward{}
		r.Source.Skyward.ConnectionID = types.StringValue(resp.Source.SourceSkyward.ConnectionID)
		r.Source.Skyward.Entity = types.StringValue(resp.Source.SourceSkyward.Entity)
		r.Source.Skyward.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSkyward.LatencyThreshold)
		r.Source.Skyward.Type = types.StringValue(string(resp.Source.SourceSkyward.Type))
	}
	if resp.Source.SourceSnapchatAds != nil {
		r.Source.SnapchatAds = &SourceSnapchatAds{}
		r.Source.SnapchatAds.AdditionalMetrics = nil
		for _, v := range resp.Source.SourceSnapchatAds.AdditionalMetrics {
			r.Source.SnapchatAds.AdditionalMetrics = append(r.Source.SnapchatAds.AdditionalMetrics, types.StringValue(v))
		}
		r.Source.SnapchatAds.Breakdown = types.StringPointerValue(resp.Source.SourceSnapchatAds.Breakdown)
		r.Source.SnapchatAds.ConnectionID = types.StringValue(resp.Source.SourceSnapchatAds.ConnectionID)
		r.Source.SnapchatAds.Entity = types.StringValue(resp.Source.SourceSnapchatAds.Entity)
		r.Source.SnapchatAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSnapchatAds.LatencyThreshold)
		r.Source.SnapchatAds.Metrics = nil
		for _, v := range resp.Source.SourceSnapchatAds.Metrics {
			r.Source.SnapchatAds.Metrics = append(r.Source.SnapchatAds.Metrics, types.StringValue(v))
		}
		r.Source.SnapchatAds.ReportDimension = nil
		for _, v := range resp.Source.SourceSnapchatAds.ReportDimension {
			r.Source.SnapchatAds.ReportDimension = append(r.Source.SnapchatAds.ReportDimension, types.StringValue(v))
		}
		r.Source.SnapchatAds.Type = types.StringValue(string(resp.Source.SourceSnapchatAds.Type))
	}
	if resp.Source.SourceSnowflake != nil {
		r.Source.Snowflake = &SourceSnowflake{}
		r.Source.Snowflake.ConnectionID = types.StringValue(resp.Source.SourceSnowflake.ConnectionID)
		r.Source.Snowflake.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceSnowflake.LastUpdatedColumn)
		r.Source.Snowflake.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSnowflake.LatencyThreshold)
		r.Source.Snowflake.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceSnowflake.PrimaryKeyColumns {
			r.Source.Snowflake.PrimaryKeyColumns = append(r.Source.Snowflake.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.Snowflake.Schema = types.StringPointerValue(resp.Source.SourceSnowflake.Schema)
		r.Source.Snowflake.Table = types.StringPointerValue(resp.Source.SourceSnowflake.Table)
		r.Source.Snowflake.TableNameFilter = types.StringPointerValue(resp.Source.SourceSnowflake.TableNameFilter)
		r.Source.Snowflake.Type = types.StringValue(string(resp.Source.SourceSnowflake.Type))
	}
	if resp.Source.SourceSnowflakeSharded != nil {
		r.Source.SnowflakeSharded = &SourceSnowflakeSharded{}
		r.Source.SnowflakeSharded.ConnectionID = types.StringValue(resp.Source.SourceSnowflakeSharded.ConnectionID)
		r.Source.SnowflakeSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceSnowflakeSharded.LastUpdatedColumn)
		r.Source.SnowflakeSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSnowflakeSharded.LatencyThreshold)
		r.Source.SnowflakeSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceSnowflakeSharded.PrimaryKeyColumns {
			r.Source.SnowflakeSharded.PrimaryKeyColumns = append(r.Source.SnowflakeSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.SnowflakeSharded.Schema = types.StringPointerValue(resp.Source.SourceSnowflakeSharded.Schema)
		r.Source.SnowflakeSharded.Table = types.StringPointerValue(resp.Source.SourceSnowflakeSharded.Table)
		r.Source.SnowflakeSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceSnowflakeSharded.TableNameFilter)
		r.Source.SnowflakeSharded.Type = types.StringValue(string(resp.Source.SourceSnowflakeSharded.Type))
	}
	if resp.Source.SourceSQLServer != nil {
		r.Source.SQLServer = &SourceSQLServer{}
		r.Source.SQLServer.ConnectionID = types.StringValue(resp.Source.SourceSQLServer.ConnectionID)
		r.Source.SQLServer.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceSQLServer.LastUpdatedColumn)
		r.Source.SQLServer.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSQLServer.LatencyThreshold)
		r.Source.SQLServer.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceSQLServer.PrimaryKeyColumns {
			r.Source.SQLServer.PrimaryKeyColumns = append(r.Source.SQLServer.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.SQLServer.Schema = types.StringPointerValue(resp.Source.SourceSQLServer.Schema)
		r.Source.SQLServer.Table = types.StringPointerValue(resp.Source.SourceSQLServer.Table)
		r.Source.SQLServer.TableNameFilter = types.StringPointerValue(resp.Source.SourceSQLServer.TableNameFilter)
		r.Source.SQLServer.Type = types.StringValue(string(resp.Source.SourceSQLServer.Type))
	}
	if resp.Source.SourceSQLServerSharded != nil {
		r.Source.SQLServerSharded = &SourceSQLServerSharded{}
		r.Source.SQLServerSharded.ConnectionID = types.StringValue(resp.Source.SourceSQLServerSharded.ConnectionID)
		r.Source.SQLServerSharded.LastUpdatedColumn = types.StringPointerValue(resp.Source.SourceSQLServerSharded.LastUpdatedColumn)
		r.Source.SQLServerSharded.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSQLServerSharded.LatencyThreshold)
		r.Source.SQLServerSharded.PrimaryKeyColumns = nil
		for _, v := range resp.Source.SourceSQLServerSharded.PrimaryKeyColumns {
			r.Source.SQLServerSharded.PrimaryKeyColumns = append(r.Source.SQLServerSharded.PrimaryKeyColumns, types.StringValue(v))
		}
		r.Source.SQLServerSharded.Schema = types.StringPointerValue(resp.Source.SourceSQLServerSharded.Schema)
		r.Source.SQLServerSharded.Table = types.StringPointerValue(resp.Source.SourceSQLServerSharded.Table)
		r.Source.SQLServerSharded.TableNameFilter = types.StringPointerValue(resp.Source.SourceSQLServerSharded.TableNameFilter)
		r.Source.SQLServerSharded.Type = types.StringValue(string(resp.Source.SourceSQLServerSharded.Type))
	}
	if resp.Source.SourceSquare != nil {
		r.Source.Square = &SourceSquare{}
		r.Source.Square.ConnectionID = types.StringValue(resp.Source.SourceSquare.ConnectionID)
		r.Source.Square.Entity = types.StringValue(resp.Source.SourceSquare.Entity)
		r.Source.Square.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSquare.LatencyThreshold)
		r.Source.Square.Type = types.StringValue(string(resp.Source.SourceSquare.Type))
	}
	if resp.Source.SourceStreaming != nil {
		r.Source.Streaming = &SourceStreaming{}
		r.Source.Streaming.ConnectionID = types.StringValue(resp.Source.SourceStreaming.ConnectionID)
		r.Source.Streaming.FileNameFilter = types.StringPointerValue(resp.Source.SourceStreaming.FileNameFilter)
		r.Source.Streaming.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceStreaming.LatencyThreshold)
		if resp.Source.SourceStreaming.LowWatermark != nil {
			r.Source.Streaming.LowWatermark = types.StringValue(resp.Source.SourceStreaming.LowWatermark.String())
		} else {
			r.Source.Streaming.LowWatermark = types.StringNull()
		}
		r.Source.Streaming.NewFileBehavior = types.StringValue(string(resp.Source.SourceStreaming.NewFileBehavior))
		r.Source.Streaming.Paths = nil
		for _, v := range resp.Source.SourceStreaming.Paths {
			r.Source.Streaming.Paths = append(r.Source.Streaming.Paths, types.StringValue(v))
		}
		r.Source.Streaming.Type = types.StringValue(string(resp.Source.SourceStreaming.Type))
	}
	if resp.Source.SourceStripe != nil {
		r.Source.Stripe = &SourceStripe{}
		r.Source.Stripe.ConnectionID = types.StringValue(resp.Source.SourceStripe.ConnectionID)
		r.Source.Stripe.Entity = types.StringValue(resp.Source.SourceStripe.Entity)
		r.Source.Stripe.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceStripe.LatencyThreshold)
		r.Source.Stripe.Type = types.StringValue(string(resp.Source.SourceStripe.Type))
	}
	if resp.Source.SourceSumTotal != nil {
		r.Source.Sumtotal = &SourceSumTotal{}
		r.Source.Sumtotal.ConnectionID = types.StringValue(resp.Source.SourceSumTotal.ConnectionID)
		r.Source.Sumtotal.Entity = types.StringValue(resp.Source.SourceSumTotal.Entity)
		r.Source.Sumtotal.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceSumTotal.LatencyThreshold)
		r.Source.Sumtotal.Type = types.StringValue(string(resp.Source.SourceSumTotal.Type))
	}
	if resp.Source.SourceTheTradeDesk != nil {
		r.Source.TheTradeDesk = &SourceTheTradeDesk{}
		r.Source.TheTradeDesk.ConnectionID = types.StringValue(resp.Source.SourceTheTradeDesk.ConnectionID)
		r.Source.TheTradeDesk.Entity = types.StringValue(resp.Source.SourceTheTradeDesk.Entity)
		r.Source.TheTradeDesk.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceTheTradeDesk.LatencyThreshold)
		r.Source.TheTradeDesk.Type = types.StringValue(string(resp.Source.SourceTheTradeDesk.Type))
	}
	if resp.Source.SourceTikTokAds != nil {
		r.Source.TikTokAds = &SourceTikTokAds{}
		r.Source.TikTokAds.ConnectionID = types.StringValue(resp.Source.SourceTikTokAds.ConnectionID)
		r.Source.TikTokAds.DataLevel = types.StringPointerValue(resp.Source.SourceTikTokAds.DataLevel)
		r.Source.TikTokAds.Dimensions = nil
		for _, v := range resp.Source.SourceTikTokAds.Dimensions {
			r.Source.TikTokAds.Dimensions = append(r.Source.TikTokAds.Dimensions, types.StringValue(v))
		}
		r.Source.TikTokAds.Entity = types.StringValue(resp.Source.SourceTikTokAds.Entity)
		r.Source.TikTokAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceTikTokAds.LatencyThreshold)
		r.Source.TikTokAds.Metrics = nil
		for _, v := range resp.Source.SourceTikTokAds.Metrics {
			r.Source.TikTokAds.Metrics = append(r.Source.TikTokAds.Metrics, types.StringValue(v))
		}
		r.Source.TikTokAds.Type = types.StringValue(string(resp.Source.SourceTikTokAds.Type))
	}
	if resp.Source.SourceTwilio != nil {
		r.Source.Twilio = &SourceTwilio{}
		r.Source.Twilio.ConnectionID = types.StringValue(resp.Source.SourceTwilio.ConnectionID)
		r.Source.Twilio.Entity = types.StringValue(resp.Source.SourceTwilio.Entity)
		r.Source.Twilio.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceTwilio.LatencyThreshold)
		r.Source.Twilio.Type = types.StringValue(string(resp.Source.SourceTwilio.Type))
	}
	if resp.Source.SourceTwitter != nil {
		r.Source.TwitterAds = &SourceTwitter{}
		r.Source.TwitterAds.ConnectionID = types.StringValue(resp.Source.SourceTwitter.ConnectionID)
		r.Source.TwitterAds.Entity = types.StringValue(resp.Source.SourceTwitter.Entity)
		r.Source.TwitterAds.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceTwitter.LatencyThreshold)
		r.Source.TwitterAds.Type = types.StringValue(string(resp.Source.SourceTwitter.Type))
	}
	if resp.Source.SourceUserDefinedAPI != nil {
		r.Source.UserDefinedAPI = &SourceUserDefinedAPI{}
		r.Source.UserDefinedAPI.ConnectionID = types.StringValue(resp.Source.SourceUserDefinedAPI.ConnectionID)
		r.Source.UserDefinedAPI.Entity = types.StringValue(resp.Source.SourceUserDefinedAPI.Entity)
		r.Source.UserDefinedAPI.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceUserDefinedAPI.LatencyThreshold)
		r.Source.UserDefinedAPI.Type = types.StringValue(string(resp.Source.SourceUserDefinedAPI.Type))
	}
	if resp.Source.SourceUserVoice != nil {
		r.Source.Uservoice = &SourceUserVoice{}
		r.Source.Uservoice.ConnectionID = types.StringValue(resp.Source.SourceUserVoice.ConnectionID)
		r.Source.Uservoice.Entity = types.StringValue(resp.Source.SourceUserVoice.Entity)
		r.Source.Uservoice.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceUserVoice.LatencyThreshold)
		r.Source.Uservoice.Type = types.StringValue(string(resp.Source.SourceUserVoice.Type))
	}
	if resp.Source.SourceVeeva != nil {
		r.Source.Veeva = &SourceVeeva{}
		r.Source.Veeva.ConnectionID = types.StringValue(resp.Source.SourceVeeva.ConnectionID)
		r.Source.Veeva.Entity = types.StringValue(resp.Source.SourceVeeva.Entity)
		r.Source.Veeva.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceVeeva.LatencyThreshold)
		r.Source.Veeva.Type = types.StringValue(string(resp.Source.SourceVeeva.Type))
	}
	if resp.Source.SourceVerizonMediaDsp != nil {
		r.Source.VerizonMediaDsp = &SourceVerizonMediaDsp{}
		r.Source.VerizonMediaDsp.ConnectionID = types.StringValue(resp.Source.SourceVerizonMediaDsp.ConnectionID)
		r.Source.VerizonMediaDsp.Dimensions = nil
		for _, v := range resp.Source.SourceVerizonMediaDsp.Dimensions {
			r.Source.VerizonMediaDsp.Dimensions = append(r.Source.VerizonMediaDsp.Dimensions, types.StringValue(v))
		}
		r.Source.VerizonMediaDsp.Entity = types.StringValue(resp.Source.SourceVerizonMediaDsp.Entity)
		r.Source.VerizonMediaDsp.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceVerizonMediaDsp.LatencyThreshold)
		r.Source.VerizonMediaDsp.Metrics = nil
		for _, v := range resp.Source.SourceVerizonMediaDsp.Metrics {
			r.Source.VerizonMediaDsp.Metrics = append(r.Source.VerizonMediaDsp.Metrics, types.StringValue(v))
		}
		r.Source.VerizonMediaDsp.Type = types.StringValue(string(resp.Source.SourceVerizonMediaDsp.Type))
	}
	if resp.Source.SourceWorkdayReport != nil {
		r.Source.WorkdayReport = &SourceWorkdayReport{}
		r.Source.WorkdayReport.ConnectionID = types.StringValue(resp.Source.SourceWorkdayReport.ConnectionID)
		r.Source.WorkdayReport.Entity = types.StringValue(resp.Source.SourceWorkdayReport.Entity)
		r.Source.WorkdayReport.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceWorkdayReport.LatencyThreshold)
		r.Source.WorkdayReport.Type = types.StringValue(string(resp.Source.SourceWorkdayReport.Type))
	}
	if resp.Source.SourceWorkfront != nil {
		r.Source.Workfront = &SourceWorkfront{}
		r.Source.Workfront.ConnectionID = types.StringValue(resp.Source.SourceWorkfront.ConnectionID)
		r.Source.Workfront.Entity = types.StringValue(resp.Source.SourceWorkfront.Entity)
		r.Source.Workfront.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceWorkfront.LatencyThreshold)
		r.Source.Workfront.Type = types.StringValue(string(resp.Source.SourceWorkfront.Type))
	}
	if resp.Source.SourceZendesk != nil {
		r.Source.Zendesk = &SourceZendesk{}
		r.Source.Zendesk.ConnectionID = types.StringValue(resp.Source.SourceZendesk.ConnectionID)
		r.Source.Zendesk.Entity = types.StringValue(resp.Source.SourceZendesk.Entity)
		r.Source.Zendesk.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceZendesk.LatencyThreshold)
		r.Source.Zendesk.Type = types.StringValue(string(resp.Source.SourceZendesk.Type))
	}
	if resp.Source.SourceZoomPhone != nil {
		r.Source.ZoomPhone = &SourceZoomPhone{}
		r.Source.ZoomPhone.ConnectionID = types.StringValue(resp.Source.SourceZoomPhone.ConnectionID)
		r.Source.ZoomPhone.Entity = types.StringValue(resp.Source.SourceZoomPhone.Entity)
		r.Source.ZoomPhone.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceZoomPhone.LatencyThreshold)
		r.Source.ZoomPhone.Type = types.StringValue(string(resp.Source.SourceZoomPhone.Type))
	}
	if resp.Source.SourceZuora != nil {
		r.Source.Zuora = &SourceZuora{}
		r.Source.Zuora.ConnectionID = types.StringValue(resp.Source.SourceZuora.ConnectionID)
		r.Source.Zuora.Entity = types.StringValue(resp.Source.SourceZuora.Entity)
		r.Source.Zuora.LatencyThreshold = types.Int64PointerValue(resp.Source.SourceZuora.LatencyThreshold)
		r.Source.Zuora.Type = types.StringValue(string(resp.Source.SourceZuora.Type))
	}
	if resp.StopReason != nil {
		r.StopReason = types.StringValue(string(*resp.StopReason))
	} else {
		r.StopReason = types.StringNull()
	}
	if resp.UpdateSchedule == nil {
		r.UpdateSchedule = nil
	} else {
		r.UpdateSchedule = &UpdateScheduleTypes{}
		if resp.UpdateSchedule.UpdateScheduleModeDaily != nil {
			r.UpdateSchedule.Daily = &UpdateScheduleModeDaily{}
			r.UpdateSchedule.Daily.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeDaily.HourOfDay)
			r.UpdateSchedule.Daily.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeDaily.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeHourly != nil {
			r.UpdateSchedule.Hourly = &UpdateScheduleModeHourly{}
			r.UpdateSchedule.Hourly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeHourly.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeInterval != nil {
			r.UpdateSchedule.Interval = &UpdateScheduleModeInterval{}
			r.UpdateSchedule.Interval.IntervalMinutes = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeInterval.IntervalMinutes)
			r.UpdateSchedule.Interval.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeInterval.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeMonthly != nil {
			r.UpdateSchedule.Monthly = &UpdateScheduleModeMonthly{}
			r.UpdateSchedule.Monthly.DayOfMonth = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeMonthly.DayOfMonth)
			r.UpdateSchedule.Monthly.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeMonthly.HourOfDay)
			r.UpdateSchedule.Monthly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeMonthly.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeWeekly != nil {
			r.UpdateSchedule.Weekly = &UpdateScheduleModeWeekly{}
			r.UpdateSchedule.Weekly.DayOfWeek = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeWeekly.DayOfWeek)
			r.UpdateSchedule.Weekly.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeWeekly.HourOfDay)
			r.UpdateSchedule.Weekly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeWeekly.Mode))
		}
	}
}
