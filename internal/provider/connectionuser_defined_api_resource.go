// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	speakeasy_int64planmodifier "github.com/etleap/terraform-provider-etleap/internal/planmodifiers/int64planmodifier"
	speakeasy_listplanmodifier "github.com/etleap/terraform-provider-etleap/internal/planmodifiers/listplanmodifier"
	speakeasy_objectplanmodifier "github.com/etleap/terraform-provider-etleap/internal/planmodifiers/objectplanmodifier"
	speakeasy_stringplanmodifier "github.com/etleap/terraform-provider-etleap/internal/planmodifiers/stringplanmodifier"
	"github.com/etleap/terraform-provider-etleap/internal/sdk"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/models/operations"
	"github.com/etleap/terraform-provider-etleap/internal/validators"
	speakeasy_int64validators "github.com/etleap/terraform-provider-etleap/internal/validators/int64validators"
	speakeasy_listvalidators "github.com/etleap/terraform-provider-etleap/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/etleap/terraform-provider-etleap/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/etleap/terraform-provider-etleap/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ConnectionUSERDEFINEDAPIResource{}
var _ resource.ResourceWithImportState = &ConnectionUSERDEFINEDAPIResource{}

func NewConnectionUSERDEFINEDAPIResource() resource.Resource {
	return &ConnectionUSERDEFINEDAPIResource{}
}

// ConnectionUSERDEFINEDAPIResource defines the resource implementation.
type ConnectionUSERDEFINEDAPIResource struct {
	client *sdk.SDK
}

// ConnectionUSERDEFINEDAPIResourceModel describes the resource data model.
type ConnectionUSERDEFINEDAPIResourceModel struct {
	Active                   types.Bool              `tfsdk:"active"`
	Authentication           Authentication          `tfsdk:"authentication"`
	CreateDate               types.String            `tfsdk:"create_date"`
	DefaultUpdateSchedule    []DefaultUpdateSchedule `tfsdk:"default_update_schedule"`
	DeletionOfExportProducts types.Bool              `tfsdk:"deletion_of_export_products"`
	Entities                 []UserDefinedAPIEntity  `tfsdk:"entities"`
	ID                       types.String            `tfsdk:"id"`
	Name                     types.String            `tfsdk:"name"`
	Status                   types.String            `tfsdk:"status"`
	Type                     types.String            `tfsdk:"type"`
	UpdateSchedule           *UpdateScheduleTypes    `tfsdk:"update_schedule"`
}

func (r *ConnectionUSERDEFINEDAPIResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_connection_user_defined_api"
}

func (r *ConnectionUSERDEFINEDAPIResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "ConnectionUSERDEFINEDAPI Resource",

		Attributes: map[string]schema.Attribute{
			"active": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether this connection has been marked as active.`,
			},
			"authentication": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"basic": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"password": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `The Basic password. This property is stored as a secret in Etleap. Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
							"type": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Default:     stringdefault.StaticString("BASIC"),
								Description: `must be one of ["BASIC"]; Default: "BASIC"`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"BASIC",
									),
								},
							},
							"username": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
						},
						Description: `Authentication method that uses a username/password pair.`,
					},
					"bearer": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"token": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `The Bearer token used for authentication. This property is stored as a secret in Etleap. Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
							"type": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Default:     stringdefault.StaticString("BEARER"),
								Description: `must be one of ["BEARER"]; Default: "BEARER"`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"BEARER",
									),
								},
							},
						},
						Description: `Authentication method that uses a Bearer token.`,
					},
					"header": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"key": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
							"type": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Default:     stringdefault.StaticString("HEADER"),
								Description: `must be one of ["HEADER"]; Default: "HEADER"`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"HEADER",
									),
								},
							},
							"value": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
						},
						Description: `Authentication method that uses a header.`,
					},
				},
				Validators: []validator.Object{
					validators.ExactlyOneChild(),
				},
			},
			"create_date": schema.StringAttribute{
				Computed:    true,
				Description: `The date and time when then the connection was created.`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"default_update_schedule": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"pipeline_mode": schema.StringAttribute{
							Computed:    true,
							Description: `The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details. must be one of ["APPEND", "REPLACE", "UPDATE", "QUERY"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"APPEND",
									"REPLACE",
									"UPDATE",
									"QUERY",
								),
							},
						},
						"update_schedule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"daily": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"hour_of_day": schema.Int64Attribute{
											Computed:    true,
											Description: `Hour of day the  pipeline update should be started at (in UTC).`,
										},
										"mode": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["DAILY"]`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"DAILY",
												),
											},
										},
									},
									Description: `The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information.`,
								},
								"hourly": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"mode": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["HOURLY"]`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"HOURLY",
												),
											},
										},
									},
									Description: `The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information.`,
								},
								"interval": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"interval_minutes": schema.Int64Attribute{
											Computed:    true,
											Description: `Time to wait before new data is pulled (in minutes).`,
										},
										"mode": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["INTERVAL"]`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"INTERVAL",
												),
											},
										},
									},
									Description: `The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information.`,
								},
								"monthly": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"day_of_month": schema.Int64Attribute{
											Computed: true,
										},
										"hour_of_day": schema.Int64Attribute{
											Computed:    true,
											Description: `Hour of day the  pipeline update should be started at (in UTC).`,
										},
										"mode": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["MONTHLY"]`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"MONTHLY",
												),
											},
										},
									},
									Description: `The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information.`,
								},
								"weekly": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"day_of_week": schema.Int64Attribute{
											Computed: true,
										},
										"hour_of_day": schema.Int64Attribute{
											Computed:    true,
											Description: `Hour of day the  pipeline update should be started at (in UTC).`,
										},
										"mode": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["WEEKLY"]`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"WEEKLY",
												),
											},
										},
									},
									Description: `The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information.`,
								},
							},
							Description: `The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.`,
							Validators: []validator.Object{
								validators.ExactlyOneChild(),
							},
						},
					},
				},
				Description: `When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per ` + "`" + `pipelineMode` + "`" + ` and may be subject to change.`,
			},
			"deletion_of_export_products": schema.BoolAttribute{
				Optional:    true,
				Description: `Required for REDSHIFT and SNOWFLAKE connections in the case when there are pipelines that use this connection as a destination, and these pipelines have been migrated to use a different destination. Specifies whether any tables created by these pipelines in this destination should be deleted.`,
			},
			"entities": schema.ListNestedAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"api_url": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `The base URL to fetch data. Note that query parameters for things like pagination and sorting will be appended. Requires replacement if changed. ; Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"columns": schema.ListAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							ElementType: types.StringType,
							Description: `The columns of the entity. Requires replacement if changed. ; Not Null`,
							Validators: []validator.List{
								speakeasy_listvalidators.NotNull(),
								listvalidator.ValueStringsAre(validators.IsValidJSON()),
							},
						},
						"display_name": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `The name of the entity. Requires replacement if changed. ; Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"header_parameters": schema.ListNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; Not Null`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"value": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; Not Null`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
							},
							Description: `A list of headers to be passed with all the requests. Requires replacement if changed. `,
						},
						"id": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `The unique identifier of the entity. Requires replacement if changed. ; Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"paging_strategy": schema.SingleNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"cursor_uri": schema.SingleNestedAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
										speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
									},
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"max_page_size": schema.Int64Attribute{
											Computed: true,
											PlanModifiers: []planmodifier.Int64{
												int64planmodifier.RequiresReplaceIfConfigured(),
												speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Description: `The maximum page size supported by the API. Requires replacement if changed. ; Not Null`,
											Validators: []validator.Int64{
												speakeasy_int64validators.NotNull(),
											},
										},
										"page_size_field_name": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Description: `The name of the request parameter used to specify the page size. Requires replacement if changed. ; Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"path_to_cursor": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Description: `The path to the paging cursor inside the response body. Requires replacement if changed. ; Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"type": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Default:     stringdefault.StaticString("CURSOR_URI"),
											Description: `Requires replacement if changed. ; must be one of ["CURSOR_URI"]; Default: "CURSOR_URI"`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"CURSOR_URI",
												),
											},
										},
										"url_prefix": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Description: `String prepended to the paging cursor string to turn it into a URL, e.g. because the cursor only contains the URL path. Requires replacement if changed. ; Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
									},
									Description: `Paging strategy that uses a cursor to iterate through the results. Requires replacement if changed. `,
								},
								"offset": schema.SingleNestedAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
										speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
									},
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"max_page_size": schema.Int64Attribute{
											Computed: true,
											PlanModifiers: []planmodifier.Int64{
												int64planmodifier.RequiresReplaceIfConfigured(),
												speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Description: `The maximum page size supported by the API. Requires replacement if changed. ; Not Null`,
											Validators: []validator.Int64{
												speakeasy_int64validators.NotNull(),
											},
										},
										"offset_field_name": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Description: `The name of the request parameter used to specify the offset. Requires replacement if changed. ; Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"page_size_field_name": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Description: `The name of the request parameter used to specify the page size. Requires replacement if changed. ; Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"type": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Default:     stringdefault.StaticString("OFFSET"),
											Description: `Requires replacement if changed. ; must be one of ["OFFSET"]; Default: "OFFSET"`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"OFFSET",
												),
											},
										},
									},
									Description: `Paging strategy that is based on a result set offset. Requires replacement if changed. `,
								},
							},
							Description: `The paging strategy. Requires replacement if changed. `,
							Validators: []validator.Object{
								validators.ExactlyOneChild(),
							},
						},
						"path_to_results": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `The [JMESPath](https://jmespath.org/) expression that converts the API response into an array containing one JSON object per record. Requires replacement if changed. ; Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"pipeline_mode": schema.SingleNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"one": schema.StringAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Optional:    true,
									Description: `Requires replacement if changed. ; must be one of ["REPLACE"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"REPLACE",
										),
									},
								},
								"user_defined_api_replace_mode": schema.SingleNestedAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
										speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
									},
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"one": schema.SingleNestedAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Requires replacement if changed. `,
												},
												"two": schema.SingleNestedAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.Object{
														objectplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Attributes:  map[string]schema.Attribute{},
													Description: `Requires replacement if changed. `,
												},
											},
											Description: `Requires replacement if changed. `,
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
										},
										"schema_v1_extended_replace_mode": schema.SingleNestedAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"foreign_key_columns": schema.ListNestedAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.List{
														listplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
													},
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"foreign_column": schema.SingleNestedAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.Object{
																	objectplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
																},
																Optional: true,
																Attributes: map[string]schema.Attribute{
																	"column_path": schema.ListAttribute{
																		Computed: true,
																		PlanModifiers: []planmodifier.List{
																			listplanmodifier.RequiresReplaceIfConfigured(),
																			speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
																		},
																		Optional:    true,
																		ElementType: types.StringType,
																		Description: `Represents the path in the entity schema where the column is located. If the column is at the top level of an entity, use ` + "`" + `Top Level Foreign Key Column` + "`" + ` instead. Requires replacement if changed. ; Not Null`,
																		Validators: []validator.List{
																			speakeasy_listvalidators.NotNull(),
																		},
																	},
																	"referenced_column_name": schema.StringAttribute{
																		Computed: true,
																		PlanModifiers: []planmodifier.String{
																			stringplanmodifier.RequiresReplaceIfConfigured(),
																			speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																		},
																		Optional:    true,
																		Description: `The column name of the referenced entity. Requires replacement if changed. ; Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																		},
																	},
																	"referenced_entity_id": schema.StringAttribute{
																		Computed: true,
																		PlanModifiers: []planmodifier.String{
																			stringplanmodifier.RequiresReplaceIfConfigured(),
																			speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																		},
																		Optional:    true,
																		Description: `The id of the referenced entity. Requires replacement if changed. ; Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																		},
																	},
																},
																Description: `Requires replacement if changed. `,
															},
															"top_level_foreign_key_column": schema.SingleNestedAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.Object{
																	objectplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
																},
																Optional: true,
																Attributes: map[string]schema.Attribute{
																	"column_name": schema.StringAttribute{
																		Computed: true,
																		PlanModifiers: []planmodifier.String{
																			stringplanmodifier.RequiresReplaceIfConfigured(),
																			speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																		},
																		Optional:    true,
																		Description: `The entity's foreign key column. If the column is nested inside the entity's structure and not at the top level, use ` + "`" + `NestedForeignKeyColumn` + "`" + ` instead. Requires replacement if changed. ; Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																		},
																	},
																	"referenced_column_name": schema.StringAttribute{
																		Computed: true,
																		PlanModifiers: []planmodifier.String{
																			stringplanmodifier.RequiresReplaceIfConfigured(),
																			speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																		},
																		Optional:    true,
																		Description: `The column name of the referenced entity. Requires replacement if changed. ; Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																		},
																	},
																	"referenced_entity_id": schema.StringAttribute{
																		Computed: true,
																		PlanModifiers: []planmodifier.String{
																			stringplanmodifier.RequiresReplaceIfConfigured(),
																			speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																		},
																		Optional:    true,
																		Description: `The id of the referenced entity. Requires replacement if changed. ; Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																		},
																	},
																},
																Description: `Requires replacement if changed. `,
															},
														},
														Validators: []validator.Object{
															validators.ExactlyOneChild(),
														},
													},
													Description: `The foreign columns of the entity. Requires replacement if changed. `,
												},
												"primary_key_columns": schema.ListAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.List{
														listplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													ElementType: types.StringType,
													Description: `Requires replacement if changed. ; Not Null`,
													Validators: []validator.List{
														speakeasy_listvalidators.NotNull(),
													},
												},
												"type": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Default:     stringdefault.StaticString("REPLACE"),
													Description: `Requires replacement if changed. ; must be one of ["REPLACE"]; Default: "REPLACE"`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"REPLACE",
														),
													},
												},
											},
											Description: `Requires replacement if changed. `,
										},
									},
									Description: `Requires replacement if changed. `,
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
								},
								"user_defined_api_update_mode": schema.SingleNestedAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
										speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
									},
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"begin_time_parameter": schema.SingleNestedAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"format": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Default:     stringdefault.StaticString("yyyy-MM-ddTHH:mm:ssX"),
													Description: `Requires replacement if changed. ; must be one of ["yyyy-MM-ddTHH:mm:ssX", "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-dd"]; Default: "yyyy-MM-ddTHH:mm:ssX"`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"yyyy-MM-ddTHH:mm:ssX",
															"yyyy-MM-ddTHH:mm:ssZ",
															"yyyy-MM-dd",
														),
													},
												},
												"key": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Requires replacement if changed. ; Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
													},
												},
												"value": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Requires replacement if changed. ; Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
													},
												},
											},
											Description: `Requires replacement if changed. ; Not Null`,
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
										},
										"end_time_parameter": schema.SingleNestedAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"format": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Default:     stringdefault.StaticString("yyyy-MM-ddTHH:mm:ssX"),
													Description: `Requires replacement if changed. ; must be one of ["yyyy-MM-ddTHH:mm:ssX", "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-dd"]; Default: "yyyy-MM-ddTHH:mm:ssX"`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"yyyy-MM-ddTHH:mm:ssX",
															"yyyy-MM-ddTHH:mm:ssZ",
															"yyyy-MM-dd",
														),
													},
												},
												"key": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Requires replacement if changed. ; Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
													},
												},
												"value": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Requires replacement if changed. ; Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
													},
												},
											},
											Description: `Requires replacement if changed. `,
										},
										"foreign_key_columns": schema.ListNestedAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.List{
												listplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
											},
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"foreign_column": schema.SingleNestedAttribute{
														Computed: true,
														PlanModifiers: []planmodifier.Object{
															objectplanmodifier.RequiresReplaceIfConfigured(),
															speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
														},
														Optional: true,
														Attributes: map[string]schema.Attribute{
															"column_path": schema.ListAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.List{
																	listplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
																},
																Optional:    true,
																ElementType: types.StringType,
																Description: `Represents the path in the entity schema where the column is located. If the column is at the top level of an entity, use ` + "`" + `Top Level Foreign Key Column` + "`" + ` instead. Requires replacement if changed. ; Not Null`,
																Validators: []validator.List{
																	speakeasy_listvalidators.NotNull(),
																},
															},
															"referenced_column_name": schema.StringAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.String{
																	stringplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																},
																Optional:    true,
																Description: `The column name of the referenced entity. Requires replacement if changed. ; Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
															"referenced_entity_id": schema.StringAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.String{
																	stringplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																},
																Optional:    true,
																Description: `The id of the referenced entity. Requires replacement if changed. ; Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
														},
														Description: `Requires replacement if changed. `,
													},
													"top_level_foreign_key_column": schema.SingleNestedAttribute{
														Computed: true,
														PlanModifiers: []planmodifier.Object{
															objectplanmodifier.RequiresReplaceIfConfigured(),
															speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
														},
														Optional: true,
														Attributes: map[string]schema.Attribute{
															"column_name": schema.StringAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.String{
																	stringplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																},
																Optional:    true,
																Description: `The entity's foreign key column. If the column is nested inside the entity's structure and not at the top level, use ` + "`" + `NestedForeignKeyColumn` + "`" + ` instead. Requires replacement if changed. ; Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
															"referenced_column_name": schema.StringAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.String{
																	stringplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																},
																Optional:    true,
																Description: `The column name of the referenced entity. Requires replacement if changed. ; Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
															"referenced_entity_id": schema.StringAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.String{
																	stringplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																},
																Optional:    true,
																Description: `The id of the referenced entity. Requires replacement if changed. ; Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
														},
														Description: `Requires replacement if changed. `,
													},
												},
												Validators: []validator.Object{
													validators.ExactlyOneChild(),
												},
											},
											Description: `The foreign columns of the entity. Requires replacement if changed. `,
										},
										"high_watermark_query_parameters": schema.ListNestedAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.List{
												listplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
											},
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"key": schema.StringAttribute{
														Computed: true,
														PlanModifiers: []planmodifier.String{
															stringplanmodifier.RequiresReplaceIfConfigured(),
															speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
														},
														Optional:    true,
														Description: `Requires replacement if changed. ; Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
														},
													},
													"value": schema.StringAttribute{
														Computed: true,
														PlanModifiers: []planmodifier.String{
															stringplanmodifier.RequiresReplaceIfConfigured(),
															speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
														},
														Optional:    true,
														Description: `Requires replacement if changed. ; Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
														},
													},
												},
											},
											Description: `Defines the query parameters to be included when fetching the most recently updated record. E.g., [{"key": "sort", "value": "updated_at"}, {"key": "order", "value": "desc"}]. Requires replacement if changed. ; Not Null`,
											Validators: []validator.List{
												speakeasy_listvalidators.NotNull(),
												listvalidator.SizeAtLeast(1),
											},
										},
										"last_updated_column": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Description: `Requires replacement if changed. ; Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"primary_key_columns": schema.ListAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.List{
												listplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											ElementType: types.StringType,
											Description: `Requires replacement if changed. ; Not Null`,
											Validators: []validator.List{
												speakeasy_listvalidators.NotNull(),
												listvalidator.SizeAtLeast(1),
											},
										},
										"type": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Default:     stringdefault.StaticString("UPDATE"),
											Description: `Requires replacement if changed. ; must be one of ["UPDATE"]; Default: "UPDATE"`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"UPDATE",
												),
											},
										},
									},
									Description: `Requires replacement if changed. `,
								},
							},
							Description: `The pipeline mode. Requires replacement if changed. ; Not Null`,
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
								validators.ExactlyOneChild(),
							},
						},
						"query_parameters": schema.ListNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; Not Null`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"value": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; Not Null`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
							},
							Description: `A list of query parameters to be passed with all the requests. Requires replacement if changed. `,
						},
						"rest_method": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     stringdefault.StaticString("GET"),
							Description: `The HTTP method used to call the apiUrl. Requires replacement if changed. ; must be one of ["GET", "POST"]; Default: "GET"`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"GET",
									"POST",
								),
							},
						},
					},
				},
				Description: `The list of entities. Requires replacement if changed. `,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The unique identifier of the connection.`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `The unique name of this connection.`,
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `The current status of the connection. must be one of ["UNKNOWN", "UP", "DOWN", "RESIZE", "MAINTENANCE", "QUOTA", "CREATING"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"UNKNOWN",
						"UP",
						"DOWN",
						"RESIZE",
						"MAINTENANCE",
						"QUOTA",
						"CREATING",
					),
				},
			},
			"type": schema.StringAttribute{
				Required:    true,
				Description: `must be one of ["USER_DEFINED_API"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"USER_DEFINED_API",
					),
				},
			},
			"update_schedule": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"daily": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"hour_of_day": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Description: `Hour of day the  pipeline update should be started at (in UTC). Not Null`,
								Validators: []validator.Int64{
									speakeasy_int64validators.NotNull(),
								},
							},
							"mode": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null; must be one of ["DAILY"]`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.OneOf(
										"DAILY",
									),
								},
							},
						},
						Description: `The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information.`,
					},
					"hourly": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"mode": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null; must be one of ["HOURLY"]`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.OneOf(
										"HOURLY",
									),
								},
							},
						},
						Description: `The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information.`,
					},
					"interval": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"interval_minutes": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Description: `Time to wait before new data is pulled (in minutes). Not Null`,
								Validators: []validator.Int64{
									speakeasy_int64validators.NotNull(),
								},
							},
							"mode": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null; must be one of ["INTERVAL"]`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.OneOf(
										"INTERVAL",
									),
								},
							},
						},
						Description: `The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information.`,
					},
					"monthly": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"day_of_month": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.Int64{
									speakeasy_int64validators.NotNull(),
								},
							},
							"hour_of_day": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Description: `Hour of day the  pipeline update should be started at (in UTC). Not Null`,
								Validators: []validator.Int64{
									speakeasy_int64validators.NotNull(),
								},
							},
							"mode": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null; must be one of ["MONTHLY"]`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.OneOf(
										"MONTHLY",
									),
								},
							},
						},
						Description: `The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information.`,
					},
					"weekly": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"day_of_week": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.Int64{
									speakeasy_int64validators.NotNull(),
								},
							},
							"hour_of_day": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Description: `Hour of day the  pipeline update should be started at (in UTC). Not Null`,
								Validators: []validator.Int64{
									speakeasy_int64validators.NotNull(),
								},
							},
							"mode": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null; must be one of ["WEEKLY"]`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.OneOf(
										"WEEKLY",
									),
								},
							},
						},
						Description: `The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information.`,
					},
				},
				Description: `The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.`,
				Validators: []validator.Object{
					validators.ExactlyOneChild(),
				},
			},
		},
	}
}

func (r *ConnectionUSERDEFINEDAPIResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ConnectionUSERDEFINEDAPIResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ConnectionUSERDEFINEDAPIResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedConnectionUserDefinedAPIInput()
	res, err := r.client.Connection.CreateUSERDEFINEDAPIConnection(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.ConnectionUserDefinedAPI == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedConnectionUserDefinedAPI(res.ConnectionUserDefinedAPI)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ConnectionUSERDEFINEDAPIResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ConnectionUSERDEFINEDAPIResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.GetUSERDEFINEDAPIConnectionRequest{
		ID: id,
	}
	res, err := r.client.Connection.GetUSERDEFINEDAPIConnection(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.ConnectionUserDefinedAPI == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedConnectionUserDefinedAPI(res.ConnectionUserDefinedAPI)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ConnectionUSERDEFINEDAPIResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ConnectionUSERDEFINEDAPIResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	connectionUserDefinedAPIUpdate := data.ToSharedConnectionUserDefinedAPIUpdate()
	request := operations.UpdateUSERDEFINEDAPIConnectionRequest{
		ID:                             id,
		ConnectionUserDefinedAPIUpdate: connectionUserDefinedAPIUpdate,
	}
	res, err := r.client.Connection.UpdateUSERDEFINEDAPIConnection(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.ConnectionUserDefinedAPI == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedConnectionUserDefinedAPI(res.ConnectionUserDefinedAPI)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	id1 := data.ID.ValueString()
	request1 := operations.GetUSERDEFINEDAPIConnectionRequest{
		ID: id1,
	}
	res1, err := r.client.Connection.GetUSERDEFINEDAPIConnection(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if res1.ConnectionUserDefinedAPI == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedConnectionUserDefinedAPI(res1.ConnectionUserDefinedAPI)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ConnectionUSERDEFINEDAPIResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ConnectionUSERDEFINEDAPIResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	connectionDelete := data.ToSharedConnectionDelete()
	request := operations.DeleteUSERDEFINEDAPIConnectionRequest{
		ID:               id,
		ConnectionDelete: connectionDelete,
	}
	res, err := r.client.Connection.DeleteUSERDEFINEDAPIConnection(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *ConnectionUSERDEFINEDAPIResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
