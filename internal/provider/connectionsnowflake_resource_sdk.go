// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *ConnectionSNOWFLAKEResourceModel) ToSharedConnectionSnowflakeInput() *shared.ConnectionSnowflakeInput {
	name := r.Name.ValueString()
	typeVar := shared.ConnectionSnowflakeType(r.Type.ValueString())
	var updateSchedule *shared.UpdateScheduleTypes
	if r.UpdateSchedule != nil {
		var updateScheduleModeInterval *shared.UpdateScheduleModeInterval
		if r.UpdateSchedule.Interval != nil {
			mode := shared.Mode(r.UpdateSchedule.Interval.Mode.ValueString())
			intervalMinutes := r.UpdateSchedule.Interval.IntervalMinutes.ValueInt64()
			updateScheduleModeInterval = &shared.UpdateScheduleModeInterval{
				Mode:            mode,
				IntervalMinutes: intervalMinutes,
			}
		}
		if updateScheduleModeInterval != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeInterval: updateScheduleModeInterval,
			}
		}
		var updateScheduleModeHourly *shared.UpdateScheduleModeHourly
		if r.UpdateSchedule.Hourly != nil {
			mode1 := shared.UpdateScheduleModeHourlyMode(r.UpdateSchedule.Hourly.Mode.ValueString())
			updateScheduleModeHourly = &shared.UpdateScheduleModeHourly{
				Mode: mode1,
			}
		}
		if updateScheduleModeHourly != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeHourly: updateScheduleModeHourly,
			}
		}
		var updateScheduleModeDaily *shared.UpdateScheduleModeDaily
		if r.UpdateSchedule.Daily != nil {
			mode2 := shared.UpdateScheduleModeDailyMode(r.UpdateSchedule.Daily.Mode.ValueString())
			hourOfDay := r.UpdateSchedule.Daily.HourOfDay.ValueInt64()
			updateScheduleModeDaily = &shared.UpdateScheduleModeDaily{
				Mode:      mode2,
				HourOfDay: hourOfDay,
			}
		}
		if updateScheduleModeDaily != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeDaily: updateScheduleModeDaily,
			}
		}
		var updateScheduleModeWeekly *shared.UpdateScheduleModeWeekly
		if r.UpdateSchedule.Weekly != nil {
			mode3 := shared.UpdateScheduleModeWeeklyMode(r.UpdateSchedule.Weekly.Mode.ValueString())
			dayOfWeek := r.UpdateSchedule.Weekly.DayOfWeek.ValueInt64()
			hourOfDay1 := r.UpdateSchedule.Weekly.HourOfDay.ValueInt64()
			updateScheduleModeWeekly = &shared.UpdateScheduleModeWeekly{
				Mode:      mode3,
				DayOfWeek: dayOfWeek,
				HourOfDay: hourOfDay1,
			}
		}
		if updateScheduleModeWeekly != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeWeekly: updateScheduleModeWeekly,
			}
		}
		var updateScheduleModeMonthly *shared.UpdateScheduleModeMonthly
		if r.UpdateSchedule.Monthly != nil {
			mode4 := shared.UpdateScheduleModeMonthlyMode(r.UpdateSchedule.Monthly.Mode.ValueString())
			dayOfMonth := r.UpdateSchedule.Monthly.DayOfMonth.ValueInt64()
			hourOfDay2 := r.UpdateSchedule.Monthly.HourOfDay.ValueInt64()
			updateScheduleModeMonthly = &shared.UpdateScheduleModeMonthly{
				Mode:       mode4,
				DayOfMonth: dayOfMonth,
				HourOfDay:  hourOfDay2,
			}
		}
		if updateScheduleModeMonthly != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeMonthly: updateScheduleModeMonthly,
			}
		}
	}
	schema := new(string)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = r.Schema.ValueString()
	} else {
		schema = nil
	}
	var roles []string = nil
	for _, rolesItem := range r.Roles {
		roles = append(roles, rolesItem.ValueString())
	}
	sourceOnly := new(bool)
	if !r.SourceOnly.IsUnknown() && !r.SourceOnly.IsNull() {
		*sourceOnly = r.SourceOnly.ValueBool()
	} else {
		sourceOnly = nil
	}
	address := r.Address.ValueString()
	database := r.Database.ValueString()
	warehouse := r.Warehouse.ValueString()
	username := r.Username.ValueString()
	password := new(string)
	if !r.Password.IsUnknown() && !r.Password.IsNull() {
		*password = r.Password.ValueString()
	} else {
		password = nil
	}
	role := new(string)
	if !r.Role.IsUnknown() && !r.Role.IsNull() {
		*role = r.Role.ValueString()
	} else {
		role = nil
	}
	var authentication *shared.SnowflakeAuthenticationTypes
	if r.Authentication != nil {
		var snowflakeAuthenticationKeyPair *shared.SnowflakeAuthenticationKeyPair
		if r.Authentication.KeyPair != nil {
			typeVar1 := shared.SnowflakeAuthenticationKeyPairType(r.Authentication.KeyPair.Type.ValueString())
			privateKey := r.Authentication.KeyPair.PrivateKey.ValueString()
			privateKeyPassphrase := new(string)
			if !r.Authentication.KeyPair.PrivateKeyPassphrase.IsUnknown() && !r.Authentication.KeyPair.PrivateKeyPassphrase.IsNull() {
				*privateKeyPassphrase = r.Authentication.KeyPair.PrivateKeyPassphrase.ValueString()
			} else {
				privateKeyPassphrase = nil
			}
			snowflakeAuthenticationKeyPair = &shared.SnowflakeAuthenticationKeyPair{
				Type:                 typeVar1,
				PrivateKey:           privateKey,
				PrivateKeyPassphrase: privateKeyPassphrase,
			}
		}
		if snowflakeAuthenticationKeyPair != nil {
			authentication = &shared.SnowflakeAuthenticationTypes{
				SnowflakeAuthenticationKeyPair: snowflakeAuthenticationKeyPair,
			}
		}
		var snowflakeAuthenticationPassword *shared.SnowflakeAuthenticationPassword
		if r.Authentication.Password != nil {
			typeVar2 := shared.SnowflakeAuthenticationPasswordType(r.Authentication.Password.Type.ValueString())
			password1 := r.Authentication.Password.Password.ValueString()
			snowflakeAuthenticationPassword = &shared.SnowflakeAuthenticationPassword{
				Type:     typeVar2,
				Password: password1,
			}
		}
		if snowflakeAuthenticationPassword != nil {
			authentication = &shared.SnowflakeAuthenticationTypes{
				SnowflakeAuthenticationPassword: snowflakeAuthenticationPassword,
			}
		}
	}
	out := shared.ConnectionSnowflakeInput{
		Name:           name,
		Type:           typeVar,
		UpdateSchedule: updateSchedule,
		Schema:         schema,
		Roles:          roles,
		SourceOnly:     sourceOnly,
		Address:        address,
		Database:       database,
		Warehouse:      warehouse,
		Username:       username,
		Password:       password,
		Role:           role,
		Authentication: authentication,
	}
	return &out
}

func (r *ConnectionSNOWFLAKEResourceModel) RefreshFromSharedConnectionSnowflake(resp *shared.ConnectionSnowflake) {
	r.Active = types.BoolValue(resp.Active)
	r.Address = types.StringValue(resp.Address)
	if resp.Authentication == nil {
		r.Authentication = nil
	} else {
		r.Authentication = &SnowflakeAuthenticationTypes{}
		if resp.Authentication.SnowflakeAuthenticationKeyPairOutput != nil {
			r.Authentication.KeyPair = &SnowflakeAuthenticationKeyPair{}
			r.Authentication.KeyPair.PublicKey = types.StringValue(resp.Authentication.SnowflakeAuthenticationKeyPairOutput.PublicKey)
			r.Authentication.KeyPair.Type = types.StringValue(string(resp.Authentication.SnowflakeAuthenticationKeyPairOutput.Type))
		}
		if resp.Authentication.SnowflakeAuthenticationPasswordOutput != nil {
			r.Authentication.Password = &SnowflakeAuthenticationPassword{}
			r.Authentication.Password.Type = types.StringValue(string(resp.Authentication.SnowflakeAuthenticationPasswordOutput.Type))
		}
	}
	r.CreateDate = types.StringValue(resp.CreateDate.Format(time.RFC3339Nano))
	r.Database = types.StringValue(resp.Database)
	if len(r.DefaultUpdateSchedule) > len(resp.DefaultUpdateSchedule) {
		r.DefaultUpdateSchedule = r.DefaultUpdateSchedule[:len(resp.DefaultUpdateSchedule)]
	}
	for defaultUpdateScheduleCount, defaultUpdateScheduleItem := range resp.DefaultUpdateSchedule {
		var defaultUpdateSchedule1 DefaultUpdateSchedule
		if defaultUpdateScheduleItem.PipelineMode != nil {
			defaultUpdateSchedule1.PipelineMode = types.StringValue(string(*defaultUpdateScheduleItem.PipelineMode))
		} else {
			defaultUpdateSchedule1.PipelineMode = types.StringNull()
		}
		if defaultUpdateScheduleItem.UpdateSchedule == nil {
			defaultUpdateSchedule1.UpdateSchedule = nil
		} else {
			defaultUpdateSchedule1.UpdateSchedule = &UpdateScheduleTypes{}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeDaily != nil {
				defaultUpdateSchedule1.UpdateSchedule.Daily = &UpdateScheduleModeDaily{}
				defaultUpdateSchedule1.UpdateSchedule.Daily.HourOfDay = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeDaily.HourOfDay)
				defaultUpdateSchedule1.UpdateSchedule.Daily.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeDaily.Mode))
			}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeHourly != nil {
				defaultUpdateSchedule1.UpdateSchedule.Hourly = &UpdateScheduleModeHourly{}
				defaultUpdateSchedule1.UpdateSchedule.Hourly.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeHourly.Mode))
			}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeInterval != nil {
				defaultUpdateSchedule1.UpdateSchedule.Interval = &UpdateScheduleModeInterval{}
				defaultUpdateSchedule1.UpdateSchedule.Interval.IntervalMinutes = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeInterval.IntervalMinutes)
				defaultUpdateSchedule1.UpdateSchedule.Interval.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeInterval.Mode))
			}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeMonthly != nil {
				defaultUpdateSchedule1.UpdateSchedule.Monthly = &UpdateScheduleModeMonthly{}
				defaultUpdateSchedule1.UpdateSchedule.Monthly.DayOfMonth = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeMonthly.DayOfMonth)
				defaultUpdateSchedule1.UpdateSchedule.Monthly.HourOfDay = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeMonthly.HourOfDay)
				defaultUpdateSchedule1.UpdateSchedule.Monthly.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeMonthly.Mode))
			}
			if defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeWeekly != nil {
				defaultUpdateSchedule1.UpdateSchedule.Weekly = &UpdateScheduleModeWeekly{}
				defaultUpdateSchedule1.UpdateSchedule.Weekly.DayOfWeek = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeWeekly.DayOfWeek)
				defaultUpdateSchedule1.UpdateSchedule.Weekly.HourOfDay = types.Int64Value(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeWeekly.HourOfDay)
				defaultUpdateSchedule1.UpdateSchedule.Weekly.Mode = types.StringValue(string(defaultUpdateScheduleItem.UpdateSchedule.UpdateScheduleModeWeekly.Mode))
			}
		}
		if defaultUpdateScheduleCount+1 > len(r.DefaultUpdateSchedule) {
			r.DefaultUpdateSchedule = append(r.DefaultUpdateSchedule, defaultUpdateSchedule1)
		} else {
			r.DefaultUpdateSchedule[defaultUpdateScheduleCount].PipelineMode = defaultUpdateSchedule1.PipelineMode
			r.DefaultUpdateSchedule[defaultUpdateScheduleCount].UpdateSchedule = defaultUpdateSchedule1.UpdateSchedule
		}
	}
	r.ID = types.StringValue(resp.ID)
	r.Name = types.StringValue(resp.Name)
	r.Role = types.StringPointerValue(resp.Role)
	r.Roles = nil
	for _, v := range resp.Roles {
		r.Roles = append(r.Roles, types.StringValue(v))
	}
	r.Schema = types.StringPointerValue(resp.Schema)
	r.SourceOnly = types.BoolPointerValue(resp.SourceOnly)
	r.Status = types.StringValue(string(resp.Status))
	r.Type = types.StringValue(string(resp.Type))
	if resp.UpdateSchedule == nil {
		r.UpdateSchedule = nil
	} else {
		r.UpdateSchedule = &UpdateScheduleTypes{}
		if resp.UpdateSchedule.UpdateScheduleModeDaily != nil {
			r.UpdateSchedule.Daily = &UpdateScheduleModeDaily{}
			r.UpdateSchedule.Daily.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeDaily.HourOfDay)
			r.UpdateSchedule.Daily.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeDaily.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeHourly != nil {
			r.UpdateSchedule.Hourly = &UpdateScheduleModeHourly{}
			r.UpdateSchedule.Hourly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeHourly.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeInterval != nil {
			r.UpdateSchedule.Interval = &UpdateScheduleModeInterval{}
			r.UpdateSchedule.Interval.IntervalMinutes = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeInterval.IntervalMinutes)
			r.UpdateSchedule.Interval.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeInterval.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeMonthly != nil {
			r.UpdateSchedule.Monthly = &UpdateScheduleModeMonthly{}
			r.UpdateSchedule.Monthly.DayOfMonth = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeMonthly.DayOfMonth)
			r.UpdateSchedule.Monthly.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeMonthly.HourOfDay)
			r.UpdateSchedule.Monthly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeMonthly.Mode))
		}
		if resp.UpdateSchedule.UpdateScheduleModeWeekly != nil {
			r.UpdateSchedule.Weekly = &UpdateScheduleModeWeekly{}
			r.UpdateSchedule.Weekly.DayOfWeek = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeWeekly.DayOfWeek)
			r.UpdateSchedule.Weekly.HourOfDay = types.Int64Value(resp.UpdateSchedule.UpdateScheduleModeWeekly.HourOfDay)
			r.UpdateSchedule.Weekly.Mode = types.StringValue(string(resp.UpdateSchedule.UpdateScheduleModeWeekly.Mode))
		}
	}
	r.Username = types.StringValue(resp.Username)
	r.Warehouse = types.StringValue(resp.Warehouse)
}

func (r *ConnectionSNOWFLAKEResourceModel) ToSharedConnectionSnowflakeUpdate() *shared.ConnectionSnowflakeUpdate {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	typeVar := shared.ConnectionSnowflakeUpdateType(r.Type.ValueString())
	active := new(bool)
	if !r.Active.IsUnknown() && !r.Active.IsNull() {
		*active = r.Active.ValueBool()
	} else {
		active = nil
	}
	var updateSchedule *shared.UpdateScheduleTypes
	if r.UpdateSchedule != nil {
		var updateScheduleModeInterval *shared.UpdateScheduleModeInterval
		if r.UpdateSchedule.Interval != nil {
			mode := shared.Mode(r.UpdateSchedule.Interval.Mode.ValueString())
			intervalMinutes := r.UpdateSchedule.Interval.IntervalMinutes.ValueInt64()
			updateScheduleModeInterval = &shared.UpdateScheduleModeInterval{
				Mode:            mode,
				IntervalMinutes: intervalMinutes,
			}
		}
		if updateScheduleModeInterval != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeInterval: updateScheduleModeInterval,
			}
		}
		var updateScheduleModeHourly *shared.UpdateScheduleModeHourly
		if r.UpdateSchedule.Hourly != nil {
			mode1 := shared.UpdateScheduleModeHourlyMode(r.UpdateSchedule.Hourly.Mode.ValueString())
			updateScheduleModeHourly = &shared.UpdateScheduleModeHourly{
				Mode: mode1,
			}
		}
		if updateScheduleModeHourly != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeHourly: updateScheduleModeHourly,
			}
		}
		var updateScheduleModeDaily *shared.UpdateScheduleModeDaily
		if r.UpdateSchedule.Daily != nil {
			mode2 := shared.UpdateScheduleModeDailyMode(r.UpdateSchedule.Daily.Mode.ValueString())
			hourOfDay := r.UpdateSchedule.Daily.HourOfDay.ValueInt64()
			updateScheduleModeDaily = &shared.UpdateScheduleModeDaily{
				Mode:      mode2,
				HourOfDay: hourOfDay,
			}
		}
		if updateScheduleModeDaily != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeDaily: updateScheduleModeDaily,
			}
		}
		var updateScheduleModeWeekly *shared.UpdateScheduleModeWeekly
		if r.UpdateSchedule.Weekly != nil {
			mode3 := shared.UpdateScheduleModeWeeklyMode(r.UpdateSchedule.Weekly.Mode.ValueString())
			dayOfWeek := r.UpdateSchedule.Weekly.DayOfWeek.ValueInt64()
			hourOfDay1 := r.UpdateSchedule.Weekly.HourOfDay.ValueInt64()
			updateScheduleModeWeekly = &shared.UpdateScheduleModeWeekly{
				Mode:      mode3,
				DayOfWeek: dayOfWeek,
				HourOfDay: hourOfDay1,
			}
		}
		if updateScheduleModeWeekly != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeWeekly: updateScheduleModeWeekly,
			}
		}
		var updateScheduleModeMonthly *shared.UpdateScheduleModeMonthly
		if r.UpdateSchedule.Monthly != nil {
			mode4 := shared.UpdateScheduleModeMonthlyMode(r.UpdateSchedule.Monthly.Mode.ValueString())
			dayOfMonth := r.UpdateSchedule.Monthly.DayOfMonth.ValueInt64()
			hourOfDay2 := r.UpdateSchedule.Monthly.HourOfDay.ValueInt64()
			updateScheduleModeMonthly = &shared.UpdateScheduleModeMonthly{
				Mode:       mode4,
				DayOfMonth: dayOfMonth,
				HourOfDay:  hourOfDay2,
			}
		}
		if updateScheduleModeMonthly != nil {
			updateSchedule = &shared.UpdateScheduleTypes{
				UpdateScheduleModeMonthly: updateScheduleModeMonthly,
			}
		}
	}
	schema := new(string)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = r.Schema.ValueString()
	} else {
		schema = nil
	}
	var roles []string = nil
	for _, rolesItem := range r.Roles {
		roles = append(roles, rolesItem.ValueString())
	}
	sourceOnly := new(bool)
	if !r.SourceOnly.IsUnknown() && !r.SourceOnly.IsNull() {
		*sourceOnly = r.SourceOnly.ValueBool()
	} else {
		sourceOnly = nil
	}
	address := new(string)
	if !r.Address.IsUnknown() && !r.Address.IsNull() {
		*address = r.Address.ValueString()
	} else {
		address = nil
	}
	database := new(string)
	if !r.Database.IsUnknown() && !r.Database.IsNull() {
		*database = r.Database.ValueString()
	} else {
		database = nil
	}
	warehouse := new(string)
	if !r.Warehouse.IsUnknown() && !r.Warehouse.IsNull() {
		*warehouse = r.Warehouse.ValueString()
	} else {
		warehouse = nil
	}
	username := new(string)
	if !r.Username.IsUnknown() && !r.Username.IsNull() {
		*username = r.Username.ValueString()
	} else {
		username = nil
	}
	password := new(string)
	if !r.Password.IsUnknown() && !r.Password.IsNull() {
		*password = r.Password.ValueString()
	} else {
		password = nil
	}
	role := new(string)
	if !r.Role.IsUnknown() && !r.Role.IsNull() {
		*role = r.Role.ValueString()
	} else {
		role = nil
	}
	var authentication *shared.SnowflakeAuthenticationTypes
	if r.Authentication != nil {
		var snowflakeAuthenticationKeyPair *shared.SnowflakeAuthenticationKeyPair
		if r.Authentication.KeyPair != nil {
			typeVar1 := shared.SnowflakeAuthenticationKeyPairType(r.Authentication.KeyPair.Type.ValueString())
			privateKey := r.Authentication.KeyPair.PrivateKey.ValueString()
			privateKeyPassphrase := new(string)
			if !r.Authentication.KeyPair.PrivateKeyPassphrase.IsUnknown() && !r.Authentication.KeyPair.PrivateKeyPassphrase.IsNull() {
				*privateKeyPassphrase = r.Authentication.KeyPair.PrivateKeyPassphrase.ValueString()
			} else {
				privateKeyPassphrase = nil
			}
			snowflakeAuthenticationKeyPair = &shared.SnowflakeAuthenticationKeyPair{
				Type:                 typeVar1,
				PrivateKey:           privateKey,
				PrivateKeyPassphrase: privateKeyPassphrase,
			}
		}
		if snowflakeAuthenticationKeyPair != nil {
			authentication = &shared.SnowflakeAuthenticationTypes{
				SnowflakeAuthenticationKeyPair: snowflakeAuthenticationKeyPair,
			}
		}
		var snowflakeAuthenticationPassword *shared.SnowflakeAuthenticationPassword
		if r.Authentication.Password != nil {
			typeVar2 := shared.SnowflakeAuthenticationPasswordType(r.Authentication.Password.Type.ValueString())
			password1 := r.Authentication.Password.Password.ValueString()
			snowflakeAuthenticationPassword = &shared.SnowflakeAuthenticationPassword{
				Type:     typeVar2,
				Password: password1,
			}
		}
		if snowflakeAuthenticationPassword != nil {
			authentication = &shared.SnowflakeAuthenticationTypes{
				SnowflakeAuthenticationPassword: snowflakeAuthenticationPassword,
			}
		}
	}
	out := shared.ConnectionSnowflakeUpdate{
		Name:           name,
		Type:           typeVar,
		Active:         active,
		UpdateSchedule: updateSchedule,
		Schema:         schema,
		Roles:          roles,
		SourceOnly:     sourceOnly,
		Address:        address,
		Database:       database,
		Warehouse:      warehouse,
		Username:       username,
		Password:       password,
		Role:           role,
		Authentication: authentication,
	}
	return &out
}

func (r *ConnectionSNOWFLAKEResourceModel) ToSharedConnectionDelete() *shared.ConnectionDelete {
	deletionOfExportProducts := new(bool)
	if !r.DeletionOfExportProducts.IsUnknown() && !r.DeletionOfExportProducts.IsNull() {
		*deletionOfExportProducts = r.DeletionOfExportProducts.ValueBool()
	} else {
		deletionOfExportProducts = nil
	}
	out := shared.ConnectionDelete{
		DeletionOfExportProducts: deletionOfExportProducts,
	}
	return &out
}
