// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionJiraCloudType string

const (
	ConnectionJiraCloudTypeJiraCloud ConnectionJiraCloudType = "JIRA_CLOUD"
)

func (e ConnectionJiraCloudType) ToPointer() *ConnectionJiraCloudType {
	return &e
}

func (e *ConnectionJiraCloudType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JIRA_CLOUD":
		*e = ConnectionJiraCloudType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionJiraCloudType: %v", v)
	}
}

// ConnectionJiraCloudStatus - The current status of the connection.
type ConnectionJiraCloudStatus string

const (
	ConnectionJiraCloudStatusUnknown     ConnectionJiraCloudStatus = "UNKNOWN"
	ConnectionJiraCloudStatusUp          ConnectionJiraCloudStatus = "UP"
	ConnectionJiraCloudStatusDown        ConnectionJiraCloudStatus = "DOWN"
	ConnectionJiraCloudStatusResize      ConnectionJiraCloudStatus = "RESIZE"
	ConnectionJiraCloudStatusMaintenance ConnectionJiraCloudStatus = "MAINTENANCE"
	ConnectionJiraCloudStatusQuota       ConnectionJiraCloudStatus = "QUOTA"
	ConnectionJiraCloudStatusCreating    ConnectionJiraCloudStatus = "CREATING"
)

func (e ConnectionJiraCloudStatus) ToPointer() *ConnectionJiraCloudStatus {
	return &e
}

func (e *ConnectionJiraCloudStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionJiraCloudStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionJiraCloudStatus: %v", v)
	}
}

type ConnectionJiraCloudDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionJiraCloudDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionJiraCloudDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionJiraCloudDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionJiraCloudDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionJiraCloudDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionJiraCloudDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionJiraCloudDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

type ConnectionJiraCloud struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionJiraCloudType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionJiraCloudStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionJiraCloudDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
}

func (c ConnectionJiraCloud) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionJiraCloud) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionJiraCloud) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionJiraCloud) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionJiraCloud) GetType() ConnectionJiraCloudType {
	if o == nil {
		return ConnectionJiraCloudType("")
	}
	return o.Type
}

func (o *ConnectionJiraCloud) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionJiraCloud) GetStatus() ConnectionJiraCloudStatus {
	if o == nil {
		return ConnectionJiraCloudStatus("")
	}
	return o.Status
}

func (o *ConnectionJiraCloud) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionJiraCloud) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionJiraCloud) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionJiraCloud) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionJiraCloud) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionJiraCloud) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionJiraCloud) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionJiraCloud) GetDefaultUpdateSchedule() []ConnectionJiraCloudDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionJiraCloudDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

type ConnectionJiraCloudInput struct {
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionJiraCloudType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Code retrieved from `/connections/oauth2-initiation`. **Note:** it is short-lived, therefore the connection creation should be done as soon as code is returned.
	Code string `json:"code"`
}

func (o *ConnectionJiraCloudInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionJiraCloudInput) GetType() ConnectionJiraCloudType {
	if o == nil {
		return ConnectionJiraCloudType("")
	}
	return o.Type
}

func (o *ConnectionJiraCloudInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionJiraCloudInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionJiraCloudInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionJiraCloudInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionJiraCloudInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionJiraCloudInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionJiraCloudInput) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}
