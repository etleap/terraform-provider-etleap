// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionUserDefinedAPIType string

const (
	ConnectionUserDefinedAPITypeUserDefinedAPI ConnectionUserDefinedAPIType = "USER_DEFINED_API"
)

func (e ConnectionUserDefinedAPIType) ToPointer() *ConnectionUserDefinedAPIType {
	return &e
}

func (e *ConnectionUserDefinedAPIType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USER_DEFINED_API":
		*e = ConnectionUserDefinedAPIType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionUserDefinedAPIType: %v", v)
	}
}

// ConnectionUserDefinedAPIStatus - The current status of the connection.
type ConnectionUserDefinedAPIStatus string

const (
	ConnectionUserDefinedAPIStatusUnknown     ConnectionUserDefinedAPIStatus = "UNKNOWN"
	ConnectionUserDefinedAPIStatusUp          ConnectionUserDefinedAPIStatus = "UP"
	ConnectionUserDefinedAPIStatusDown        ConnectionUserDefinedAPIStatus = "DOWN"
	ConnectionUserDefinedAPIStatusResize      ConnectionUserDefinedAPIStatus = "RESIZE"
	ConnectionUserDefinedAPIStatusMaintenance ConnectionUserDefinedAPIStatus = "MAINTENANCE"
	ConnectionUserDefinedAPIStatusQuota       ConnectionUserDefinedAPIStatus = "QUOTA"
	ConnectionUserDefinedAPIStatusCreating    ConnectionUserDefinedAPIStatus = "CREATING"
)

func (e ConnectionUserDefinedAPIStatus) ToPointer() *ConnectionUserDefinedAPIStatus {
	return &e
}

func (e *ConnectionUserDefinedAPIStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionUserDefinedAPIStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionUserDefinedAPIStatus: %v", v)
	}
}

type ConnectionUserDefinedAPIDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionUserDefinedAPIDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionUserDefinedAPIDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionUserDefinedAPIDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionUserDefinedAPIDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionUserDefinedAPIDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionUserDefinedAPIDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionUserDefinedAPIDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

type ConnectionUserDefinedAPI struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                       `json:"name"`
	Type ConnectionUserDefinedAPIType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionUserDefinedAPIStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionUserDefinedAPIDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	Authentication        Authentication                                  `json:"authentication"`
	// The list of entities.
	Entities []UserDefinedAPIEntity `json:"entities"`
}

func (c ConnectionUserDefinedAPI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionUserDefinedAPI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionUserDefinedAPI) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionUserDefinedAPI) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionUserDefinedAPI) GetType() ConnectionUserDefinedAPIType {
	if o == nil {
		return ConnectionUserDefinedAPIType("")
	}
	return o.Type
}

func (o *ConnectionUserDefinedAPI) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionUserDefinedAPI) GetStatus() ConnectionUserDefinedAPIStatus {
	if o == nil {
		return ConnectionUserDefinedAPIStatus("")
	}
	return o.Status
}

func (o *ConnectionUserDefinedAPI) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionUserDefinedAPI) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionUserDefinedAPI) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionUserDefinedAPI) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionUserDefinedAPI) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionUserDefinedAPI) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionUserDefinedAPI) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionUserDefinedAPI) GetDefaultUpdateSchedule() []ConnectionUserDefinedAPIDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionUserDefinedAPIDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionUserDefinedAPI) GetAuthentication() Authentication {
	if o == nil {
		return Authentication{}
	}
	return o.Authentication
}

func (o *ConnectionUserDefinedAPI) GetAuthenticationBasic() *BasicAuthentication {
	return o.GetAuthentication().BasicAuthentication
}

func (o *ConnectionUserDefinedAPI) GetAuthenticationBearer() *BearerAuthentication {
	return o.GetAuthentication().BearerAuthentication
}

func (o *ConnectionUserDefinedAPI) GetAuthenticationHeader() *HeaderAuthentication {
	return o.GetAuthentication().HeaderAuthentication
}

func (o *ConnectionUserDefinedAPI) GetEntities() []UserDefinedAPIEntity {
	if o == nil {
		return []UserDefinedAPIEntity{}
	}
	return o.Entities
}

type ConnectionUserDefinedAPIInput struct {
	// The unique name of this connection.
	Name string                       `json:"name"`
	Type ConnectionUserDefinedAPIType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	Authentication Authentication       `json:"authentication"`
	// The list of entities.
	Entities []UserDefinedAPIEntity `json:"entities"`
}

func (o *ConnectionUserDefinedAPIInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionUserDefinedAPIInput) GetType() ConnectionUserDefinedAPIType {
	if o == nil {
		return ConnectionUserDefinedAPIType("")
	}
	return o.Type
}

func (o *ConnectionUserDefinedAPIInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionUserDefinedAPIInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionUserDefinedAPIInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionUserDefinedAPIInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionUserDefinedAPIInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionUserDefinedAPIInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionUserDefinedAPIInput) GetAuthentication() Authentication {
	if o == nil {
		return Authentication{}
	}
	return o.Authentication
}

func (o *ConnectionUserDefinedAPIInput) GetAuthenticationBasic() *BasicAuthentication {
	return o.GetAuthentication().BasicAuthentication
}

func (o *ConnectionUserDefinedAPIInput) GetAuthenticationBearer() *BearerAuthentication {
	return o.GetAuthentication().BearerAuthentication
}

func (o *ConnectionUserDefinedAPIInput) GetAuthenticationHeader() *HeaderAuthentication {
	return o.GetAuthentication().HeaderAuthentication
}

func (o *ConnectionUserDefinedAPIInput) GetEntities() []UserDefinedAPIEntity {
	if o == nil {
		return []UserDefinedAPIEntity{}
	}
	return o.Entities
}
