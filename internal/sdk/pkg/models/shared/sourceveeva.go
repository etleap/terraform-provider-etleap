// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceVeevaType string

const (
	SourceVeevaTypeVeeva SourceVeevaType = "VEEVA"
)

func (e SourceVeevaType) ToPointer() *SourceVeevaType {
	return &e
}

func (e *SourceVeevaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VEEVA":
		*e = SourceVeevaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceVeevaType: %v", v)
	}
}

type SourceVeeva struct {
	Type SourceVeevaType `json:"type"`
	// The universally unique identifier for the source.
	ConnectionID string `json:"connectionId"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// The Veeva Entity name. Example values: [APQR, APQR Item, Action, Activity, Admin Link, Admin Section, Admin Section Controller Code, Answer Library Design, Application Context Selector, Application License Model, Application License Model Field, Application Manifest, Application Provisioner, Application Role]
	Entity string `json:"entity"`
}

func (o *SourceVeeva) GetType() SourceVeevaType {
	if o == nil {
		return SourceVeevaType("")
	}
	return o.Type
}

func (o *SourceVeeva) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceVeeva) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceVeeva) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}
