// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type GrantWithPrivilegeType string

const (
	GrantWithPrivilegeTypeUser GrantWithPrivilegeType = "USER"
	GrantWithPrivilegeTypeTeam GrantWithPrivilegeType = "TEAM"
)

// GrantWithPrivilege - An access grant with privilege to an object in Etleap. A grant can provide access for a user or a team.
type GrantWithPrivilege struct {
	GrantWithPrivilegeUser *GrantWithPrivilegeUser
	GrantWithPrivilegeTeam *GrantWithPrivilegeTeam

	Type GrantWithPrivilegeType
}

func CreateGrantWithPrivilegeUser(user GrantWithPrivilegeUser) GrantWithPrivilege {
	typ := GrantWithPrivilegeTypeUser

	typStr := GrantWithPrivilegeUserType(typ)
	user.Type = typStr

	return GrantWithPrivilege{
		GrantWithPrivilegeUser: &user,
		Type:                   typ,
	}
}

func CreateGrantWithPrivilegeTeam(team GrantWithPrivilegeTeam) GrantWithPrivilege {
	typ := GrantWithPrivilegeTypeTeam

	typStr := GrantWithPrivilegeTeamType(typ)
	team.Type = typStr

	return GrantWithPrivilege{
		GrantWithPrivilegeTeam: &team,
		Type:                   typ,
	}
}

func (u *GrantWithPrivilege) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "USER":
		grantWithPrivilegeUser := new(GrantWithPrivilegeUser)
		if err := utils.UnmarshalJSON(data, &grantWithPrivilegeUser, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GrantWithPrivilegeUser = grantWithPrivilegeUser
		u.Type = GrantWithPrivilegeTypeUser
		return nil
	case "TEAM":
		grantWithPrivilegeTeam := new(GrantWithPrivilegeTeam)
		if err := utils.UnmarshalJSON(data, &grantWithPrivilegeTeam, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GrantWithPrivilegeTeam = grantWithPrivilegeTeam
		u.Type = GrantWithPrivilegeTypeTeam
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GrantWithPrivilege) MarshalJSON() ([]byte, error) {
	if u.GrantWithPrivilegeUser != nil {
		return utils.MarshalJSON(u.GrantWithPrivilegeUser, "", true)
	}

	if u.GrantWithPrivilegeTeam != nil {
		return utils.MarshalJSON(u.GrantWithPrivilegeTeam, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
