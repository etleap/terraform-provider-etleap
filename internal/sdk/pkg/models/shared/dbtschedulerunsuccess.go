// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type Status string

const (
	StatusSuccess                Status = "SUCCESS"
	StatusSuccessWithDbtWarnings Status = "SUCCESS_WITH_DBT_WARNINGS"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUCCESS":
		fallthrough
	case "SUCCESS_WITH_DBT_WARNINGS":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type DbtScheduleRunSuccess struct {
	Status Status `json:"status"`
	// The time that this dbt run was triggered.
	StartDate time.Time `json:"startDate"`
	// The duration, in seconds, between the time this dbt run was triggered and the time the dbt build for this run completed.
	Duration int64 `json:"duration"`
	// Timestamp for the next dbt schedule trigger.
	NextTriggerDate time.Time `json:"nextTriggerDate"`
	// The last time that a successful dbt build finished.
	LastSuccessfulDbtBuildDate time.Time `json:"lastSuccessfulDbtBuildDate"`
}

func (d DbtScheduleRunSuccess) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DbtScheduleRunSuccess) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DbtScheduleRunSuccess) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

func (o *DbtScheduleRunSuccess) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *DbtScheduleRunSuccess) GetDuration() int64 {
	if o == nil {
		return 0
	}
	return o.Duration
}

func (o *DbtScheduleRunSuccess) GetNextTriggerDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.NextTriggerDate
}

func (o *DbtScheduleRunSuccess) GetLastSuccessfulDbtBuildDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.LastSuccessfulDbtBuildDate
}
