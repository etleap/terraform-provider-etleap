// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionKustomerType string

const (
	ConnectionKustomerTypeKustomer ConnectionKustomerType = "KUSTOMER"
)

func (e ConnectionKustomerType) ToPointer() *ConnectionKustomerType {
	return &e
}

func (e *ConnectionKustomerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "KUSTOMER":
		*e = ConnectionKustomerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionKustomerType: %v", v)
	}
}

// ConnectionKustomerStatus - The current status of the connection.
type ConnectionKustomerStatus string

const (
	ConnectionKustomerStatusUnknown     ConnectionKustomerStatus = "UNKNOWN"
	ConnectionKustomerStatusUp          ConnectionKustomerStatus = "UP"
	ConnectionKustomerStatusDown        ConnectionKustomerStatus = "DOWN"
	ConnectionKustomerStatusResize      ConnectionKustomerStatus = "RESIZE"
	ConnectionKustomerStatusMaintenance ConnectionKustomerStatus = "MAINTENANCE"
	ConnectionKustomerStatusQuota       ConnectionKustomerStatus = "QUOTA"
	ConnectionKustomerStatusCreating    ConnectionKustomerStatus = "CREATING"
)

func (e ConnectionKustomerStatus) ToPointer() *ConnectionKustomerStatus {
	return &e
}

func (e *ConnectionKustomerStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionKustomerStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionKustomerStatus: %v", v)
	}
}

type ConnectionKustomer struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionKustomerType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionKustomerStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
}

func (c ConnectionKustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionKustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionKustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionKustomer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionKustomer) GetType() ConnectionKustomerType {
	if o == nil {
		return ConnectionKustomerType("")
	}
	return o.Type
}

func (o *ConnectionKustomer) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionKustomer) GetStatus() ConnectionKustomerStatus {
	if o == nil {
		return ConnectionKustomerStatus("")
	}
	return o.Status
}

func (o *ConnectionKustomer) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

type ConnectionKustomerInput struct {
	// The unique name of this connection.
	Name   string                 `json:"name"`
	Type   ConnectionKustomerType `json:"type"`
	APIKey string                 `json:"apiKey"`
}

func (o *ConnectionKustomerInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionKustomerInput) GetType() ConnectionKustomerType {
	if o == nil {
		return ConnectionKustomerType("")
	}
	return o.Type
}

func (o *ConnectionKustomerInput) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}
