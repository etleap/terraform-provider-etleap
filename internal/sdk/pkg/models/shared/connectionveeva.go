// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionVeevaType string

const (
	ConnectionVeevaTypeVeeva ConnectionVeevaType = "VEEVA"
)

func (e ConnectionVeevaType) ToPointer() *ConnectionVeevaType {
	return &e
}

func (e *ConnectionVeevaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VEEVA":
		*e = ConnectionVeevaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionVeevaType: %v", v)
	}
}

// ConnectionVeevaStatus - The current status of the connection.
type ConnectionVeevaStatus string

const (
	ConnectionVeevaStatusUnknown     ConnectionVeevaStatus = "UNKNOWN"
	ConnectionVeevaStatusUp          ConnectionVeevaStatus = "UP"
	ConnectionVeevaStatusDown        ConnectionVeevaStatus = "DOWN"
	ConnectionVeevaStatusResize      ConnectionVeevaStatus = "RESIZE"
	ConnectionVeevaStatusMaintenance ConnectionVeevaStatus = "MAINTENANCE"
	ConnectionVeevaStatusQuota       ConnectionVeevaStatus = "QUOTA"
	ConnectionVeevaStatusCreating    ConnectionVeevaStatus = "CREATING"
)

func (e ConnectionVeevaStatus) ToPointer() *ConnectionVeevaStatus {
	return &e
}

func (e *ConnectionVeevaStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionVeevaStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionVeevaStatus: %v", v)
	}
}

type ConnectionVeeva struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string              `json:"name"`
	Type ConnectionVeevaType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionVeevaStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The vault domain name is part of the URL that you use to access your Veeva Vault. You can follow the<a target="_blank" href="https://developer.veevavault.com/docs/#authentication">'Structuring the Endpoint'</a> instructions to find the URL.
	VaultDomainName string `json:"vaultDomainName"`
	Username        string `json:"username"`
}

func (c ConnectionVeeva) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionVeeva) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionVeeva) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionVeeva) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionVeeva) GetType() ConnectionVeevaType {
	if o == nil {
		return ConnectionVeevaType("")
	}
	return o.Type
}

func (o *ConnectionVeeva) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionVeeva) GetStatus() ConnectionVeevaStatus {
	if o == nil {
		return ConnectionVeevaStatus("")
	}
	return o.Status
}

func (o *ConnectionVeeva) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionVeeva) GetVaultDomainName() string {
	if o == nil {
		return ""
	}
	return o.VaultDomainName
}

func (o *ConnectionVeeva) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type ConnectionVeevaInput struct {
	// The unique name of this connection.
	Name string              `json:"name"`
	Type ConnectionVeevaType `json:"type"`
	// The vault domain name is part of the URL that you use to access your Veeva Vault. You can follow the<a target="_blank" href="https://developer.veevavault.com/docs/#authentication">'Structuring the Endpoint'</a> instructions to find the URL.
	VaultDomainName string `json:"vaultDomainName"`
	Username        string `json:"username"`
	Password        string `json:"password"`
}

func (o *ConnectionVeevaInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionVeevaInput) GetType() ConnectionVeevaType {
	if o == nil {
		return ConnectionVeevaType("")
	}
	return o.Type
}

func (o *ConnectionVeevaInput) GetVaultDomainName() string {
	if o == nil {
		return ""
	}
	return o.VaultDomainName
}

func (o *ConnectionVeevaInput) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionVeevaInput) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}
