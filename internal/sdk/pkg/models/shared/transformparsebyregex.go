// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TransformParseByRegexType string

const (
	TransformParseByRegexTypeParseByRegex TransformParseByRegexType = "PARSE_BY_REGEX"
)

func (e TransformParseByRegexType) ToPointer() *TransformParseByRegexType {
	return &e
}

func (e *TransformParseByRegexType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARSE_BY_REGEX":
		*e = TransformParseByRegexType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransformParseByRegexType: %v", v)
	}
}

// TransformParseByRegex - Parse a column using a regular expression. Use regular expression capture groups to extract matched content into new columns. <br/> The new parsed columns are called `parse`, `parse1` etc.
type TransformParseByRegex struct {
	Type TransformParseByRegexType `json:"type"`
	// The regular expression.
	Regex string `json:"regex"`
	// The input column that should be parsed by regex.
	Column string `json:"column"`
}

func (o *TransformParseByRegex) GetType() TransformParseByRegexType {
	if o == nil {
		return TransformParseByRegexType("")
	}
	return o.Type
}

func (o *TransformParseByRegex) GetRegex() string {
	if o == nil {
		return ""
	}
	return o.Regex
}

func (o *TransformParseByRegex) GetColumn() string {
	if o == nil {
		return ""
	}
	return o.Column
}
