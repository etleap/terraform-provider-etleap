// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type DistributionStyle1 string

const (
	DistributionStyle1All  DistributionStyle1 = "ALL"
	DistributionStyle1Auto DistributionStyle1 = "AUTO"
	DistributionStyle1Even DistributionStyle1 = "EVEN"
)

func (e DistributionStyle1) ToPointer() *DistributionStyle1 {
	return &e
}

func (e *DistributionStyle1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "AUTO":
		fallthrough
	case "EVEN":
		*e = DistributionStyle1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionStyle1: %v", v)
	}
}

type DistributionStyleType string

const (
	DistributionStyleTypeDistributionStyle1   DistributionStyleType = "distribution_style_1"
	DistributionStyleTypeDistributionStyleKey DistributionStyleType = "distribution_style_key"
)

// DistributionStyle - Can either be one the strings `ALL`, `AUTO` or `EVEN`, or an object for `KEY` distribution that specifies a column.
type DistributionStyle struct {
	DistributionStyle1   *DistributionStyle1
	DistributionStyleKey *DistributionStyleKey

	Type DistributionStyleType
}

func CreateDistributionStyleDistributionStyle1(distributionStyle1 DistributionStyle1) DistributionStyle {
	typ := DistributionStyleTypeDistributionStyle1

	return DistributionStyle{
		DistributionStyle1: &distributionStyle1,
		Type:               typ,
	}
}

func CreateDistributionStyleDistributionStyleKey(distributionStyleKey DistributionStyleKey) DistributionStyle {
	typ := DistributionStyleTypeDistributionStyleKey

	return DistributionStyle{
		DistributionStyleKey: &distributionStyleKey,
		Type:                 typ,
	}
}

func (u *DistributionStyle) UnmarshalJSON(data []byte) error {

	distributionStyleKey := new(DistributionStyleKey)
	if err := utils.UnmarshalJSON(data, &distributionStyleKey, "", true, true); err == nil {
		u.DistributionStyleKey = distributionStyleKey
		u.Type = DistributionStyleTypeDistributionStyleKey
		return nil
	}

	distributionStyle1 := new(DistributionStyle1)
	if err := utils.UnmarshalJSON(data, &distributionStyle1, "", true, true); err == nil {
		u.DistributionStyle1 = distributionStyle1
		u.Type = DistributionStyleTypeDistributionStyle1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DistributionStyle) MarshalJSON() ([]byte, error) {
	if u.DistributionStyle1 != nil {
		return utils.MarshalJSON(u.DistributionStyle1, "", true)
	}

	if u.DistributionStyleKey != nil {
		return utils.MarshalJSON(u.DistributionStyleKey, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
