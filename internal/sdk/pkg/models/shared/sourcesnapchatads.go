// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceSnapchatAdsType string

const (
	SourceSnapchatAdsTypeSnapchatAds SourceSnapchatAdsType = "SNAPCHAT_ADS"
)

func (e SourceSnapchatAdsType) ToPointer() *SourceSnapchatAdsType {
	return &e
}

func (e *SourceSnapchatAdsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SNAPCHAT_ADS":
		*e = SourceSnapchatAdsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnapchatAdsType: %v", v)
	}
}

type SourceSnapchatAds struct {
	Type SourceSnapchatAdsType `json:"type"`
	// The universally unique identifier for the source.
	ConnectionID string `json:"connectionId"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// The Snapchat Ads entity. Example values: [ad, adaccount, ad_account_report_hourly, ad_account_report_daily]
	Entity string `json:"entity"`
	// Specify the report `breakdown` if and only if the entity is 'ad_account_report_hourly' or 'ad_account_report_daily'. Example values: [ad, adsquad, campaign]
	Breakdown *string `json:"breakdown,omitempty"`
	// Specify the report `metrics` if and only if the entity is 'ad_account_report_hourly' or 'ad_account_report_daily'. Example values: [impressions, swipes, screen_time_millis]
	Metrics []string `json:"metrics,omitempty"`
	// Specify the report `additional metrics` if and only if the entity is 'ad_account_report_hourly' or 'ad_account_report_daily'. Example values: [android_installs, attachment_avg_view_time_millis, attachment_frequency]
	AdditionalMetrics []string `json:"additional_metrics,omitempty"`
	// Specify the report `dimension` groups if and only if the entity is 'ad_account_report_hourly' or 'ad_account_report_daily'. Example values: [country, region, gender]
	ReportDimension []string `json:"report_dimension,omitempty"`
}

func (o *SourceSnapchatAds) GetType() SourceSnapchatAdsType {
	if o == nil {
		return SourceSnapchatAdsType("")
	}
	return o.Type
}

func (o *SourceSnapchatAds) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceSnapchatAds) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceSnapchatAds) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}

func (o *SourceSnapchatAds) GetBreakdown() *string {
	if o == nil {
		return nil
	}
	return o.Breakdown
}

func (o *SourceSnapchatAds) GetMetrics() []string {
	if o == nil {
		return nil
	}
	return o.Metrics
}

func (o *SourceSnapchatAds) GetAdditionalMetrics() []string {
	if o == nil {
		return nil
	}
	return o.AdditionalMetrics
}

func (o *SourceSnapchatAds) GetReportDimension() []string {
	if o == nil {
		return nil
	}
	return o.ReportDimension
}
