// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type ColumnType1 string

const (
	ColumnType1Attributes            ColumnType1 = "ATTRIBUTES"
	ColumnType1Auto                  ColumnType1 = "AUTO"
	ColumnType1Boolean               ColumnType1 = "BOOLEAN"
	ColumnType1Date                  ColumnType1 = "DATE"
	ColumnType1Datetime              ColumnType1 = "DATETIME"
	ColumnType1Integer               ColumnType1 = "INTEGER"
	ColumnType1TimestampMilliseconds ColumnType1 = "TIMESTAMP_MILLISECONDS"
	ColumnType1TimestampSeconds      ColumnType1 = "TIMESTAMP_SECONDS"
)

func (e ColumnType1) ToPointer() *ColumnType1 {
	return &e
}

func (e *ColumnType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ATTRIBUTES":
		fallthrough
	case "AUTO":
		fallthrough
	case "BOOLEAN":
		fallthrough
	case "DATE":
		fallthrough
	case "DATETIME":
		fallthrough
	case "INTEGER":
		fallthrough
	case "TIMESTAMP_MILLISECONDS":
		fallthrough
	case "TIMESTAMP_SECONDS":
		*e = ColumnType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ColumnType1: %v", v)
	}
}

type ColumnTypeType string

const (
	ColumnTypeTypeColumnType1               ColumnTypeType = "ColumnType_1"
	ColumnTypeTypeArrayType                 ColumnTypeType = "ArrayType"
	ColumnTypeTypeAttributesType            ColumnTypeType = "AttributesType"
	ColumnTypeTypeAutoType                  ColumnTypeType = "AutoType"
	ColumnTypeTypeBooleanType               ColumnTypeType = "BooleanType"
	ColumnTypeTypeDateType                  ColumnTypeType = "DateType"
	ColumnTypeTypeDateTimeType              ColumnTypeType = "DateTimeType"
	ColumnTypeTypeEntityType                ColumnTypeType = "EntityType"
	ColumnTypeTypeIntegerType               ColumnTypeType = "IntegerType"
	ColumnTypeTypeNumberType                ColumnTypeType = "NumberType"
	ColumnTypeTypeStringType                ColumnTypeType = "StringType"
	ColumnTypeTypeRecordType                ColumnTypeType = "RecordType"
	ColumnTypeTypeTimestampMillisecondsType ColumnTypeType = "TimestampMillisecondsType"
	ColumnTypeTypeTimestampSecondsType      ColumnTypeType = "TimestampSecondsType"
)

// ColumnType - The type of the column.
type ColumnType struct {
	ColumnType1               *ColumnType1
	ArrayType                 *ArrayType
	AttributesType            *AttributesType
	AutoType                  *AutoType
	BooleanType               *BooleanType
	DateType                  *DateType
	DateTimeType              *DateTimeType
	EntityType                *EntityType
	IntegerType               *IntegerType
	NumberType                *NumberType
	StringType                *StringType
	RecordType                *RecordType
	TimestampMillisecondsType *TimestampMillisecondsType
	TimestampSecondsType      *TimestampSecondsType

	Type ColumnTypeType
}

func CreateColumnTypeColumnType1(columnType1 ColumnType1) ColumnType {
	typ := ColumnTypeTypeColumnType1

	return ColumnType{
		ColumnType1: &columnType1,
		Type:        typ,
	}
}

func CreateColumnTypeArrayType(arrayType ArrayType) ColumnType {
	typ := ColumnTypeTypeArrayType

	return ColumnType{
		ArrayType: &arrayType,
		Type:      typ,
	}
}

func CreateColumnTypeAttributesType(attributesType AttributesType) ColumnType {
	typ := ColumnTypeTypeAttributesType

	return ColumnType{
		AttributesType: &attributesType,
		Type:           typ,
	}
}

func CreateColumnTypeAutoType(autoType AutoType) ColumnType {
	typ := ColumnTypeTypeAutoType

	return ColumnType{
		AutoType: &autoType,
		Type:     typ,
	}
}

func CreateColumnTypeBooleanType(booleanType BooleanType) ColumnType {
	typ := ColumnTypeTypeBooleanType

	return ColumnType{
		BooleanType: &booleanType,
		Type:        typ,
	}
}

func CreateColumnTypeDateType(dateType DateType) ColumnType {
	typ := ColumnTypeTypeDateType

	return ColumnType{
		DateType: &dateType,
		Type:     typ,
	}
}

func CreateColumnTypeDateTimeType(dateTimeType DateTimeType) ColumnType {
	typ := ColumnTypeTypeDateTimeType

	return ColumnType{
		DateTimeType: &dateTimeType,
		Type:         typ,
	}
}

func CreateColumnTypeEntityType(entityType EntityType) ColumnType {
	typ := ColumnTypeTypeEntityType

	return ColumnType{
		EntityType: &entityType,
		Type:       typ,
	}
}

func CreateColumnTypeIntegerType(integerType IntegerType) ColumnType {
	typ := ColumnTypeTypeIntegerType

	return ColumnType{
		IntegerType: &integerType,
		Type:        typ,
	}
}

func CreateColumnTypeNumberType(numberType NumberType) ColumnType {
	typ := ColumnTypeTypeNumberType

	return ColumnType{
		NumberType: &numberType,
		Type:       typ,
	}
}

func CreateColumnTypeStringType(stringType StringType) ColumnType {
	typ := ColumnTypeTypeStringType

	return ColumnType{
		StringType: &stringType,
		Type:       typ,
	}
}

func CreateColumnTypeRecordType(recordType RecordType) ColumnType {
	typ := ColumnTypeTypeRecordType

	return ColumnType{
		RecordType: &recordType,
		Type:       typ,
	}
}

func CreateColumnTypeTimestampMillisecondsType(timestampMillisecondsType TimestampMillisecondsType) ColumnType {
	typ := ColumnTypeTypeTimestampMillisecondsType

	return ColumnType{
		TimestampMillisecondsType: &timestampMillisecondsType,
		Type:                      typ,
	}
}

func CreateColumnTypeTimestampSecondsType(timestampSecondsType TimestampSecondsType) ColumnType {
	typ := ColumnTypeTypeTimestampSecondsType

	return ColumnType{
		TimestampSecondsType: &timestampSecondsType,
		Type:                 typ,
	}
}

func (u *ColumnType) UnmarshalJSON(data []byte) error {

	dateTimeType := new(DateTimeType)
	if err := utils.UnmarshalJSON(data, &dateTimeType, "", true, true); err == nil {
		u.DateTimeType = dateTimeType
		u.Type = ColumnTypeTypeDateTimeType
		return nil
	}

	integerType := new(IntegerType)
	if err := utils.UnmarshalJSON(data, &integerType, "", true, true); err == nil {
		u.IntegerType = integerType
		u.Type = ColumnTypeTypeIntegerType
		return nil
	}

	attributesType := new(AttributesType)
	if err := utils.UnmarshalJSON(data, &attributesType, "", true, true); err == nil {
		u.AttributesType = attributesType
		u.Type = ColumnTypeTypeAttributesType
		return nil
	}

	autoType := new(AutoType)
	if err := utils.UnmarshalJSON(data, &autoType, "", true, true); err == nil {
		u.AutoType = autoType
		u.Type = ColumnTypeTypeAutoType
		return nil
	}

	booleanType := new(BooleanType)
	if err := utils.UnmarshalJSON(data, &booleanType, "", true, true); err == nil {
		u.BooleanType = booleanType
		u.Type = ColumnTypeTypeBooleanType
		return nil
	}

	dateType := new(DateType)
	if err := utils.UnmarshalJSON(data, &dateType, "", true, true); err == nil {
		u.DateType = dateType
		u.Type = ColumnTypeTypeDateType
		return nil
	}

	timestampSecondsType := new(TimestampSecondsType)
	if err := utils.UnmarshalJSON(data, &timestampSecondsType, "", true, true); err == nil {
		u.TimestampSecondsType = timestampSecondsType
		u.Type = ColumnTypeTypeTimestampSecondsType
		return nil
	}

	timestampMillisecondsType := new(TimestampMillisecondsType)
	if err := utils.UnmarshalJSON(data, &timestampMillisecondsType, "", true, true); err == nil {
		u.TimestampMillisecondsType = timestampMillisecondsType
		u.Type = ColumnTypeTypeTimestampMillisecondsType
		return nil
	}

	entityType := new(EntityType)
	if err := utils.UnmarshalJSON(data, &entityType, "", true, true); err == nil {
		u.EntityType = entityType
		u.Type = ColumnTypeTypeEntityType
		return nil
	}

	recordType := new(RecordType)
	if err := utils.UnmarshalJSON(data, &recordType, "", true, true); err == nil {
		u.RecordType = recordType
		u.Type = ColumnTypeTypeRecordType
		return nil
	}

	arrayType := new(ArrayType)
	if err := utils.UnmarshalJSON(data, &arrayType, "", true, true); err == nil {
		u.ArrayType = arrayType
		u.Type = ColumnTypeTypeArrayType
		return nil
	}

	stringType := new(StringType)
	if err := utils.UnmarshalJSON(data, &stringType, "", true, true); err == nil {
		u.StringType = stringType
		u.Type = ColumnTypeTypeStringType
		return nil
	}

	numberType := new(NumberType)
	if err := utils.UnmarshalJSON(data, &numberType, "", true, true); err == nil {
		u.NumberType = numberType
		u.Type = ColumnTypeTypeNumberType
		return nil
	}

	columnType1 := new(ColumnType1)
	if err := utils.UnmarshalJSON(data, &columnType1, "", true, true); err == nil {
		u.ColumnType1 = columnType1
		u.Type = ColumnTypeTypeColumnType1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ColumnType) MarshalJSON() ([]byte, error) {
	if u.ColumnType1 != nil {
		return utils.MarshalJSON(u.ColumnType1, "", true)
	}

	if u.ArrayType != nil {
		return utils.MarshalJSON(u.ArrayType, "", true)
	}

	if u.AttributesType != nil {
		return utils.MarshalJSON(u.AttributesType, "", true)
	}

	if u.AutoType != nil {
		return utils.MarshalJSON(u.AutoType, "", true)
	}

	if u.BooleanType != nil {
		return utils.MarshalJSON(u.BooleanType, "", true)
	}

	if u.DateType != nil {
		return utils.MarshalJSON(u.DateType, "", true)
	}

	if u.DateTimeType != nil {
		return utils.MarshalJSON(u.DateTimeType, "", true)
	}

	if u.EntityType != nil {
		return utils.MarshalJSON(u.EntityType, "", true)
	}

	if u.IntegerType != nil {
		return utils.MarshalJSON(u.IntegerType, "", true)
	}

	if u.NumberType != nil {
		return utils.MarshalJSON(u.NumberType, "", true)
	}

	if u.StringType != nil {
		return utils.MarshalJSON(u.StringType, "", true)
	}

	if u.RecordType != nil {
		return utils.MarshalJSON(u.RecordType, "", true)
	}

	if u.TimestampMillisecondsType != nil {
		return utils.MarshalJSON(u.TimestampMillisecondsType, "", true)
	}

	if u.TimestampSecondsType != nil {
		return utils.MarshalJSON(u.TimestampSecondsType, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
