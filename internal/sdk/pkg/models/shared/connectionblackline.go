// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionBlacklineType string

const (
	ConnectionBlacklineTypeBlackline ConnectionBlacklineType = "BLACKLINE"
)

func (e ConnectionBlacklineType) ToPointer() *ConnectionBlacklineType {
	return &e
}

func (e *ConnectionBlacklineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BLACKLINE":
		*e = ConnectionBlacklineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionBlacklineType: %v", v)
	}
}

// ConnectionBlacklineStatus - The current status of the connection.
type ConnectionBlacklineStatus string

const (
	ConnectionBlacklineStatusUnknown     ConnectionBlacklineStatus = "UNKNOWN"
	ConnectionBlacklineStatusUp          ConnectionBlacklineStatus = "UP"
	ConnectionBlacklineStatusDown        ConnectionBlacklineStatus = "DOWN"
	ConnectionBlacklineStatusResize      ConnectionBlacklineStatus = "RESIZE"
	ConnectionBlacklineStatusMaintenance ConnectionBlacklineStatus = "MAINTENANCE"
	ConnectionBlacklineStatusQuota       ConnectionBlacklineStatus = "QUOTA"
	ConnectionBlacklineStatusCreating    ConnectionBlacklineStatus = "CREATING"
)

func (e ConnectionBlacklineStatus) ToPointer() *ConnectionBlacklineStatus {
	return &e
}

func (e *ConnectionBlacklineStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionBlacklineStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionBlacklineStatus: %v", v)
	}
}

type ConnectionBlackline struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionBlacklineType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionBlacklineStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// Your Blackline instance Client ID
	ClientID string `json:"client_id"`
	// Your Blackline instance Client Secret
	ClientSecret string `json:"client_secret"`
	// Your Blackline instance base URL, i.e, https://<BASE_URL>.api.blackline.com
	BaseURL string `json:"base_url"`
	// Your Blackline instance authorization scope.
	InstanceScope string `json:"instance_scope"`
	// Your Blackline username
	Username string `json:"username"`
	// The Blackline API Key generated for your user
	APIKey string `json:"api_key"`
}

func (c ConnectionBlackline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionBlackline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionBlackline) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionBlackline) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionBlackline) GetType() ConnectionBlacklineType {
	if o == nil {
		return ConnectionBlacklineType("")
	}
	return o.Type
}

func (o *ConnectionBlackline) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionBlackline) GetStatus() ConnectionBlacklineStatus {
	if o == nil {
		return ConnectionBlacklineStatus("")
	}
	return o.Status
}

func (o *ConnectionBlackline) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionBlackline) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ConnectionBlackline) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *ConnectionBlackline) GetBaseURL() string {
	if o == nil {
		return ""
	}
	return o.BaseURL
}

func (o *ConnectionBlackline) GetInstanceScope() string {
	if o == nil {
		return ""
	}
	return o.InstanceScope
}

func (o *ConnectionBlackline) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionBlackline) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

type ConnectionBlacklineInput struct {
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionBlacklineType `json:"type"`
	// Your Blackline instance Client ID
	ClientID string `json:"client_id"`
	// Your Blackline instance Client Secret
	ClientSecret string `json:"client_secret"`
	// Your Blackline instance base URL, i.e, https://<BASE_URL>.api.blackline.com
	BaseURL string `json:"base_url"`
	// Your Blackline instance authorization scope.
	InstanceScope string `json:"instance_scope"`
	// Your Blackline username
	Username string `json:"username"`
	// The Blackline API Key generated for your user
	APIKey string `json:"api_key"`
}

func (o *ConnectionBlacklineInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionBlacklineInput) GetType() ConnectionBlacklineType {
	if o == nil {
		return ConnectionBlacklineType("")
	}
	return o.Type
}

func (o *ConnectionBlacklineInput) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ConnectionBlacklineInput) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *ConnectionBlacklineInput) GetBaseURL() string {
	if o == nil {
		return ""
	}
	return o.BaseURL
}

func (o *ConnectionBlacklineInput) GetInstanceScope() string {
	if o == nil {
		return ""
	}
	return o.InstanceScope
}

func (o *ConnectionBlacklineInput) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionBlacklineInput) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}
