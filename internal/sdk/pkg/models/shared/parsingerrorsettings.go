// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Action - Whether Etleap should STOP the pipeline or NOTIFY once the `threshold` is reached.
type Action string

const (
	ActionStop   Action = "STOP"
	ActionNotify Action = "NOTIFY"
)

func (e Action) ToPointer() *Action {
	return &e
}

func (e *Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STOP":
		fallthrough
	case "NOTIFY":
		*e = Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action: %v", v)
	}
}

type ParsingErrorSettings struct {
	// The parsing error threshold, in percentage points, for the `action` to be triggered.
	Threshold float64 `json:"threshold"`
	// Whether Etleap should STOP the pipeline or NOTIFY once the `threshold` is reached.
	Action Action `json:"action"`
}

func (o *ParsingErrorSettings) GetThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.Threshold
}

func (o *ParsingErrorSettings) GetAction() Action {
	if o == nil {
		return Action("")
	}
	return o.Action
}
