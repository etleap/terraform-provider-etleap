// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionFreshworksUpdateType string

const (
	ConnectionFreshworksUpdateTypeFreshworks ConnectionFreshworksUpdateType = "FRESHWORKS"
)

func (e ConnectionFreshworksUpdateType) ToPointer() *ConnectionFreshworksUpdateType {
	return &e
}

func (e *ConnectionFreshworksUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FRESHWORKS":
		*e = ConnectionFreshworksUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionFreshworksUpdateType: %v", v)
	}
}

type ConnectionFreshworksUpdate struct {
	// Whether this connection should be marked as active.
	Active *bool                           `json:"active,omitempty"`
	Type   *ConnectionFreshworksUpdateType `json:"type"`
	// The unique name of this connection.
	Name *string `json:"name,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule    *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	FreshcallerAPIKey *string              `json:"freshcallerApiKey,omitempty"`
	FreshdeskDomain   *string              `json:"freshdeskDomain,omitempty"`
	FreshdeskAPIKey   *string              `json:"freshdeskApiKey,omitempty"`
	FreshcallerDomain *string              `json:"freshcallerDomain,omitempty"`
}

func (o *ConnectionFreshworksUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionFreshworksUpdate) GetType() *ConnectionFreshworksUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConnectionFreshworksUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionFreshworksUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionFreshworksUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionFreshworksUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionFreshworksUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionFreshworksUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionFreshworksUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionFreshworksUpdate) GetFreshcallerAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.FreshcallerAPIKey
}

func (o *ConnectionFreshworksUpdate) GetFreshdeskDomain() *string {
	if o == nil {
		return nil
	}
	return o.FreshdeskDomain
}

func (o *ConnectionFreshworksUpdate) GetFreshdeskAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.FreshdeskAPIKey
}

func (o *ConnectionFreshworksUpdate) GetFreshcallerDomain() *string {
	if o == nil {
		return nil
	}
	return o.FreshcallerDomain
}
