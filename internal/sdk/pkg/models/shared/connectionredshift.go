// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionRedshiftType string

const (
	ConnectionRedshiftTypeRedshift ConnectionRedshiftType = "REDSHIFT"
)

func (e ConnectionRedshiftType) ToPointer() *ConnectionRedshiftType {
	return &e
}

func (e *ConnectionRedshiftType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REDSHIFT":
		*e = ConnectionRedshiftType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionRedshiftType: %v", v)
	}
}

// ConnectionRedshiftStatus - The current status of the connection.
type ConnectionRedshiftStatus string

const (
	ConnectionRedshiftStatusUnknown     ConnectionRedshiftStatus = "UNKNOWN"
	ConnectionRedshiftStatusUp          ConnectionRedshiftStatus = "UP"
	ConnectionRedshiftStatusDown        ConnectionRedshiftStatus = "DOWN"
	ConnectionRedshiftStatusResize      ConnectionRedshiftStatus = "RESIZE"
	ConnectionRedshiftStatusMaintenance ConnectionRedshiftStatus = "MAINTENANCE"
	ConnectionRedshiftStatusQuota       ConnectionRedshiftStatus = "QUOTA"
	ConnectionRedshiftStatusCreating    ConnectionRedshiftStatus = "CREATING"
)

func (e ConnectionRedshiftStatus) ToPointer() *ConnectionRedshiftStatus {
	return &e
}

func (e *ConnectionRedshiftStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionRedshiftStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionRedshiftStatus: %v", v)
	}
}

// ConnectionRedshift - Specifies the location of a database.
type ConnectionRedshift struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionRedshiftType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionRedshiftStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// If not specified, the default schema will be used.
	Schema *string `json:"schema,omitempty"`
	// When Etleap creates Redshift tables, SELECT privileges will be granted to user groups specified here.
	UserGroups []string `json:"userGroups,omitempty"`
	// Are you going to use this connection only as a source for pipelines? When `true`, this connection will only be available as an ETL source only, and Etleap will skip the creation of an audit table in the database.
	SourceOnly *bool `default:"false" json:"sourceOnly"`
	// Should Etleap prefix each load query with metadata? More info can be found <a href="https://docs.etleap.com/docs/documentation/ba7744fcf6114-redshift-optional-connection-settings#include-query-tags">here</a>.
	QueryTagsEnabled *bool `default:"false" json:"queryTagsEnabled"`
	// The id of another Etleap Redshift connection. If specified, Etleap will make the data loaded available to the other cluster via Redshift Data Sharing.
	DataSharingDestinations []string `json:"dataSharingDestinations,omitempty"`
	// Etleap will create VARCHAR columns with the minimal required width based on the data it's loading, and expand the column width as required. This can improve performance but there are <a target="_blank" href="https://docs.etleap.com/docs/documentation/ba7744fcf6114-redshift-optional-connection-settings#enable-dynamic-varchar-widths">some limitations</a>. Note: if set to `true`, it can't later be updated to `false`.
	DynamicVarcharWidthEnabled *bool      `default:"false" json:"dynamicVarcharWidthEnabled"`
	Address                    string     `json:"address"`
	Port                       int64      `json:"port"`
	Database                   string     `json:"database"`
	Username                   string     `json:"username"`
	SSHConfig                  *SSHConfig `json:"sshConfig,omitempty"`
}

func (c ConnectionRedshift) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionRedshift) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionRedshift) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionRedshift) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionRedshift) GetType() ConnectionRedshiftType {
	if o == nil {
		return ConnectionRedshiftType("")
	}
	return o.Type
}

func (o *ConnectionRedshift) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionRedshift) GetStatus() ConnectionRedshiftStatus {
	if o == nil {
		return ConnectionRedshiftStatus("")
	}
	return o.Status
}

func (o *ConnectionRedshift) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionRedshift) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionRedshift) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *ConnectionRedshift) GetSourceOnly() *bool {
	if o == nil {
		return nil
	}
	return o.SourceOnly
}

func (o *ConnectionRedshift) GetQueryTagsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.QueryTagsEnabled
}

func (o *ConnectionRedshift) GetDataSharingDestinations() []string {
	if o == nil {
		return nil
	}
	return o.DataSharingDestinations
}

func (o *ConnectionRedshift) GetDynamicVarcharWidthEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.DynamicVarcharWidthEnabled
}

func (o *ConnectionRedshift) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionRedshift) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *ConnectionRedshift) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *ConnectionRedshift) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionRedshift) GetSSHConfig() *SSHConfig {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}

// ConnectionRedshiftInput - Specifies the location of a database.
type ConnectionRedshiftInput struct {
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionRedshiftType `json:"type"`
	// If not specified, the default schema will be used.
	Schema *string `json:"schema,omitempty"`
	// When Etleap creates Redshift tables, SELECT privileges will be granted to user groups specified here.
	UserGroups []string `json:"userGroups,omitempty"`
	// Are you going to use this connection only as a source for pipelines? When `true`, this connection will only be available as an ETL source only, and Etleap will skip the creation of an audit table in the database.
	SourceOnly *bool `default:"false" json:"sourceOnly"`
	// Should Etleap prefix each load query with metadata? More info can be found <a href="https://docs.etleap.com/docs/documentation/ba7744fcf6114-redshift-optional-connection-settings#include-query-tags">here</a>.
	QueryTagsEnabled *bool `default:"false" json:"queryTagsEnabled"`
	// The id of another Etleap Redshift connection. If specified, Etleap will make the data loaded available to the other cluster via Redshift Data Sharing.
	DataSharingDestinations []string `json:"dataSharingDestinations,omitempty"`
	// Etleap will create VARCHAR columns with the minimal required width based on the data it's loading, and expand the column width as required. This can improve performance but there are <a target="_blank" href="https://docs.etleap.com/docs/documentation/ba7744fcf6114-redshift-optional-connection-settings#enable-dynamic-varchar-widths">some limitations</a>. Note: if set to `true`, it can't later be updated to `false`.
	DynamicVarcharWidthEnabled *bool      `default:"false" json:"dynamicVarcharWidthEnabled"`
	Address                    string     `json:"address"`
	Port                       int64      `json:"port"`
	Database                   string     `json:"database"`
	Username                   string     `json:"username"`
	Password                   string     `json:"password"`
	SSHConfig                  *SSHConfig `json:"sshConfig,omitempty"`
}

func (c ConnectionRedshiftInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionRedshiftInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionRedshiftInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionRedshiftInput) GetType() ConnectionRedshiftType {
	if o == nil {
		return ConnectionRedshiftType("")
	}
	return o.Type
}

func (o *ConnectionRedshiftInput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionRedshiftInput) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *ConnectionRedshiftInput) GetSourceOnly() *bool {
	if o == nil {
		return nil
	}
	return o.SourceOnly
}

func (o *ConnectionRedshiftInput) GetQueryTagsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.QueryTagsEnabled
}

func (o *ConnectionRedshiftInput) GetDataSharingDestinations() []string {
	if o == nil {
		return nil
	}
	return o.DataSharingDestinations
}

func (o *ConnectionRedshiftInput) GetDynamicVarcharWidthEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.DynamicVarcharWidthEnabled
}

func (o *ConnectionRedshiftInput) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionRedshiftInput) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *ConnectionRedshiftInput) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *ConnectionRedshiftInput) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionRedshiftInput) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *ConnectionRedshiftInput) GetSSHConfig() *SSHConfig {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}
