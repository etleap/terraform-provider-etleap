// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionZuoraUpdateType string

const (
	ConnectionZuoraUpdateTypeZuora ConnectionZuoraUpdateType = "ZUORA"
)

func (e ConnectionZuoraUpdateType) ToPointer() *ConnectionZuoraUpdateType {
	return &e
}

func (e *ConnectionZuoraUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ZUORA":
		*e = ConnectionZuoraUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionZuoraUpdateType: %v", v)
	}
}

type ConnectionZuoraUpdate struct {
	// Whether this connection should be marked as active.
	Active *bool                      `json:"active,omitempty"`
	Type   *ConnectionZuoraUpdateType `json:"type"`
	// The unique name of this connection.
	Name *string `json:"name,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Leave blank unless you have been assigned a specific endpoint, e.g. services42.zuora.com. Setting this overrides the 'Endpoint' and 'Sandbox' settings above.
	EndpointHostname *string `json:"endpointHostname,omitempty"`
	ClientSecret     *string `json:"clientSecret,omitempty"`
	// The endpoint region.
	Endpoint *string `json:"endpoint,omitempty"`
	// The Client ID displayed when you created the OAuth client. If you need help to create an OAuth Client, <a target="_blank" href="https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/Manage_Users#Create_an_OAuth_Client_for_a_User">follow this article</a>.
	ClientID *string `json:"clientId,omitempty"`
	// Whether this is a sandbox account.
	Sandbox *bool `json:"sandbox,omitempty"`
}

func (o *ConnectionZuoraUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionZuoraUpdate) GetType() *ConnectionZuoraUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConnectionZuoraUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionZuoraUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionZuoraUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionZuoraUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionZuoraUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionZuoraUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionZuoraUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionZuoraUpdate) GetEndpointHostname() *string {
	if o == nil {
		return nil
	}
	return o.EndpointHostname
}

func (o *ConnectionZuoraUpdate) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *ConnectionZuoraUpdate) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *ConnectionZuoraUpdate) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *ConnectionZuoraUpdate) GetSandbox() *bool {
	if o == nil {
		return nil
	}
	return o.Sandbox
}
