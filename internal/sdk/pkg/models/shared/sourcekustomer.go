// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceKustomerType string

const (
	SourceKustomerTypeKustomer SourceKustomerType = "KUSTOMER"
)

func (e SourceKustomerType) ToPointer() *SourceKustomerType {
	return &e
}

func (e *SourceKustomerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "KUSTOMER":
		*e = SourceKustomerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceKustomerType: %v", v)
	}
}

type SourceKustomer struct {
	// The universally unique identifier for the source.
	ConnectionID string             `json:"connectionId"`
	Type         SourceKustomerType `json:"type"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// The Kustomer entity. Example values: [AUDIT_LOGS, BRANDS, BUSINESS_SCHEDULES, CARDS, COMPANIES, CONVERSATION_ATTACHMENTS, CONVERSATION_EVENTS, CONVERSATION_FORWARDS, CONVERSATION_TIMES, CONVERSATIONS, CUSTOM_ATTRIBUTE_METADATA, CUSTOMER_DRAFTS, CUSTOMER_MERGES, CUSTOMERS, KOBJECTS, KLASSES, MESSAGES, NOTES, NOTIFICATIONS, OUTBOUND_ACCOUNTS, QUEUES, SLAS, SATISFACTIONS, SHORTCUTS, SNOOZES, SPAM_SENDERS, TEAM_ROUTING_SETTINGS, TEAMS, USERS]
	Entity string `json:"entity"`
}

func (o *SourceKustomer) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceKustomer) GetType() SourceKustomerType {
	if o == nil {
		return SourceKustomerType("")
	}
	return o.Type
}

func (o *SourceKustomer) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceKustomer) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}
