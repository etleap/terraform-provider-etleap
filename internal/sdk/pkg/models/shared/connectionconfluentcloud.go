// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionConfluentCloudType string

const (
	ConnectionConfluentCloudTypeConfluentCloud ConnectionConfluentCloudType = "CONFLUENT_CLOUD"
)

func (e ConnectionConfluentCloudType) ToPointer() *ConnectionConfluentCloudType {
	return &e
}

func (e *ConnectionConfluentCloudType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CONFLUENT_CLOUD":
		*e = ConnectionConfluentCloudType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionConfluentCloudType: %v", v)
	}
}

// ConnectionConfluentCloudStatus - The current status of the connection.
type ConnectionConfluentCloudStatus string

const (
	ConnectionConfluentCloudStatusUnknown     ConnectionConfluentCloudStatus = "UNKNOWN"
	ConnectionConfluentCloudStatusUp          ConnectionConfluentCloudStatus = "UP"
	ConnectionConfluentCloudStatusDown        ConnectionConfluentCloudStatus = "DOWN"
	ConnectionConfluentCloudStatusResize      ConnectionConfluentCloudStatus = "RESIZE"
	ConnectionConfluentCloudStatusMaintenance ConnectionConfluentCloudStatus = "MAINTENANCE"
	ConnectionConfluentCloudStatusQuota       ConnectionConfluentCloudStatus = "QUOTA"
	ConnectionConfluentCloudStatusCreating    ConnectionConfluentCloudStatus = "CREATING"
)

func (e ConnectionConfluentCloudStatus) ToPointer() *ConnectionConfluentCloudStatus {
	return &e
}

func (e *ConnectionConfluentCloudStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionConfluentCloudStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionConfluentCloudStatus: %v", v)
	}
}

type ConnectionConfluentCloudDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionConfluentCloudDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionConfluentCloudDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionConfluentCloudDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionConfluentCloudDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionConfluentCloudDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionConfluentCloudDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionConfluentCloudDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

type ConnectionConfluentCloud struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection in the form host:port
	Name string                       `json:"name"`
	Type ConnectionConfluentCloudType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionConfluentCloudStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionConfluentCloudDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// The Confluent Cloud bootstrap server
	ServerURL string `json:"serverUrl"`
	// The API Key
	Key string `json:"key"`
	// The Schema Registry Server, e.g. 'instance.region.confluent.cloud'
	SchemaRegistryServer *string `json:"schemaRegistryServer,omitempty"`
	// Schema Registry API Key
	SchemaRegistryKey *string `json:"schemaRegistryKey,omitempty"`
}

func (c ConnectionConfluentCloud) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionConfluentCloud) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionConfluentCloud) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionConfluentCloud) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionConfluentCloud) GetType() ConnectionConfluentCloudType {
	if o == nil {
		return ConnectionConfluentCloudType("")
	}
	return o.Type
}

func (o *ConnectionConfluentCloud) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionConfluentCloud) GetStatus() ConnectionConfluentCloudStatus {
	if o == nil {
		return ConnectionConfluentCloudStatus("")
	}
	return o.Status
}

func (o *ConnectionConfluentCloud) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionConfluentCloud) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionConfluentCloud) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionConfluentCloud) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionConfluentCloud) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionConfluentCloud) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionConfluentCloud) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionConfluentCloud) GetDefaultUpdateSchedule() []ConnectionConfluentCloudDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionConfluentCloudDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionConfluentCloud) GetServerURL() string {
	if o == nil {
		return ""
	}
	return o.ServerURL
}

func (o *ConnectionConfluentCloud) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ConnectionConfluentCloud) GetSchemaRegistryServer() *string {
	if o == nil {
		return nil
	}
	return o.SchemaRegistryServer
}

func (o *ConnectionConfluentCloud) GetSchemaRegistryKey() *string {
	if o == nil {
		return nil
	}
	return o.SchemaRegistryKey
}

type ConnectionConfluentCloudInput struct {
	// The unique name of this connection in the form host:port
	Name string                       `json:"name"`
	Type ConnectionConfluentCloudType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// The Confluent Cloud bootstrap server
	ServerURL string `json:"serverUrl"`
	// The API Key
	Key string `json:"key"`
	// The API Secret
	Secret string `json:"secret"`
	// The Schema Registry Server, e.g. 'instance.region.confluent.cloud'
	SchemaRegistryServer *string `json:"schemaRegistryServer,omitempty"`
	// Schema Registry API Key
	SchemaRegistryKey *string `json:"schemaRegistryKey,omitempty"`
	// Schema Registry API Secret
	SchemaRegistrySecret *string `json:"schemaRegistrySecret,omitempty"`
}

func (o *ConnectionConfluentCloudInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionConfluentCloudInput) GetType() ConnectionConfluentCloudType {
	if o == nil {
		return ConnectionConfluentCloudType("")
	}
	return o.Type
}

func (o *ConnectionConfluentCloudInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionConfluentCloudInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionConfluentCloudInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionConfluentCloudInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionConfluentCloudInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionConfluentCloudInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionConfluentCloudInput) GetServerURL() string {
	if o == nil {
		return ""
	}
	return o.ServerURL
}

func (o *ConnectionConfluentCloudInput) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ConnectionConfluentCloudInput) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *ConnectionConfluentCloudInput) GetSchemaRegistryServer() *string {
	if o == nil {
		return nil
	}
	return o.SchemaRegistryServer
}

func (o *ConnectionConfluentCloudInput) GetSchemaRegistryKey() *string {
	if o == nil {
		return nil
	}
	return o.SchemaRegistryKey
}

func (o *ConnectionConfluentCloudInput) GetSchemaRegistrySecret() *string {
	if o == nil {
		return nil
	}
	return o.SchemaRegistrySecret
}
