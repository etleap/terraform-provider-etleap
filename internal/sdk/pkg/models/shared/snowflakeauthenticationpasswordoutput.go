// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SnowflakeAuthenticationPasswordType string

const (
	SnowflakeAuthenticationPasswordTypePassword SnowflakeAuthenticationPasswordType = "PASSWORD"
	SnowflakeAuthenticationPasswordTypeKeyPair  SnowflakeAuthenticationPasswordType = "KEY_PAIR"
)

func (e SnowflakeAuthenticationPasswordType) ToPointer() *SnowflakeAuthenticationPasswordType {
	return &e
}

func (e *SnowflakeAuthenticationPasswordType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSWORD":
		fallthrough
	case "KEY_PAIR":
		*e = SnowflakeAuthenticationPasswordType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SnowflakeAuthenticationPasswordType: %v", v)
	}
}

// SnowflakeAuthenticationPasswordOutput - Snowflake Password Authentication
type SnowflakeAuthenticationPasswordOutput struct {
	Type SnowflakeAuthenticationPasswordType `json:"type"`
}

func (o *SnowflakeAuthenticationPasswordOutput) GetType() SnowflakeAuthenticationPasswordType {
	if o == nil {
		return SnowflakeAuthenticationPasswordType("")
	}
	return o.Type
}

// SnowflakeAuthenticationPassword - Snowflake Password Authentication
type SnowflakeAuthenticationPassword struct {
	Password string                              `json:"password"`
	Type     SnowflakeAuthenticationPasswordType `json:"type"`
}

func (o *SnowflakeAuthenticationPassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *SnowflakeAuthenticationPassword) GetType() SnowflakeAuthenticationPasswordType {
	if o == nil {
		return SnowflakeAuthenticationPasswordType("")
	}
	return o.Type
}
