// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceElluminateType string

const (
	SourceElluminateTypeElluminate SourceElluminateType = "ELLUMINATE"
)

func (e SourceElluminateType) ToPointer() *SourceElluminateType {
	return &e
}

func (e *SourceElluminateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ELLUMINATE":
		*e = SourceElluminateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceElluminateType: %v", v)
	}
}

type SourceElluminate struct {
	// The universally unique identifier for the source.
	ConnectionID string               `json:"connectionId"`
	Type         SourceElluminateType `json:"type"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// The Elluminate study name.
	Entity string `json:"entity"`
	// The Schema that you want to extract from.
	SchemaName string `json:"schemaName"`
	// The Domain that you want to extract from. If no domain is specified Etleap will extract data from all schema's domains.
	DomainName []string `json:"domainName,omitempty"`
}

func (o *SourceElluminate) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceElluminate) GetType() SourceElluminateType {
	if o == nil {
		return SourceElluminateType("")
	}
	return o.Type
}

func (o *SourceElluminate) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceElluminate) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}

func (o *SourceElluminate) GetSchemaName() string {
	if o == nil {
		return ""
	}
	return o.SchemaName
}

func (o *SourceElluminate) GetDomainName() []string {
	if o == nil {
		return nil
	}
	return o.DomainName
}
