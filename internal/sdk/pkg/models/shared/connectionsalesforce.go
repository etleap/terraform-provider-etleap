// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionSalesforceStatus - The current status of the connection.
type ConnectionSalesforceStatus string

const (
	ConnectionSalesforceStatusUnknown     ConnectionSalesforceStatus = "UNKNOWN"
	ConnectionSalesforceStatusUp          ConnectionSalesforceStatus = "UP"
	ConnectionSalesforceStatusDown        ConnectionSalesforceStatus = "DOWN"
	ConnectionSalesforceStatusResize      ConnectionSalesforceStatus = "RESIZE"
	ConnectionSalesforceStatusMaintenance ConnectionSalesforceStatus = "MAINTENANCE"
	ConnectionSalesforceStatusQuota       ConnectionSalesforceStatus = "QUOTA"
	ConnectionSalesforceStatusCreating    ConnectionSalesforceStatus = "CREATING"
)

func (e ConnectionSalesforceStatus) ToPointer() *ConnectionSalesforceStatus {
	return &e
}

func (e *ConnectionSalesforceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionSalesforceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSalesforceStatus: %v", v)
	}
}

type ConnectionSalesforceDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionSalesforceDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionSalesforceDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSalesforceDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSalesforceDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSalesforceDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSalesforceDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSalesforceDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionSalesforceType string

const (
	ConnectionSalesforceTypeSalesforce ConnectionSalesforceType = "SALESFORCE"
)

func (e ConnectionSalesforceType) ToPointer() *ConnectionSalesforceType {
	return &e
}

func (e *ConnectionSalesforceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SALESFORCE":
		*e = ConnectionSalesforceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSalesforceType: %v", v)
	}
}

type ConnectionSalesforce struct {
	// The current status of the connection.
	Status ConnectionSalesforceStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionSalesforceDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool                     `json:"active"`
	Type   ConnectionSalesforceType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	Username       string               `json:"username"`
	Sandbox        bool                 `json:"sandbox"`
	// The maximum number of Bulk API batch requests Etleap will use per 24-hour window. Etleap will also stop if the remaining quota goes under 500 requests.
	QuotaLimit  int64  `json:"quotaLimit"`
	InstanceURL string `json:"instanceUrl"`
}

func (c ConnectionSalesforce) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSalesforce) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSalesforce) GetStatus() ConnectionSalesforceStatus {
	if o == nil {
		return ConnectionSalesforceStatus("")
	}
	return o.Status
}

func (o *ConnectionSalesforce) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSalesforce) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionSalesforce) GetDefaultUpdateSchedule() []ConnectionSalesforceDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionSalesforceDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionSalesforce) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionSalesforce) GetType() ConnectionSalesforceType {
	if o == nil {
		return ConnectionSalesforceType("")
	}
	return o.Type
}

func (o *ConnectionSalesforce) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionSalesforce) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSalesforce) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSalesforce) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSalesforce) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSalesforce) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSalesforce) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSalesforce) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionSalesforce) GetSandbox() bool {
	if o == nil {
		return false
	}
	return o.Sandbox
}

func (o *ConnectionSalesforce) GetQuotaLimit() int64 {
	if o == nil {
		return 0
	}
	return o.QuotaLimit
}

func (o *ConnectionSalesforce) GetInstanceURL() string {
	if o == nil {
		return ""
	}
	return o.InstanceURL
}

type ConnectionSalesforceInput struct {
	// The unique name of this connection.
	Name string                   `json:"name"`
	Type ConnectionSalesforceType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Code retrieved from `/connections/oauth2-initiation`. **Note:** it is short-lived, therefore the connection creation should be done as soon as code is returned.
	Code    string `json:"code"`
	Sandbox bool   `json:"sandbox"`
	// The maximum number of Bulk API batch requests Etleap will use per 24-hour window. Etleap will also stop if the remaining quota goes under 500 requests.
	QuotaLimit int64 `json:"quotaLimit"`
}

func (o *ConnectionSalesforceInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSalesforceInput) GetType() ConnectionSalesforceType {
	if o == nil {
		return ConnectionSalesforceType("")
	}
	return o.Type
}

func (o *ConnectionSalesforceInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSalesforceInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSalesforceInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSalesforceInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSalesforceInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSalesforceInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSalesforceInput) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *ConnectionSalesforceInput) GetSandbox() bool {
	if o == nil {
		return false
	}
	return o.Sandbox
}

func (o *ConnectionSalesforceInput) GetQuotaLimit() int64 {
	if o == nil {
		return 0
	}
	return o.QuotaLimit
}
