// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceTwitterType string

const (
	SourceTwitterTypeTwitterAds SourceTwitterType = "TWITTER_ADS"
)

func (e SourceTwitterType) ToPointer() *SourceTwitterType {
	return &e
}

func (e *SourceTwitterType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TWITTER_ADS":
		*e = SourceTwitterType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTwitterType: %v", v)
	}
}

type SourceTwitter struct {
	Type SourceTwitterType `json:"type"`
	// The universally unique identifier for the source.
	ConnectionID string `json:"connectionId"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// The Twitter entity. Example values: [Account, Campaign, Funding Instrument, Line Item, Media Creative, Promoted Tweet, Followers, Tweets Likes, Tweets Quotes, Retweets, Recent Mentions,Tweets, Account Report, Campaign Report, Funding Instrument Report, Line Item Report, Media Creative Report, Promoted Tweet Report]
	Entity string `json:"entity"`
}

func (o *SourceTwitter) GetType() SourceTwitterType {
	if o == nil {
		return SourceTwitterType("")
	}
	return o.Type
}

func (o *SourceTwitter) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceTwitter) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceTwitter) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}
