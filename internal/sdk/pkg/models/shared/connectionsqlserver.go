// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionSQLServerType string

const (
	ConnectionSQLServerTypeSQLServer ConnectionSQLServerType = "SQL_SERVER"
)

func (e ConnectionSQLServerType) ToPointer() *ConnectionSQLServerType {
	return &e
}

func (e *ConnectionSQLServerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SQL_SERVER":
		*e = ConnectionSQLServerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSQLServerType: %v", v)
	}
}

// ConnectionSQLServerStatus - The current status of the connection.
type ConnectionSQLServerStatus string

const (
	ConnectionSQLServerStatusUnknown     ConnectionSQLServerStatus = "UNKNOWN"
	ConnectionSQLServerStatusUp          ConnectionSQLServerStatus = "UP"
	ConnectionSQLServerStatusDown        ConnectionSQLServerStatus = "DOWN"
	ConnectionSQLServerStatusResize      ConnectionSQLServerStatus = "RESIZE"
	ConnectionSQLServerStatusMaintenance ConnectionSQLServerStatus = "MAINTENANCE"
	ConnectionSQLServerStatusQuota       ConnectionSQLServerStatus = "QUOTA"
	ConnectionSQLServerStatusCreating    ConnectionSQLServerStatus = "CREATING"
)

func (e ConnectionSQLServerStatus) ToPointer() *ConnectionSQLServerStatus {
	return &e
}

func (e *ConnectionSQLServerStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionSQLServerStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSQLServerStatus: %v", v)
	}
}

// ConnectionSQLServer - Specifies the location of a database.
type ConnectionSQLServer struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionSQLServerType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionSQLServerStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// If not specified, the default schema will be used.
	Schema *string `json:"schema,omitempty"`
	// Should Etleap use the SQL Server transaction log to capture changes from this database? This setting cannot be changed later.
	CdcEnabled *bool      `default:"false" json:"cdcEnabled"`
	Address    string     `json:"address"`
	Port       int64      `json:"port"`
	Database   string     `json:"database"`
	Username   string     `json:"username"`
	SSHConfig  *SSHConfig `json:"sshConfig,omitempty"`
}

func (c ConnectionSQLServer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSQLServer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSQLServer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionSQLServer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSQLServer) GetType() ConnectionSQLServerType {
	if o == nil {
		return ConnectionSQLServerType("")
	}
	return o.Type
}

func (o *ConnectionSQLServer) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionSQLServer) GetStatus() ConnectionSQLServerStatus {
	if o == nil {
		return ConnectionSQLServerStatus("")
	}
	return o.Status
}

func (o *ConnectionSQLServer) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionSQLServer) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionSQLServer) GetCdcEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CdcEnabled
}

func (o *ConnectionSQLServer) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionSQLServer) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *ConnectionSQLServer) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *ConnectionSQLServer) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionSQLServer) GetSSHConfig() *SSHConfig {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}

// ConnectionSQLServerInput - Specifies the location of a database.
type ConnectionSQLServerInput struct {
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionSQLServerType `json:"type"`
	// If not specified, the default schema will be used.
	Schema *string `json:"schema,omitempty"`
	// Should Etleap use the SQL Server transaction log to capture changes from this database? This setting cannot be changed later.
	CdcEnabled *bool      `default:"false" json:"cdcEnabled"`
	Address    string     `json:"address"`
	Port       int64      `json:"port"`
	Database   string     `json:"database"`
	Username   string     `json:"username"`
	Password   string     `json:"password"`
	SSHConfig  *SSHConfig `json:"sshConfig,omitempty"`
}

func (c ConnectionSQLServerInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSQLServerInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSQLServerInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSQLServerInput) GetType() ConnectionSQLServerType {
	if o == nil {
		return ConnectionSQLServerType("")
	}
	return o.Type
}

func (o *ConnectionSQLServerInput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionSQLServerInput) GetCdcEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CdcEnabled
}

func (o *ConnectionSQLServerInput) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionSQLServerInput) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *ConnectionSQLServerInput) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *ConnectionSQLServerInput) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionSQLServerInput) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *ConnectionSQLServerInput) GetSSHConfig() *SSHConfig {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}
