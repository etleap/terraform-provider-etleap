// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionDb2Type string

const (
	ConnectionDb2TypeDb2 ConnectionDb2Type = "DB2"
)

func (e ConnectionDb2Type) ToPointer() *ConnectionDb2Type {
	return &e
}

func (e *ConnectionDb2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DB2":
		*e = ConnectionDb2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionDb2Type: %v", v)
	}
}

// ConnectionDb2Status - The current status of the connection.
type ConnectionDb2Status string

const (
	ConnectionDb2StatusUnknown     ConnectionDb2Status = "UNKNOWN"
	ConnectionDb2StatusUp          ConnectionDb2Status = "UP"
	ConnectionDb2StatusDown        ConnectionDb2Status = "DOWN"
	ConnectionDb2StatusResize      ConnectionDb2Status = "RESIZE"
	ConnectionDb2StatusMaintenance ConnectionDb2Status = "MAINTENANCE"
	ConnectionDb2StatusQuota       ConnectionDb2Status = "QUOTA"
	ConnectionDb2StatusCreating    ConnectionDb2Status = "CREATING"
)

func (e ConnectionDb2Status) ToPointer() *ConnectionDb2Status {
	return &e
}

func (e *ConnectionDb2Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionDb2Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionDb2Status: %v", v)
	}
}

// ConnectionDb2 - Specifies the location of a database.
type ConnectionDb2 struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string            `json:"name"`
	Type ConnectionDb2Type `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionDb2Status `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// If not specified, the default schema will be used.
	Schema    *string    `json:"schema,omitempty"`
	Address   string     `json:"address"`
	Port      int64      `json:"port"`
	Database  string     `json:"database"`
	Username  string     `json:"username"`
	SSHConfig *SSHConfig `json:"sshConfig,omitempty"`
}

func (c ConnectionDb2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionDb2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionDb2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionDb2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionDb2) GetType() ConnectionDb2Type {
	if o == nil {
		return ConnectionDb2Type("")
	}
	return o.Type
}

func (o *ConnectionDb2) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionDb2) GetStatus() ConnectionDb2Status {
	if o == nil {
		return ConnectionDb2Status("")
	}
	return o.Status
}

func (o *ConnectionDb2) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionDb2) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionDb2) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionDb2) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *ConnectionDb2) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *ConnectionDb2) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionDb2) GetSSHConfig() *SSHConfig {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}

// ConnectionDb2Input - Specifies the location of a database.
type ConnectionDb2Input struct {
	// The unique name of this connection.
	Name string            `json:"name"`
	Type ConnectionDb2Type `json:"type"`
	// If not specified, the default schema will be used.
	Schema    *string    `json:"schema,omitempty"`
	Address   string     `json:"address"`
	Port      int64      `json:"port"`
	Database  string     `json:"database"`
	Username  string     `json:"username"`
	Password  string     `json:"password"`
	SSHConfig *SSHConfig `json:"sshConfig,omitempty"`
}

func (o *ConnectionDb2Input) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionDb2Input) GetType() ConnectionDb2Type {
	if o == nil {
		return ConnectionDb2Type("")
	}
	return o.Type
}

func (o *ConnectionDb2Input) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionDb2Input) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionDb2Input) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *ConnectionDb2Input) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *ConnectionDb2Input) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionDb2Input) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *ConnectionDb2Input) GetSSHConfig() *SSHConfig {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}
