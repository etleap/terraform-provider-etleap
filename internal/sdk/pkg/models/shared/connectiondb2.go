// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionDb2Type string

const (
	ConnectionDb2TypeDb2 ConnectionDb2Type = "DB2"
)

func (e ConnectionDb2Type) ToPointer() *ConnectionDb2Type {
	return &e
}

func (e *ConnectionDb2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DB2":
		*e = ConnectionDb2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionDb2Type: %v", v)
	}
}

// ConnectionDb2Status - The current status of the connection.
type ConnectionDb2Status string

const (
	ConnectionDb2StatusUnknown     ConnectionDb2Status = "UNKNOWN"
	ConnectionDb2StatusUp          ConnectionDb2Status = "UP"
	ConnectionDb2StatusDown        ConnectionDb2Status = "DOWN"
	ConnectionDb2StatusResize      ConnectionDb2Status = "RESIZE"
	ConnectionDb2StatusMaintenance ConnectionDb2Status = "MAINTENANCE"
	ConnectionDb2StatusQuota       ConnectionDb2Status = "QUOTA"
	ConnectionDb2StatusCreating    ConnectionDb2Status = "CREATING"
)

func (e ConnectionDb2Status) ToPointer() *ConnectionDb2Status {
	return &e
}

func (e *ConnectionDb2Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionDb2Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionDb2Status: %v", v)
	}
}

type ConnectionDb2DefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionDb2DefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionDb2DefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionDb2DefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionDb2DefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionDb2DefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionDb2DefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionDb2DefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

// ConnectionDb2 - Specifies the location of a database.
type ConnectionDb2 struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string            `json:"name"`
	Type ConnectionDb2Type `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionDb2Status `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionDb2DefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// If not specified, the default schema will be used.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Schema *string `json:"schema,omitempty"`
	// Etleap secures all connections with TLS encryption. You can provide your own TLS certificate, or if none is provided, the AWS RDS global certificate bundle will be used by default.
	Certificate *string    `json:"certificate,omitempty"`
	Address     string     `json:"address"`
	Port        int64      `json:"port"`
	Username    string     `json:"username"`
	SSHConfig   *SSHConfig `json:"sshConfig,omitempty"`
	Database    string     `json:"database"`
}

func (c ConnectionDb2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionDb2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionDb2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionDb2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionDb2) GetType() ConnectionDb2Type {
	if o == nil {
		return ConnectionDb2Type("")
	}
	return o.Type
}

func (o *ConnectionDb2) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionDb2) GetStatus() ConnectionDb2Status {
	if o == nil {
		return ConnectionDb2Status("")
	}
	return o.Status
}

func (o *ConnectionDb2) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionDb2) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionDb2) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionDb2) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionDb2) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionDb2) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionDb2) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionDb2) GetDefaultUpdateSchedule() []ConnectionDb2DefaultUpdateSchedule {
	if o == nil {
		return []ConnectionDb2DefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionDb2) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionDb2) GetCertificate() *string {
	if o == nil {
		return nil
	}
	return o.Certificate
}

func (o *ConnectionDb2) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionDb2) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *ConnectionDb2) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionDb2) GetSSHConfig() *SSHConfig {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}

func (o *ConnectionDb2) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

// ConnectionDb2Input - Specifies the location of a database.
type ConnectionDb2Input struct {
	// The unique name of this connection.
	Name string            `json:"name"`
	Type ConnectionDb2Type `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// If not specified, the default schema will be used.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Schema *string `json:"schema,omitempty"`
	// Etleap secures all connections with TLS encryption. You can provide your own TLS certificate, or if none is provided, the AWS RDS global certificate bundle will be used by default.
	Certificate *string    `json:"certificate,omitempty"`
	Address     string     `json:"address"`
	Port        int64      `json:"port"`
	Username    string     `json:"username"`
	Password    string     `json:"password"`
	SSHConfig   *SSHConfig `json:"sshConfig,omitempty"`
	Database    string     `json:"database"`
}

func (o *ConnectionDb2Input) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionDb2Input) GetType() ConnectionDb2Type {
	if o == nil {
		return ConnectionDb2Type("")
	}
	return o.Type
}

func (o *ConnectionDb2Input) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionDb2Input) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionDb2Input) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionDb2Input) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionDb2Input) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionDb2Input) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionDb2Input) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionDb2Input) GetCertificate() *string {
	if o == nil {
		return nil
	}
	return o.Certificate
}

func (o *ConnectionDb2Input) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionDb2Input) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *ConnectionDb2Input) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionDb2Input) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *ConnectionDb2Input) GetSSHConfig() *SSHConfig {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}

func (o *ConnectionDb2Input) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}
