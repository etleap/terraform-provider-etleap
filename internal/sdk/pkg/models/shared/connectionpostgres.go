// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionPostgresType string

const (
	ConnectionPostgresTypePostgres ConnectionPostgresType = "POSTGRES"
)

func (e ConnectionPostgresType) ToPointer() *ConnectionPostgresType {
	return &e
}

func (e *ConnectionPostgresType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTGRES":
		*e = ConnectionPostgresType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionPostgresType: %v", v)
	}
}

// ConnectionPostgresStatus - The current status of the connection.
type ConnectionPostgresStatus string

const (
	ConnectionPostgresStatusUnknown     ConnectionPostgresStatus = "UNKNOWN"
	ConnectionPostgresStatusUp          ConnectionPostgresStatus = "UP"
	ConnectionPostgresStatusDown        ConnectionPostgresStatus = "DOWN"
	ConnectionPostgresStatusResize      ConnectionPostgresStatus = "RESIZE"
	ConnectionPostgresStatusMaintenance ConnectionPostgresStatus = "MAINTENANCE"
	ConnectionPostgresStatusQuota       ConnectionPostgresStatus = "QUOTA"
	ConnectionPostgresStatusCreating    ConnectionPostgresStatus = "CREATING"
)

func (e ConnectionPostgresStatus) ToPointer() *ConnectionPostgresStatus {
	return &e
}

func (e *ConnectionPostgresStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionPostgresStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionPostgresStatus: %v", v)
	}
}

// ConnectionPostgres - Specifies the location of a database.
type ConnectionPostgres struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionPostgresType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionPostgresStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// If not specified, the default schema will be used.
	Schema *string `json:"schema,omitempty"`
	// If you want Etleap to create pipelines for each source table automatically, specify the id of an Etleap destination connection here. If you want to create pipelines manually, omit this property. Note that only the connection owner can change this setting.
	AutoReplicate *string `json:"autoReplicate,omitempty"`
	// Should Etleap use PostgreSQL replication to capture changes from this database? This setting cannot be changed once the connection has been created. Follow [the setup instructions here](https://docs.etleap.com/docs/documentation/ZG9jOjM3MjY3NzM5-postgres) and ensure that all requirements are met.
	CdcEnabled *bool      `default:"false" json:"cdcEnabled"`
	Address    string     `json:"address"`
	Port       int64      `json:"port"`
	Database   string     `json:"database"`
	Username   string     `json:"username"`
	SSHConfig  *SSHConfig `json:"sshConfig,omitempty"`
}

func (c ConnectionPostgres) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionPostgres) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionPostgres) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionPostgres) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionPostgres) GetType() ConnectionPostgresType {
	if o == nil {
		return ConnectionPostgresType("")
	}
	return o.Type
}

func (o *ConnectionPostgres) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionPostgres) GetStatus() ConnectionPostgresStatus {
	if o == nil {
		return ConnectionPostgresStatus("")
	}
	return o.Status
}

func (o *ConnectionPostgres) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionPostgres) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionPostgres) GetAutoReplicate() *string {
	if o == nil {
		return nil
	}
	return o.AutoReplicate
}

func (o *ConnectionPostgres) GetCdcEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CdcEnabled
}

func (o *ConnectionPostgres) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionPostgres) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *ConnectionPostgres) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *ConnectionPostgres) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionPostgres) GetSSHConfig() *SSHConfig {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}

// ConnectionPostgresInput - Specifies the location of a database.
type ConnectionPostgresInput struct {
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionPostgresType `json:"type"`
	// If not specified, the default schema will be used.
	Schema *string `json:"schema,omitempty"`
	// If you want Etleap to create pipelines for each source table automatically, specify the id of an Etleap destination connection here. If you want to create pipelines manually, omit this property. Note that only the connection owner can change this setting.
	AutoReplicate *string `json:"autoReplicate,omitempty"`
	// Should Etleap use PostgreSQL replication to capture changes from this database? This setting cannot be changed once the connection has been created. Follow [the setup instructions here](https://docs.etleap.com/docs/documentation/ZG9jOjM3MjY3NzM5-postgres) and ensure that all requirements are met.
	CdcEnabled *bool      `default:"false" json:"cdcEnabled"`
	Address    string     `json:"address"`
	Port       int64      `json:"port"`
	Database   string     `json:"database"`
	Username   string     `json:"username"`
	Password   string     `json:"password"`
	SSHConfig  *SSHConfig `json:"sshConfig,omitempty"`
}

func (c ConnectionPostgresInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionPostgresInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionPostgresInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionPostgresInput) GetType() ConnectionPostgresType {
	if o == nil {
		return ConnectionPostgresType("")
	}
	return o.Type
}

func (o *ConnectionPostgresInput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionPostgresInput) GetAutoReplicate() *string {
	if o == nil {
		return nil
	}
	return o.AutoReplicate
}

func (o *ConnectionPostgresInput) GetCdcEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CdcEnabled
}

func (o *ConnectionPostgresInput) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionPostgresInput) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *ConnectionPostgresInput) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *ConnectionPostgresInput) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionPostgresInput) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *ConnectionPostgresInput) GetSSHConfig() *SSHConfig {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}
