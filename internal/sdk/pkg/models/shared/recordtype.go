// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type RecordTypeName string

const (
	RecordTypeNameRecord RecordTypeName = "RECORD"
)

func (e RecordTypeName) ToPointer() *RecordTypeName {
	return &e
}

func (e *RecordTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RECORD":
		*e = RecordTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordTypeName: %v", v)
	}
}

type RecordType struct {
	Name          *RecordTypeName `default:"RECORD" json:"name"`
	RecordColumns []Column        `json:"recordColumns,omitempty"`
}

func (r RecordType) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecordType) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RecordType) GetName() *RecordTypeName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *RecordType) GetRecordColumns() []Column {
	if o == nil {
		return nil
	}
	return o.RecordColumns
}
