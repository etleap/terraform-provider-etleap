// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type ConnectionTypesInputType string

const (
	ConnectionTypesInputTypeActiveCampaign           ConnectionTypesInputType = "ACTIVE_CAMPAIGN"
	ConnectionTypesInputTypeBigquery                 ConnectionTypesInputType = "BIGQUERY"
	ConnectionTypesInputTypeBingAds                  ConnectionTypesInputType = "BING_ADS"
	ConnectionTypesInputTypeBlackline                ConnectionTypesInputType = "BLACKLINE"
	ConnectionTypesInputTypeCriteo                   ConnectionTypesInputType = "CRITEO"
	ConnectionTypesInputTypeDb2                      ConnectionTypesInputType = "DB2"
	ConnectionTypesInputTypeDb2Sharded               ConnectionTypesInputType = "DB2_SHARDED"
	ConnectionTypesInputTypeDeltaLake                ConnectionTypesInputType = "DELTA_LAKE"
	ConnectionTypesInputTypeElasticsearch            ConnectionTypesInputType = "ELASTICSEARCH"
	ConnectionTypesInputTypeElluminate               ConnectionTypesInputType = "ELLUMINATE"
	ConnectionTypesInputTypeEloqua                   ConnectionTypesInputType = "ELOQUA"
	ConnectionTypesInputTypeFacebookAds              ConnectionTypesInputType = "FACEBOOK_ADS"
	ConnectionTypesInputTypeFifteenFive              ConnectionTypesInputType = "FIFTEEN_FIVE"
	ConnectionTypesInputTypeFreshworks               ConnectionTypesInputType = "FRESHWORKS"
	ConnectionTypesInputTypeFtp                      ConnectionTypesInputType = "FTP"
	ConnectionTypesInputTypeGong                     ConnectionTypesInputType = "GONG"
	ConnectionTypesInputTypeGoogleAds                ConnectionTypesInputType = "GOOGLE_ADS"
	ConnectionTypesInputTypeGoogleAnalytics          ConnectionTypesInputType = "GOOGLE_ANALYTICS"
	ConnectionTypesInputTypeGoogleAnalyticsGa4       ConnectionTypesInputType = "GOOGLE_ANALYTICS_GA4"
	ConnectionTypesInputTypeGoogleCloudStorage       ConnectionTypesInputType = "GOOGLE_CLOUD_STORAGE"
	ConnectionTypesInputTypeGoogleSheets             ConnectionTypesInputType = "GOOGLE_SHEETS"
	ConnectionTypesInputTypeHubspot                  ConnectionTypesInputType = "HUBSPOT"
	ConnectionTypesInputTypeImpactRadius             ConnectionTypesInputType = "IMPACT_RADIUS"
	ConnectionTypesInputTypeIntercom                 ConnectionTypesInputType = "INTERCOM"
	ConnectionTypesInputTypeJiraAlign                ConnectionTypesInputType = "JIRA_ALIGN"
	ConnectionTypesInputTypeKafka                    ConnectionTypesInputType = "KAFKA"
	ConnectionTypesInputTypeKustomer                 ConnectionTypesInputType = "KUSTOMER"
	ConnectionTypesInputTypeLdap                     ConnectionTypesInputType = "LDAP"
	ConnectionTypesInputTypeLdapVirtualListView      ConnectionTypesInputType = "LDAP_VIRTUAL_LIST_VIEW"
	ConnectionTypesInputTypeLinkedInAds              ConnectionTypesInputType = "LINKED_IN_ADS"
	ConnectionTypesInputTypeMarketo                  ConnectionTypesInputType = "MARKETO"
	ConnectionTypesInputTypeMixpanel                 ConnectionTypesInputType = "MIXPANEL"
	ConnectionTypesInputTypeMongodb                  ConnectionTypesInputType = "MONGODB"
	ConnectionTypesInputTypeMysql                    ConnectionTypesInputType = "MYSQL"
	ConnectionTypesInputTypeMysqlSharded             ConnectionTypesInputType = "MYSQL_SHARDED"
	ConnectionTypesInputTypeNetsuite                 ConnectionTypesInputType = "NETSUITE"
	ConnectionTypesInputTypeNetsuiteV2               ConnectionTypesInputType = "NETSUITE_V2"
	ConnectionTypesInputTypeOracle                   ConnectionTypesInputType = "ORACLE"
	ConnectionTypesInputTypeOracleSharded            ConnectionTypesInputType = "ORACLE_SHARDED"
	ConnectionTypesInputTypeOutlook                  ConnectionTypesInputType = "OUTLOOK"
	ConnectionTypesInputTypeOutreach                 ConnectionTypesInputType = "OUTREACH"
	ConnectionTypesInputTypePinterestAds             ConnectionTypesInputType = "PINTEREST_ADS"
	ConnectionTypesInputTypePostgres                 ConnectionTypesInputType = "POSTGRES"
	ConnectionTypesInputTypePostgresSharded          ConnectionTypesInputType = "POSTGRES_SHARDED"
	ConnectionTypesInputTypeQuoraAds                 ConnectionTypesInputType = "QUORA_ADS"
	ConnectionTypesInputTypeRaveMedidata             ConnectionTypesInputType = "RAVE_MEDIDATA"
	ConnectionTypesInputTypeRecurly                  ConnectionTypesInputType = "RECURLY"
	ConnectionTypesInputTypeRedshift                 ConnectionTypesInputType = "REDSHIFT"
	ConnectionTypesInputTypeRedshiftSharded          ConnectionTypesInputType = "REDSHIFT_SHARDED"
	ConnectionTypesInputTypeS3DataLake               ConnectionTypesInputType = "S3_DATA_LAKE"
	ConnectionTypesInputTypeS3Input                  ConnectionTypesInputType = "S3_INPUT"
	ConnectionTypesInputTypeSalesforce               ConnectionTypesInputType = "SALESFORCE"
	ConnectionTypesInputTypeSalesforceMarketingCloud ConnectionTypesInputType = "SALESFORCE_MARKETING_CLOUD"
	ConnectionTypesInputTypeSapHana                  ConnectionTypesInputType = "SAP_HANA"
	ConnectionTypesInputTypeSapHanaSharded           ConnectionTypesInputType = "SAP_HANA_SHARDED"
	ConnectionTypesInputTypeSeismic                  ConnectionTypesInputType = "SEISMIC"
	ConnectionTypesInputTypeSftp                     ConnectionTypesInputType = "SFTP"
	ConnectionTypesInputTypeShopify                  ConnectionTypesInputType = "SHOPIFY"
	ConnectionTypesInputTypeSkyward                  ConnectionTypesInputType = "SKYWARD"
	ConnectionTypesInputTypeSnapchatAds              ConnectionTypesInputType = "SNAPCHAT_ADS"
	ConnectionTypesInputTypeSnowflake                ConnectionTypesInputType = "SNOWFLAKE"
	ConnectionTypesInputTypeSnowflakeSharded         ConnectionTypesInputType = "SNOWFLAKE_SHARDED"
	ConnectionTypesInputTypeSQLServer                ConnectionTypesInputType = "SQL_SERVER"
	ConnectionTypesInputTypeSQLServerSharded         ConnectionTypesInputType = "SQL_SERVER_SHARDED"
	ConnectionTypesInputTypeSquare                   ConnectionTypesInputType = "SQUARE"
	ConnectionTypesInputTypeStripe                   ConnectionTypesInputType = "STRIPE"
	ConnectionTypesInputTypeSumtotal                 ConnectionTypesInputType = "SUMTOTAL"
	ConnectionTypesInputTypeTheTradeDesk             ConnectionTypesInputType = "THE_TRADE_DESK"
	ConnectionTypesInputTypeTikTokAds                ConnectionTypesInputType = "TIK_TOK_ADS"
	ConnectionTypesInputTypeTwilio                   ConnectionTypesInputType = "TWILIO"
	ConnectionTypesInputTypeTwitterAds               ConnectionTypesInputType = "TWITTER_ADS"
	ConnectionTypesInputTypeUservoice                ConnectionTypesInputType = "USERVOICE"
	ConnectionTypesInputTypeUserDefinedAPI           ConnectionTypesInputType = "USER_DEFINED_API"
	ConnectionTypesInputTypeVeeva                    ConnectionTypesInputType = "VEEVA"
	ConnectionTypesInputTypeVerizonMediaDsp          ConnectionTypesInputType = "VERIZON_MEDIA_DSP"
	ConnectionTypesInputTypeWorkdayReport            ConnectionTypesInputType = "WORKDAY_REPORT"
	ConnectionTypesInputTypeWorkfront                ConnectionTypesInputType = "WORKFRONT"
	ConnectionTypesInputTypeZendesk                  ConnectionTypesInputType = "ZENDESK"
	ConnectionTypesInputTypeZoomPhone                ConnectionTypesInputType = "ZOOM_PHONE"
	ConnectionTypesInputTypeZuora                    ConnectionTypesInputType = "ZUORA"
)

type ConnectionTypesInput struct {
	ConnectionActiveCampaignInput           *ConnectionActiveCampaignInput
	ConnectionBigQueryInput                 *ConnectionBigQueryInput
	ConnectionBingInput                     *ConnectionBingInput
	ConnectionBlacklineInput                *ConnectionBlacklineInput
	ConnectionCriteoInput                   *ConnectionCriteoInput
	ConnectionDb2Input                      *ConnectionDb2Input
	ConnectionDb2ShardedInput               *ConnectionDb2ShardedInput
	ConnectionDeltaLakeInput                *ConnectionDeltaLakeInput
	ConnectionElasticSearchInput            *ConnectionElasticSearchInput
	ConnectionElluminateInput               *ConnectionElluminateInput
	ConnectionEloquaInput                   *ConnectionEloquaInput
	ConnectionFbInput                       *ConnectionFbInput
	ConnectionFifteenFiveInput              *ConnectionFifteenFiveInput
	ConnectionFreshworksInput               *ConnectionFreshworksInput
	ConnectionFtpInput                      *ConnectionFtpInput
	ConnectionGaInput                       *ConnectionGaInput
	ConnectionGongInput                     *ConnectionGongInput
	ConnectionGoogleAdsInput                *ConnectionGoogleAdsInput
	ConnectionGoogleAnalyticsGa4Input       *ConnectionGoogleAnalyticsGa4Input
	ConnectionGoogleCloudStorageInput       *ConnectionGoogleCloudStorageInput
	ConnectionGoogleSheetsInput             *ConnectionGoogleSheetsInput
	ConnectionHubspotInput                  *ConnectionHubspotInput
	ConnectionImpactRadiusInput             *ConnectionImpactRadiusInput
	ConnectionIntercomInput                 *ConnectionIntercomInput
	ConnectionJiraAlignInput                *ConnectionJiraAlignInput
	ConnectionKafkaInput                    *ConnectionKafkaInput
	ConnectionKustomerInput                 *ConnectionKustomerInput
	ConnectionLdapInput                     *ConnectionLdapInput
	ConnectionLdapVirtualListViewInput      *ConnectionLdapVirtualListViewInput
	ConnectionLinkedInAdsInput              *ConnectionLinkedInAdsInput
	ConnectionMarketoInput                  *ConnectionMarketoInput
	ConnectionMixpanelInput                 *ConnectionMixpanelInput
	ConnectionMongoInput                    *ConnectionMongoInput
	ConnectionMysqlInput                    *ConnectionMysqlInput
	ConnectionMysqlShardedInput             *ConnectionMysqlShardedInput
	ConnectionNetsuiteInput                 *ConnectionNetsuiteInput
	ConnectionNetsuiteV2Input               *ConnectionNetsuiteV2Input
	ConnectionOracleInput                   *ConnectionOracleInput
	ConnectionOracleShardedInput            *ConnectionOracleShardedInput
	ConnectionOutlookInput                  *ConnectionOutlookInput
	ConnectionOutreachInput                 *ConnectionOutreachInput
	ConnectionPinterestAdsInput             *ConnectionPinterestAdsInput
	ConnectionPostgresInput                 *ConnectionPostgresInput
	ConnectionPostgresShardedInput          *ConnectionPostgresShardedInput
	ConnectionQuoraInput                    *ConnectionQuoraInput
	ConnectionRaveMedidataInput             *ConnectionRaveMedidataInput
	ConnectionRecurlyInput                  *ConnectionRecurlyInput
	ConnectionRedshiftInput                 *ConnectionRedshiftInput
	ConnectionRedshiftShardedInput          *ConnectionRedshiftShardedInput
	ConnectionS3DataLakeInput               *ConnectionS3DataLakeInput
	ConnectionS3InputInput                  *ConnectionS3InputInput
	ConnectionSalesforceInput               *ConnectionSalesforceInput
	ConnectionSalesforceMarketingCloudInput *ConnectionSalesforceMarketingCloudInput
	ConnectionSapHanaInput                  *ConnectionSapHanaInput
	ConnectionSapHanaShardedInput           *ConnectionSapHanaShardedInput
	ConnectionSeismicInput                  *ConnectionSeismicInput
	ConnectionSftpInput                     *ConnectionSftpInput
	ConnectionShopifyInput                  *ConnectionShopifyInput
	ConnectionSkywardInput                  *ConnectionSkywardInput
	ConnectionSnapchatAdsInput              *ConnectionSnapchatAdsInput
	ConnectionSnowflakeInput                *ConnectionSnowflakeInput
	ConnectionSnowflakeShardedInput         *ConnectionSnowflakeShardedInput
	ConnectionSQLServerInput                *ConnectionSQLServerInput
	ConnectionSQLServerShardedInput         *ConnectionSQLServerShardedInput
	ConnectionSquareInput                   *ConnectionSquareInput
	ConnectionStripeInput                   *ConnectionStripeInput
	ConnectionSumTotalInput                 *ConnectionSumTotalInput
	ConnectionTheTradeDeskInput             *ConnectionTheTradeDeskInput
	ConnectionTikTokAdsInput                *ConnectionTikTokAdsInput
	ConnectionTwilioInput                   *ConnectionTwilioInput
	ConnectionTwitterInput                  *ConnectionTwitterInput
	ConnectionUserDefinedAPIInput           *ConnectionUserDefinedAPIInput
	ConnectionUserVoiceInput                *ConnectionUserVoiceInput
	ConnectionVeevaInput                    *ConnectionVeevaInput
	ConnectionVerizonMediaInput             *ConnectionVerizonMediaInput
	ConnectionWorkdayReportInput            *ConnectionWorkdayReportInput
	ConnectionWorkfrontInput                *ConnectionWorkfrontInput
	ConnectionZendeskInput                  *ConnectionZendeskInput
	ConnectionZoomPhoneInput                *ConnectionZoomPhoneInput
	ConnectionZuoraInput                    *ConnectionZuoraInput

	Type ConnectionTypesInputType
}

func CreateConnectionTypesInputActiveCampaign(activeCampaign ConnectionActiveCampaignInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeActiveCampaign

	typStr := ConnectionActiveCampaignType(typ)
	activeCampaign.Type = typStr

	return ConnectionTypesInput{
		ConnectionActiveCampaignInput: &activeCampaign,
		Type:                          typ,
	}
}

func CreateConnectionTypesInputBigquery(bigquery ConnectionBigQueryInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeBigquery

	typStr := ConnectionBigQueryType(typ)
	bigquery.Type = typStr

	return ConnectionTypesInput{
		ConnectionBigQueryInput: &bigquery,
		Type:                    typ,
	}
}

func CreateConnectionTypesInputBingAds(bingAds ConnectionBingInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeBingAds

	typStr := ConnectionBingType(typ)
	bingAds.Type = typStr

	return ConnectionTypesInput{
		ConnectionBingInput: &bingAds,
		Type:                typ,
	}
}

func CreateConnectionTypesInputBlackline(blackline ConnectionBlacklineInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeBlackline

	typStr := ConnectionBlacklineType(typ)
	blackline.Type = typStr

	return ConnectionTypesInput{
		ConnectionBlacklineInput: &blackline,
		Type:                     typ,
	}
}

func CreateConnectionTypesInputCriteo(criteo ConnectionCriteoInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeCriteo

	typStr := ConnectionCriteoType(typ)
	criteo.Type = typStr

	return ConnectionTypesInput{
		ConnectionCriteoInput: &criteo,
		Type:                  typ,
	}
}

func CreateConnectionTypesInputDb2(db2 ConnectionDb2Input) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeDb2

	typStr := ConnectionDb2Type(typ)
	db2.Type = typStr

	return ConnectionTypesInput{
		ConnectionDb2Input: &db2,
		Type:               typ,
	}
}

func CreateConnectionTypesInputDb2Sharded(db2Sharded ConnectionDb2ShardedInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeDb2Sharded

	typStr := ConnectionDb2ShardedType(typ)
	db2Sharded.Type = typStr

	return ConnectionTypesInput{
		ConnectionDb2ShardedInput: &db2Sharded,
		Type:                      typ,
	}
}

func CreateConnectionTypesInputDeltaLake(deltaLake ConnectionDeltaLakeInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeDeltaLake

	typStr := ConnectionDeltaLakeType(typ)
	deltaLake.Type = typStr

	return ConnectionTypesInput{
		ConnectionDeltaLakeInput: &deltaLake,
		Type:                     typ,
	}
}

func CreateConnectionTypesInputElasticsearch(elasticsearch ConnectionElasticSearchInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeElasticsearch

	typStr := ConnectionElasticSearchType(typ)
	elasticsearch.Type = typStr

	return ConnectionTypesInput{
		ConnectionElasticSearchInput: &elasticsearch,
		Type:                         typ,
	}
}

func CreateConnectionTypesInputElluminate(elluminate ConnectionElluminateInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeElluminate

	typStr := ConnectionElluminateType(typ)
	elluminate.Type = typStr

	return ConnectionTypesInput{
		ConnectionElluminateInput: &elluminate,
		Type:                      typ,
	}
}

func CreateConnectionTypesInputEloqua(eloqua ConnectionEloquaInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeEloqua

	typStr := ConnectionEloquaType(typ)
	eloqua.Type = typStr

	return ConnectionTypesInput{
		ConnectionEloquaInput: &eloqua,
		Type:                  typ,
	}
}

func CreateConnectionTypesInputFacebookAds(facebookAds ConnectionFbInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeFacebookAds

	typStr := ConnectionFbType(typ)
	facebookAds.Type = typStr

	return ConnectionTypesInput{
		ConnectionFbInput: &facebookAds,
		Type:              typ,
	}
}

func CreateConnectionTypesInputFifteenFive(fifteenFive ConnectionFifteenFiveInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeFifteenFive

	typStr := ConnectionFifteenFiveType(typ)
	fifteenFive.Type = typStr

	return ConnectionTypesInput{
		ConnectionFifteenFiveInput: &fifteenFive,
		Type:                       typ,
	}
}

func CreateConnectionTypesInputFreshworks(freshworks ConnectionFreshworksInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeFreshworks

	typStr := ConnectionFreshworksType(typ)
	freshworks.Type = typStr

	return ConnectionTypesInput{
		ConnectionFreshworksInput: &freshworks,
		Type:                      typ,
	}
}

func CreateConnectionTypesInputFtp(ftp ConnectionFtpInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeFtp

	typStr := ConnectionFtpType(typ)
	ftp.Type = typStr

	return ConnectionTypesInput{
		ConnectionFtpInput: &ftp,
		Type:               typ,
	}
}

func CreateConnectionTypesInputGong(gong ConnectionGongInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeGong

	typStr := ConnectionGongType(typ)
	gong.Type = typStr

	return ConnectionTypesInput{
		ConnectionGongInput: &gong,
		Type:                typ,
	}
}

func CreateConnectionTypesInputGoogleAds(googleAds ConnectionGoogleAdsInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeGoogleAds

	typStr := ConnectionGoogleAdsType(typ)
	googleAds.Type = typStr

	return ConnectionTypesInput{
		ConnectionGoogleAdsInput: &googleAds,
		Type:                     typ,
	}
}

func CreateConnectionTypesInputGoogleAnalytics(googleAnalytics ConnectionGaInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeGoogleAnalytics

	typStr := ConnectionGaType(typ)
	googleAnalytics.Type = typStr

	return ConnectionTypesInput{
		ConnectionGaInput: &googleAnalytics,
		Type:              typ,
	}
}

func CreateConnectionTypesInputGoogleAnalyticsGa4(googleAnalyticsGa4 ConnectionGoogleAnalyticsGa4Input) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeGoogleAnalyticsGa4

	typStr := ConnectionGoogleAnalyticsGa4Type(typ)
	googleAnalyticsGa4.Type = typStr

	return ConnectionTypesInput{
		ConnectionGoogleAnalyticsGa4Input: &googleAnalyticsGa4,
		Type:                              typ,
	}
}

func CreateConnectionTypesInputGoogleCloudStorage(googleCloudStorage ConnectionGoogleCloudStorageInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeGoogleCloudStorage

	typStr := ConnectionGoogleCloudStorageType(typ)
	googleCloudStorage.Type = typStr

	return ConnectionTypesInput{
		ConnectionGoogleCloudStorageInput: &googleCloudStorage,
		Type:                              typ,
	}
}

func CreateConnectionTypesInputGoogleSheets(googleSheets ConnectionGoogleSheetsInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeGoogleSheets

	typStr := ConnectionGoogleSheetsType(typ)
	googleSheets.Type = typStr

	return ConnectionTypesInput{
		ConnectionGoogleSheetsInput: &googleSheets,
		Type:                        typ,
	}
}

func CreateConnectionTypesInputHubspot(hubspot ConnectionHubspotInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeHubspot

	typStr := ConnectionHubspotType(typ)
	hubspot.Type = typStr

	return ConnectionTypesInput{
		ConnectionHubspotInput: &hubspot,
		Type:                   typ,
	}
}

func CreateConnectionTypesInputImpactRadius(impactRadius ConnectionImpactRadiusInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeImpactRadius

	typStr := ConnectionImpactRadiusType(typ)
	impactRadius.Type = typStr

	return ConnectionTypesInput{
		ConnectionImpactRadiusInput: &impactRadius,
		Type:                        typ,
	}
}

func CreateConnectionTypesInputIntercom(intercom ConnectionIntercomInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeIntercom

	typStr := ConnectionIntercomType(typ)
	intercom.Type = typStr

	return ConnectionTypesInput{
		ConnectionIntercomInput: &intercom,
		Type:                    typ,
	}
}

func CreateConnectionTypesInputJiraAlign(jiraAlign ConnectionJiraAlignInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeJiraAlign

	typStr := ConnectionJiraAlignType(typ)
	jiraAlign.Type = typStr

	return ConnectionTypesInput{
		ConnectionJiraAlignInput: &jiraAlign,
		Type:                     typ,
	}
}

func CreateConnectionTypesInputKafka(kafka ConnectionKafkaInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeKafka

	typStr := ConnectionKafkaType(typ)
	kafka.Type = typStr

	return ConnectionTypesInput{
		ConnectionKafkaInput: &kafka,
		Type:                 typ,
	}
}

func CreateConnectionTypesInputKustomer(kustomer ConnectionKustomerInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeKustomer

	typStr := ConnectionKustomerType(typ)
	kustomer.Type = typStr

	return ConnectionTypesInput{
		ConnectionKustomerInput: &kustomer,
		Type:                    typ,
	}
}

func CreateConnectionTypesInputLdap(ldap ConnectionLdapInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeLdap

	typStr := ConnectionLdapType(typ)
	ldap.Type = typStr

	return ConnectionTypesInput{
		ConnectionLdapInput: &ldap,
		Type:                typ,
	}
}

func CreateConnectionTypesInputLdapVirtualListView(ldapVirtualListView ConnectionLdapVirtualListViewInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeLdapVirtualListView

	typStr := ConnectionLdapVirtualListViewType(typ)
	ldapVirtualListView.Type = typStr

	return ConnectionTypesInput{
		ConnectionLdapVirtualListViewInput: &ldapVirtualListView,
		Type:                               typ,
	}
}

func CreateConnectionTypesInputLinkedInAds(linkedInAds ConnectionLinkedInAdsInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeLinkedInAds

	typStr := ConnectionLinkedInAdsType(typ)
	linkedInAds.Type = typStr

	return ConnectionTypesInput{
		ConnectionLinkedInAdsInput: &linkedInAds,
		Type:                       typ,
	}
}

func CreateConnectionTypesInputMarketo(marketo ConnectionMarketoInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeMarketo

	typStr := ConnectionMarketoType(typ)
	marketo.Type = typStr

	return ConnectionTypesInput{
		ConnectionMarketoInput: &marketo,
		Type:                   typ,
	}
}

func CreateConnectionTypesInputMixpanel(mixpanel ConnectionMixpanelInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeMixpanel

	typStr := ConnectionMixpanelType(typ)
	mixpanel.Type = typStr

	return ConnectionTypesInput{
		ConnectionMixpanelInput: &mixpanel,
		Type:                    typ,
	}
}

func CreateConnectionTypesInputMongodb(mongodb ConnectionMongoInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeMongodb

	typStr := ConnectionMongoType(typ)
	mongodb.Type = typStr

	return ConnectionTypesInput{
		ConnectionMongoInput: &mongodb,
		Type:                 typ,
	}
}

func CreateConnectionTypesInputMysql(mysql ConnectionMysqlInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeMysql

	typStr := ConnectionMysqlType(typ)
	mysql.Type = typStr

	return ConnectionTypesInput{
		ConnectionMysqlInput: &mysql,
		Type:                 typ,
	}
}

func CreateConnectionTypesInputMysqlSharded(mysqlSharded ConnectionMysqlShardedInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeMysqlSharded

	typStr := ConnectionMysqlShardedType(typ)
	mysqlSharded.Type = typStr

	return ConnectionTypesInput{
		ConnectionMysqlShardedInput: &mysqlSharded,
		Type:                        typ,
	}
}

func CreateConnectionTypesInputNetsuite(netsuite ConnectionNetsuiteInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeNetsuite

	typStr := ConnectionNetsuiteType(typ)
	netsuite.Type = typStr

	return ConnectionTypesInput{
		ConnectionNetsuiteInput: &netsuite,
		Type:                    typ,
	}
}

func CreateConnectionTypesInputNetsuiteV2(netsuiteV2 ConnectionNetsuiteV2Input) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeNetsuiteV2

	typStr := ConnectionNetsuiteV2Type(typ)
	netsuiteV2.Type = typStr

	return ConnectionTypesInput{
		ConnectionNetsuiteV2Input: &netsuiteV2,
		Type:                      typ,
	}
}

func CreateConnectionTypesInputOracle(oracle ConnectionOracleInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeOracle

	typStr := ConnectionOracleType(typ)
	oracle.Type = typStr

	return ConnectionTypesInput{
		ConnectionOracleInput: &oracle,
		Type:                  typ,
	}
}

func CreateConnectionTypesInputOracleSharded(oracleSharded ConnectionOracleShardedInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeOracleSharded

	typStr := ConnectionOracleShardedType(typ)
	oracleSharded.Type = typStr

	return ConnectionTypesInput{
		ConnectionOracleShardedInput: &oracleSharded,
		Type:                         typ,
	}
}

func CreateConnectionTypesInputOutlook(outlook ConnectionOutlookInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeOutlook

	typStr := ConnectionOutlookType(typ)
	outlook.Type = typStr

	return ConnectionTypesInput{
		ConnectionOutlookInput: &outlook,
		Type:                   typ,
	}
}

func CreateConnectionTypesInputOutreach(outreach ConnectionOutreachInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeOutreach

	typStr := ConnectionOutreachType(typ)
	outreach.Type = typStr

	return ConnectionTypesInput{
		ConnectionOutreachInput: &outreach,
		Type:                    typ,
	}
}

func CreateConnectionTypesInputPinterestAds(pinterestAds ConnectionPinterestAdsInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypePinterestAds

	typStr := ConnectionPinterestAdsType(typ)
	pinterestAds.Type = typStr

	return ConnectionTypesInput{
		ConnectionPinterestAdsInput: &pinterestAds,
		Type:                        typ,
	}
}

func CreateConnectionTypesInputPostgres(postgres ConnectionPostgresInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypePostgres

	typStr := ConnectionPostgresType(typ)
	postgres.Type = typStr

	return ConnectionTypesInput{
		ConnectionPostgresInput: &postgres,
		Type:                    typ,
	}
}

func CreateConnectionTypesInputPostgresSharded(postgresSharded ConnectionPostgresShardedInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypePostgresSharded

	typStr := ConnectionPostgresShardedType(typ)
	postgresSharded.Type = typStr

	return ConnectionTypesInput{
		ConnectionPostgresShardedInput: &postgresSharded,
		Type:                           typ,
	}
}

func CreateConnectionTypesInputQuoraAds(quoraAds ConnectionQuoraInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeQuoraAds

	typStr := ConnectionQuoraType(typ)
	quoraAds.Type = typStr

	return ConnectionTypesInput{
		ConnectionQuoraInput: &quoraAds,
		Type:                 typ,
	}
}

func CreateConnectionTypesInputRaveMedidata(raveMedidata ConnectionRaveMedidataInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeRaveMedidata

	typStr := ConnectionRaveMedidataType(typ)
	raveMedidata.Type = typStr

	return ConnectionTypesInput{
		ConnectionRaveMedidataInput: &raveMedidata,
		Type:                        typ,
	}
}

func CreateConnectionTypesInputRecurly(recurly ConnectionRecurlyInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeRecurly

	typStr := ConnectionRecurlyType(typ)
	recurly.Type = typStr

	return ConnectionTypesInput{
		ConnectionRecurlyInput: &recurly,
		Type:                   typ,
	}
}

func CreateConnectionTypesInputRedshift(redshift ConnectionRedshiftInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeRedshift

	typStr := ConnectionRedshiftType(typ)
	redshift.Type = typStr

	return ConnectionTypesInput{
		ConnectionRedshiftInput: &redshift,
		Type:                    typ,
	}
}

func CreateConnectionTypesInputRedshiftSharded(redshiftSharded ConnectionRedshiftShardedInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeRedshiftSharded

	typStr := ConnectionRedshiftShardedType(typ)
	redshiftSharded.Type = typStr

	return ConnectionTypesInput{
		ConnectionRedshiftShardedInput: &redshiftSharded,
		Type:                           typ,
	}
}

func CreateConnectionTypesInputS3DataLake(s3DataLake ConnectionS3DataLakeInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeS3DataLake

	typStr := ConnectionS3DataLakeType(typ)
	s3DataLake.Type = typStr

	return ConnectionTypesInput{
		ConnectionS3DataLakeInput: &s3DataLake,
		Type:                      typ,
	}
}

func CreateConnectionTypesInputS3Input(s3Input ConnectionS3InputInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeS3Input

	typStr := ConnectionS3InputType(typ)
	s3Input.Type = typStr

	return ConnectionTypesInput{
		ConnectionS3InputInput: &s3Input,
		Type:                   typ,
	}
}

func CreateConnectionTypesInputSalesforce(salesforce ConnectionSalesforceInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSalesforce

	typStr := ConnectionSalesforceType(typ)
	salesforce.Type = typStr

	return ConnectionTypesInput{
		ConnectionSalesforceInput: &salesforce,
		Type:                      typ,
	}
}

func CreateConnectionTypesInputSalesforceMarketingCloud(salesforceMarketingCloud ConnectionSalesforceMarketingCloudInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSalesforceMarketingCloud

	typStr := ConnectionSalesforceMarketingCloudType(typ)
	salesforceMarketingCloud.Type = typStr

	return ConnectionTypesInput{
		ConnectionSalesforceMarketingCloudInput: &salesforceMarketingCloud,
		Type:                                    typ,
	}
}

func CreateConnectionTypesInputSapHana(sapHana ConnectionSapHanaInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSapHana

	typStr := ConnectionSapHanaType(typ)
	sapHana.Type = typStr

	return ConnectionTypesInput{
		ConnectionSapHanaInput: &sapHana,
		Type:                   typ,
	}
}

func CreateConnectionTypesInputSapHanaSharded(sapHanaSharded ConnectionSapHanaShardedInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSapHanaSharded

	typStr := ConnectionSapHanaShardedType(typ)
	sapHanaSharded.Type = typStr

	return ConnectionTypesInput{
		ConnectionSapHanaShardedInput: &sapHanaSharded,
		Type:                          typ,
	}
}

func CreateConnectionTypesInputSeismic(seismic ConnectionSeismicInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSeismic

	typStr := ConnectionSeismicType(typ)
	seismic.Type = typStr

	return ConnectionTypesInput{
		ConnectionSeismicInput: &seismic,
		Type:                   typ,
	}
}

func CreateConnectionTypesInputSftp(sftp ConnectionSftpInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSftp

	typStr := ConnectionSftpType(typ)
	sftp.Type = typStr

	return ConnectionTypesInput{
		ConnectionSftpInput: &sftp,
		Type:                typ,
	}
}

func CreateConnectionTypesInputShopify(shopify ConnectionShopifyInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeShopify

	typStr := ConnectionShopifyType(typ)
	shopify.Type = typStr

	return ConnectionTypesInput{
		ConnectionShopifyInput: &shopify,
		Type:                   typ,
	}
}

func CreateConnectionTypesInputSkyward(skyward ConnectionSkywardInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSkyward

	typStr := ConnectionSkywardType(typ)
	skyward.Type = typStr

	return ConnectionTypesInput{
		ConnectionSkywardInput: &skyward,
		Type:                   typ,
	}
}

func CreateConnectionTypesInputSnapchatAds(snapchatAds ConnectionSnapchatAdsInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSnapchatAds

	typStr := ConnectionSnapchatAdsType(typ)
	snapchatAds.Type = typStr

	return ConnectionTypesInput{
		ConnectionSnapchatAdsInput: &snapchatAds,
		Type:                       typ,
	}
}

func CreateConnectionTypesInputSnowflake(snowflake ConnectionSnowflakeInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSnowflake

	typStr := ConnectionSnowflakeType(typ)
	snowflake.Type = typStr

	return ConnectionTypesInput{
		ConnectionSnowflakeInput: &snowflake,
		Type:                     typ,
	}
}

func CreateConnectionTypesInputSnowflakeSharded(snowflakeSharded ConnectionSnowflakeShardedInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSnowflakeSharded

	typStr := ConnectionSnowflakeShardedType(typ)
	snowflakeSharded.Type = typStr

	return ConnectionTypesInput{
		ConnectionSnowflakeShardedInput: &snowflakeSharded,
		Type:                            typ,
	}
}

func CreateConnectionTypesInputSQLServer(sqlServer ConnectionSQLServerInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSQLServer

	typStr := ConnectionSQLServerType(typ)
	sqlServer.Type = typStr

	return ConnectionTypesInput{
		ConnectionSQLServerInput: &sqlServer,
		Type:                     typ,
	}
}

func CreateConnectionTypesInputSQLServerSharded(sqlServerSharded ConnectionSQLServerShardedInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSQLServerSharded

	typStr := ConnectionSQLServerShardedType(typ)
	sqlServerSharded.Type = typStr

	return ConnectionTypesInput{
		ConnectionSQLServerShardedInput: &sqlServerSharded,
		Type:                            typ,
	}
}

func CreateConnectionTypesInputSquare(square ConnectionSquareInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSquare

	typStr := ConnectionSquareType(typ)
	square.Type = typStr

	return ConnectionTypesInput{
		ConnectionSquareInput: &square,
		Type:                  typ,
	}
}

func CreateConnectionTypesInputStripe(stripe ConnectionStripeInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeStripe

	typStr := ConnectionStripeType(typ)
	stripe.Type = typStr

	return ConnectionTypesInput{
		ConnectionStripeInput: &stripe,
		Type:                  typ,
	}
}

func CreateConnectionTypesInputSumtotal(sumtotal ConnectionSumTotalInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeSumtotal

	typStr := ConnectionSumTotalType(typ)
	sumtotal.Type = typStr

	return ConnectionTypesInput{
		ConnectionSumTotalInput: &sumtotal,
		Type:                    typ,
	}
}

func CreateConnectionTypesInputTheTradeDesk(theTradeDesk ConnectionTheTradeDeskInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeTheTradeDesk

	typStr := ConnectionTheTradeDeskType(typ)
	theTradeDesk.Type = typStr

	return ConnectionTypesInput{
		ConnectionTheTradeDeskInput: &theTradeDesk,
		Type:                        typ,
	}
}

func CreateConnectionTypesInputTikTokAds(tikTokAds ConnectionTikTokAdsInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeTikTokAds

	typStr := ConnectionTikTokAdsType(typ)
	tikTokAds.Type = typStr

	return ConnectionTypesInput{
		ConnectionTikTokAdsInput: &tikTokAds,
		Type:                     typ,
	}
}

func CreateConnectionTypesInputTwilio(twilio ConnectionTwilioInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeTwilio

	typStr := ConnectionTwilioType(typ)
	twilio.Type = typStr

	return ConnectionTypesInput{
		ConnectionTwilioInput: &twilio,
		Type:                  typ,
	}
}

func CreateConnectionTypesInputTwitterAds(twitterAds ConnectionTwitterInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeTwitterAds

	typStr := ConnectionTwitterType(typ)
	twitterAds.Type = typStr

	return ConnectionTypesInput{
		ConnectionTwitterInput: &twitterAds,
		Type:                   typ,
	}
}

func CreateConnectionTypesInputUservoice(uservoice ConnectionUserVoiceInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeUservoice

	typStr := ConnectionUserVoiceType(typ)
	uservoice.Type = typStr

	return ConnectionTypesInput{
		ConnectionUserVoiceInput: &uservoice,
		Type:                     typ,
	}
}

func CreateConnectionTypesInputUserDefinedAPI(userDefinedAPI ConnectionUserDefinedAPIInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeUserDefinedAPI

	typStr := ConnectionUserDefinedAPIType(typ)
	userDefinedAPI.Type = typStr

	return ConnectionTypesInput{
		ConnectionUserDefinedAPIInput: &userDefinedAPI,
		Type:                          typ,
	}
}

func CreateConnectionTypesInputVeeva(veeva ConnectionVeevaInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeVeeva

	typStr := ConnectionVeevaType(typ)
	veeva.Type = typStr

	return ConnectionTypesInput{
		ConnectionVeevaInput: &veeva,
		Type:                 typ,
	}
}

func CreateConnectionTypesInputVerizonMediaDsp(verizonMediaDsp ConnectionVerizonMediaInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeVerizonMediaDsp

	typStr := ConnectionVerizonMediaType(typ)
	verizonMediaDsp.Type = typStr

	return ConnectionTypesInput{
		ConnectionVerizonMediaInput: &verizonMediaDsp,
		Type:                        typ,
	}
}

func CreateConnectionTypesInputWorkdayReport(workdayReport ConnectionWorkdayReportInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeWorkdayReport

	typStr := ConnectionWorkdayReportType(typ)
	workdayReport.Type = typStr

	return ConnectionTypesInput{
		ConnectionWorkdayReportInput: &workdayReport,
		Type:                         typ,
	}
}

func CreateConnectionTypesInputWorkfront(workfront ConnectionWorkfrontInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeWorkfront

	typStr := ConnectionWorkfrontType(typ)
	workfront.Type = typStr

	return ConnectionTypesInput{
		ConnectionWorkfrontInput: &workfront,
		Type:                     typ,
	}
}

func CreateConnectionTypesInputZendesk(zendesk ConnectionZendeskInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeZendesk

	typStr := ConnectionZendeskType(typ)
	zendesk.Type = typStr

	return ConnectionTypesInput{
		ConnectionZendeskInput: &zendesk,
		Type:                   typ,
	}
}

func CreateConnectionTypesInputZoomPhone(zoomPhone ConnectionZoomPhoneInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeZoomPhone

	typStr := ConnectionZoomPhoneType(typ)
	zoomPhone.Type = typStr

	return ConnectionTypesInput{
		ConnectionZoomPhoneInput: &zoomPhone,
		Type:                     typ,
	}
}

func CreateConnectionTypesInputZuora(zuora ConnectionZuoraInput) ConnectionTypesInput {
	typ := ConnectionTypesInputTypeZuora

	typStr := ConnectionZuoraType(typ)
	zuora.Type = typStr

	return ConnectionTypesInput{
		ConnectionZuoraInput: &zuora,
		Type:                 typ,
	}
}

func (u *ConnectionTypesInput) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "ACTIVE_CAMPAIGN":
		connectionActiveCampaignInput := new(ConnectionActiveCampaignInput)
		if err := utils.UnmarshalJSON(data, &connectionActiveCampaignInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionActiveCampaignInput = connectionActiveCampaignInput
		u.Type = ConnectionTypesInputTypeActiveCampaign
		return nil
	case "BIGQUERY":
		connectionBigQueryInput := new(ConnectionBigQueryInput)
		if err := utils.UnmarshalJSON(data, &connectionBigQueryInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionBigQueryInput = connectionBigQueryInput
		u.Type = ConnectionTypesInputTypeBigquery
		return nil
	case "BING_ADS":
		connectionBingInput := new(ConnectionBingInput)
		if err := utils.UnmarshalJSON(data, &connectionBingInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionBingInput = connectionBingInput
		u.Type = ConnectionTypesInputTypeBingAds
		return nil
	case "BLACKLINE":
		connectionBlacklineInput := new(ConnectionBlacklineInput)
		if err := utils.UnmarshalJSON(data, &connectionBlacklineInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionBlacklineInput = connectionBlacklineInput
		u.Type = ConnectionTypesInputTypeBlackline
		return nil
	case "CRITEO":
		connectionCriteoInput := new(ConnectionCriteoInput)
		if err := utils.UnmarshalJSON(data, &connectionCriteoInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionCriteoInput = connectionCriteoInput
		u.Type = ConnectionTypesInputTypeCriteo
		return nil
	case "DB2":
		connectionDb2Input := new(ConnectionDb2Input)
		if err := utils.UnmarshalJSON(data, &connectionDb2Input, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionDb2Input = connectionDb2Input
		u.Type = ConnectionTypesInputTypeDb2
		return nil
	case "DB2_SHARDED":
		connectionDb2ShardedInput := new(ConnectionDb2ShardedInput)
		if err := utils.UnmarshalJSON(data, &connectionDb2ShardedInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionDb2ShardedInput = connectionDb2ShardedInput
		u.Type = ConnectionTypesInputTypeDb2Sharded
		return nil
	case "DELTA_LAKE":
		connectionDeltaLakeInput := new(ConnectionDeltaLakeInput)
		if err := utils.UnmarshalJSON(data, &connectionDeltaLakeInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionDeltaLakeInput = connectionDeltaLakeInput
		u.Type = ConnectionTypesInputTypeDeltaLake
		return nil
	case "ELASTICSEARCH":
		connectionElasticSearchInput := new(ConnectionElasticSearchInput)
		if err := utils.UnmarshalJSON(data, &connectionElasticSearchInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionElasticSearchInput = connectionElasticSearchInput
		u.Type = ConnectionTypesInputTypeElasticsearch
		return nil
	case "ELLUMINATE":
		connectionElluminateInput := new(ConnectionElluminateInput)
		if err := utils.UnmarshalJSON(data, &connectionElluminateInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionElluminateInput = connectionElluminateInput
		u.Type = ConnectionTypesInputTypeElluminate
		return nil
	case "ELOQUA":
		connectionEloquaInput := new(ConnectionEloquaInput)
		if err := utils.UnmarshalJSON(data, &connectionEloquaInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionEloquaInput = connectionEloquaInput
		u.Type = ConnectionTypesInputTypeEloqua
		return nil
	case "FACEBOOK_ADS":
		connectionFbInput := new(ConnectionFbInput)
		if err := utils.UnmarshalJSON(data, &connectionFbInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionFbInput = connectionFbInput
		u.Type = ConnectionTypesInputTypeFacebookAds
		return nil
	case "FIFTEEN_FIVE":
		connectionFifteenFiveInput := new(ConnectionFifteenFiveInput)
		if err := utils.UnmarshalJSON(data, &connectionFifteenFiveInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionFifteenFiveInput = connectionFifteenFiveInput
		u.Type = ConnectionTypesInputTypeFifteenFive
		return nil
	case "FRESHWORKS":
		connectionFreshworksInput := new(ConnectionFreshworksInput)
		if err := utils.UnmarshalJSON(data, &connectionFreshworksInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionFreshworksInput = connectionFreshworksInput
		u.Type = ConnectionTypesInputTypeFreshworks
		return nil
	case "FTP":
		connectionFtpInput := new(ConnectionFtpInput)
		if err := utils.UnmarshalJSON(data, &connectionFtpInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionFtpInput = connectionFtpInput
		u.Type = ConnectionTypesInputTypeFtp
		return nil
	case "GONG":
		connectionGongInput := new(ConnectionGongInput)
		if err := utils.UnmarshalJSON(data, &connectionGongInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionGongInput = connectionGongInput
		u.Type = ConnectionTypesInputTypeGong
		return nil
	case "GOOGLE_ADS":
		connectionGoogleAdsInput := new(ConnectionGoogleAdsInput)
		if err := utils.UnmarshalJSON(data, &connectionGoogleAdsInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionGoogleAdsInput = connectionGoogleAdsInput
		u.Type = ConnectionTypesInputTypeGoogleAds
		return nil
	case "GOOGLE_ANALYTICS":
		connectionGaInput := new(ConnectionGaInput)
		if err := utils.UnmarshalJSON(data, &connectionGaInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionGaInput = connectionGaInput
		u.Type = ConnectionTypesInputTypeGoogleAnalytics
		return nil
	case "GOOGLE_ANALYTICS_GA4":
		connectionGoogleAnalyticsGa4Input := new(ConnectionGoogleAnalyticsGa4Input)
		if err := utils.UnmarshalJSON(data, &connectionGoogleAnalyticsGa4Input, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionGoogleAnalyticsGa4Input = connectionGoogleAnalyticsGa4Input
		u.Type = ConnectionTypesInputTypeGoogleAnalyticsGa4
		return nil
	case "GOOGLE_CLOUD_STORAGE":
		connectionGoogleCloudStorageInput := new(ConnectionGoogleCloudStorageInput)
		if err := utils.UnmarshalJSON(data, &connectionGoogleCloudStorageInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionGoogleCloudStorageInput = connectionGoogleCloudStorageInput
		u.Type = ConnectionTypesInputTypeGoogleCloudStorage
		return nil
	case "GOOGLE_SHEETS":
		connectionGoogleSheetsInput := new(ConnectionGoogleSheetsInput)
		if err := utils.UnmarshalJSON(data, &connectionGoogleSheetsInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionGoogleSheetsInput = connectionGoogleSheetsInput
		u.Type = ConnectionTypesInputTypeGoogleSheets
		return nil
	case "HUBSPOT":
		connectionHubspotInput := new(ConnectionHubspotInput)
		if err := utils.UnmarshalJSON(data, &connectionHubspotInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionHubspotInput = connectionHubspotInput
		u.Type = ConnectionTypesInputTypeHubspot
		return nil
	case "IMPACT_RADIUS":
		connectionImpactRadiusInput := new(ConnectionImpactRadiusInput)
		if err := utils.UnmarshalJSON(data, &connectionImpactRadiusInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionImpactRadiusInput = connectionImpactRadiusInput
		u.Type = ConnectionTypesInputTypeImpactRadius
		return nil
	case "INTERCOM":
		connectionIntercomInput := new(ConnectionIntercomInput)
		if err := utils.UnmarshalJSON(data, &connectionIntercomInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionIntercomInput = connectionIntercomInput
		u.Type = ConnectionTypesInputTypeIntercom
		return nil
	case "JIRA_ALIGN":
		connectionJiraAlignInput := new(ConnectionJiraAlignInput)
		if err := utils.UnmarshalJSON(data, &connectionJiraAlignInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionJiraAlignInput = connectionJiraAlignInput
		u.Type = ConnectionTypesInputTypeJiraAlign
		return nil
	case "KAFKA":
		connectionKafkaInput := new(ConnectionKafkaInput)
		if err := utils.UnmarshalJSON(data, &connectionKafkaInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionKafkaInput = connectionKafkaInput
		u.Type = ConnectionTypesInputTypeKafka
		return nil
	case "KUSTOMER":
		connectionKustomerInput := new(ConnectionKustomerInput)
		if err := utils.UnmarshalJSON(data, &connectionKustomerInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionKustomerInput = connectionKustomerInput
		u.Type = ConnectionTypesInputTypeKustomer
		return nil
	case "LDAP":
		connectionLdapInput := new(ConnectionLdapInput)
		if err := utils.UnmarshalJSON(data, &connectionLdapInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionLdapInput = connectionLdapInput
		u.Type = ConnectionTypesInputTypeLdap
		return nil
	case "LDAP_VIRTUAL_LIST_VIEW":
		connectionLdapVirtualListViewInput := new(ConnectionLdapVirtualListViewInput)
		if err := utils.UnmarshalJSON(data, &connectionLdapVirtualListViewInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionLdapVirtualListViewInput = connectionLdapVirtualListViewInput
		u.Type = ConnectionTypesInputTypeLdapVirtualListView
		return nil
	case "LINKED_IN_ADS":
		connectionLinkedInAdsInput := new(ConnectionLinkedInAdsInput)
		if err := utils.UnmarshalJSON(data, &connectionLinkedInAdsInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionLinkedInAdsInput = connectionLinkedInAdsInput
		u.Type = ConnectionTypesInputTypeLinkedInAds
		return nil
	case "MARKETO":
		connectionMarketoInput := new(ConnectionMarketoInput)
		if err := utils.UnmarshalJSON(data, &connectionMarketoInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionMarketoInput = connectionMarketoInput
		u.Type = ConnectionTypesInputTypeMarketo
		return nil
	case "MIXPANEL":
		connectionMixpanelInput := new(ConnectionMixpanelInput)
		if err := utils.UnmarshalJSON(data, &connectionMixpanelInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionMixpanelInput = connectionMixpanelInput
		u.Type = ConnectionTypesInputTypeMixpanel
		return nil
	case "MONGODB":
		connectionMongoInput := new(ConnectionMongoInput)
		if err := utils.UnmarshalJSON(data, &connectionMongoInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionMongoInput = connectionMongoInput
		u.Type = ConnectionTypesInputTypeMongodb
		return nil
	case "MYSQL":
		connectionMysqlInput := new(ConnectionMysqlInput)
		if err := utils.UnmarshalJSON(data, &connectionMysqlInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionMysqlInput = connectionMysqlInput
		u.Type = ConnectionTypesInputTypeMysql
		return nil
	case "MYSQL_SHARDED":
		connectionMysqlShardedInput := new(ConnectionMysqlShardedInput)
		if err := utils.UnmarshalJSON(data, &connectionMysqlShardedInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionMysqlShardedInput = connectionMysqlShardedInput
		u.Type = ConnectionTypesInputTypeMysqlSharded
		return nil
	case "NETSUITE":
		connectionNetsuiteInput := new(ConnectionNetsuiteInput)
		if err := utils.UnmarshalJSON(data, &connectionNetsuiteInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionNetsuiteInput = connectionNetsuiteInput
		u.Type = ConnectionTypesInputTypeNetsuite
		return nil
	case "NETSUITE_V2":
		connectionNetsuiteV2Input := new(ConnectionNetsuiteV2Input)
		if err := utils.UnmarshalJSON(data, &connectionNetsuiteV2Input, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionNetsuiteV2Input = connectionNetsuiteV2Input
		u.Type = ConnectionTypesInputTypeNetsuiteV2
		return nil
	case "ORACLE":
		connectionOracleInput := new(ConnectionOracleInput)
		if err := utils.UnmarshalJSON(data, &connectionOracleInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionOracleInput = connectionOracleInput
		u.Type = ConnectionTypesInputTypeOracle
		return nil
	case "ORACLE_SHARDED":
		connectionOracleShardedInput := new(ConnectionOracleShardedInput)
		if err := utils.UnmarshalJSON(data, &connectionOracleShardedInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionOracleShardedInput = connectionOracleShardedInput
		u.Type = ConnectionTypesInputTypeOracleSharded
		return nil
	case "OUTLOOK":
		connectionOutlookInput := new(ConnectionOutlookInput)
		if err := utils.UnmarshalJSON(data, &connectionOutlookInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionOutlookInput = connectionOutlookInput
		u.Type = ConnectionTypesInputTypeOutlook
		return nil
	case "OUTREACH":
		connectionOutreachInput := new(ConnectionOutreachInput)
		if err := utils.UnmarshalJSON(data, &connectionOutreachInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionOutreachInput = connectionOutreachInput
		u.Type = ConnectionTypesInputTypeOutreach
		return nil
	case "PINTEREST_ADS":
		connectionPinterestAdsInput := new(ConnectionPinterestAdsInput)
		if err := utils.UnmarshalJSON(data, &connectionPinterestAdsInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionPinterestAdsInput = connectionPinterestAdsInput
		u.Type = ConnectionTypesInputTypePinterestAds
		return nil
	case "POSTGRES":
		connectionPostgresInput := new(ConnectionPostgresInput)
		if err := utils.UnmarshalJSON(data, &connectionPostgresInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionPostgresInput = connectionPostgresInput
		u.Type = ConnectionTypesInputTypePostgres
		return nil
	case "POSTGRES_SHARDED":
		connectionPostgresShardedInput := new(ConnectionPostgresShardedInput)
		if err := utils.UnmarshalJSON(data, &connectionPostgresShardedInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionPostgresShardedInput = connectionPostgresShardedInput
		u.Type = ConnectionTypesInputTypePostgresSharded
		return nil
	case "QUORA_ADS":
		connectionQuoraInput := new(ConnectionQuoraInput)
		if err := utils.UnmarshalJSON(data, &connectionQuoraInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionQuoraInput = connectionQuoraInput
		u.Type = ConnectionTypesInputTypeQuoraAds
		return nil
	case "RAVE_MEDIDATA":
		connectionRaveMedidataInput := new(ConnectionRaveMedidataInput)
		if err := utils.UnmarshalJSON(data, &connectionRaveMedidataInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionRaveMedidataInput = connectionRaveMedidataInput
		u.Type = ConnectionTypesInputTypeRaveMedidata
		return nil
	case "RECURLY":
		connectionRecurlyInput := new(ConnectionRecurlyInput)
		if err := utils.UnmarshalJSON(data, &connectionRecurlyInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionRecurlyInput = connectionRecurlyInput
		u.Type = ConnectionTypesInputTypeRecurly
		return nil
	case "REDSHIFT":
		connectionRedshiftInput := new(ConnectionRedshiftInput)
		if err := utils.UnmarshalJSON(data, &connectionRedshiftInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionRedshiftInput = connectionRedshiftInput
		u.Type = ConnectionTypesInputTypeRedshift
		return nil
	case "REDSHIFT_SHARDED":
		connectionRedshiftShardedInput := new(ConnectionRedshiftShardedInput)
		if err := utils.UnmarshalJSON(data, &connectionRedshiftShardedInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionRedshiftShardedInput = connectionRedshiftShardedInput
		u.Type = ConnectionTypesInputTypeRedshiftSharded
		return nil
	case "S3_DATA_LAKE":
		connectionS3DataLakeInput := new(ConnectionS3DataLakeInput)
		if err := utils.UnmarshalJSON(data, &connectionS3DataLakeInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionS3DataLakeInput = connectionS3DataLakeInput
		u.Type = ConnectionTypesInputTypeS3DataLake
		return nil
	case "S3_INPUT":
		connectionS3InputInput := new(ConnectionS3InputInput)
		if err := utils.UnmarshalJSON(data, &connectionS3InputInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionS3InputInput = connectionS3InputInput
		u.Type = ConnectionTypesInputTypeS3Input
		return nil
	case "SALESFORCE":
		connectionSalesforceInput := new(ConnectionSalesforceInput)
		if err := utils.UnmarshalJSON(data, &connectionSalesforceInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSalesforceInput = connectionSalesforceInput
		u.Type = ConnectionTypesInputTypeSalesforce
		return nil
	case "SALESFORCE_MARKETING_CLOUD":
		connectionSalesforceMarketingCloudInput := new(ConnectionSalesforceMarketingCloudInput)
		if err := utils.UnmarshalJSON(data, &connectionSalesforceMarketingCloudInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSalesforceMarketingCloudInput = connectionSalesforceMarketingCloudInput
		u.Type = ConnectionTypesInputTypeSalesforceMarketingCloud
		return nil
	case "SAP_HANA":
		connectionSapHanaInput := new(ConnectionSapHanaInput)
		if err := utils.UnmarshalJSON(data, &connectionSapHanaInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSapHanaInput = connectionSapHanaInput
		u.Type = ConnectionTypesInputTypeSapHana
		return nil
	case "SAP_HANA_SHARDED":
		connectionSapHanaShardedInput := new(ConnectionSapHanaShardedInput)
		if err := utils.UnmarshalJSON(data, &connectionSapHanaShardedInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSapHanaShardedInput = connectionSapHanaShardedInput
		u.Type = ConnectionTypesInputTypeSapHanaSharded
		return nil
	case "SEISMIC":
		connectionSeismicInput := new(ConnectionSeismicInput)
		if err := utils.UnmarshalJSON(data, &connectionSeismicInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSeismicInput = connectionSeismicInput
		u.Type = ConnectionTypesInputTypeSeismic
		return nil
	case "SFTP":
		connectionSftpInput := new(ConnectionSftpInput)
		if err := utils.UnmarshalJSON(data, &connectionSftpInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSftpInput = connectionSftpInput
		u.Type = ConnectionTypesInputTypeSftp
		return nil
	case "SHOPIFY":
		connectionShopifyInput := new(ConnectionShopifyInput)
		if err := utils.UnmarshalJSON(data, &connectionShopifyInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionShopifyInput = connectionShopifyInput
		u.Type = ConnectionTypesInputTypeShopify
		return nil
	case "SKYWARD":
		connectionSkywardInput := new(ConnectionSkywardInput)
		if err := utils.UnmarshalJSON(data, &connectionSkywardInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSkywardInput = connectionSkywardInput
		u.Type = ConnectionTypesInputTypeSkyward
		return nil
	case "SNAPCHAT_ADS":
		connectionSnapchatAdsInput := new(ConnectionSnapchatAdsInput)
		if err := utils.UnmarshalJSON(data, &connectionSnapchatAdsInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSnapchatAdsInput = connectionSnapchatAdsInput
		u.Type = ConnectionTypesInputTypeSnapchatAds
		return nil
	case "SNOWFLAKE":
		connectionSnowflakeInput := new(ConnectionSnowflakeInput)
		if err := utils.UnmarshalJSON(data, &connectionSnowflakeInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSnowflakeInput = connectionSnowflakeInput
		u.Type = ConnectionTypesInputTypeSnowflake
		return nil
	case "SNOWFLAKE_SHARDED":
		connectionSnowflakeShardedInput := new(ConnectionSnowflakeShardedInput)
		if err := utils.UnmarshalJSON(data, &connectionSnowflakeShardedInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSnowflakeShardedInput = connectionSnowflakeShardedInput
		u.Type = ConnectionTypesInputTypeSnowflakeSharded
		return nil
	case "SQL_SERVER":
		connectionSQLServerInput := new(ConnectionSQLServerInput)
		if err := utils.UnmarshalJSON(data, &connectionSQLServerInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSQLServerInput = connectionSQLServerInput
		u.Type = ConnectionTypesInputTypeSQLServer
		return nil
	case "SQL_SERVER_SHARDED":
		connectionSQLServerShardedInput := new(ConnectionSQLServerShardedInput)
		if err := utils.UnmarshalJSON(data, &connectionSQLServerShardedInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSQLServerShardedInput = connectionSQLServerShardedInput
		u.Type = ConnectionTypesInputTypeSQLServerSharded
		return nil
	case "SQUARE":
		connectionSquareInput := new(ConnectionSquareInput)
		if err := utils.UnmarshalJSON(data, &connectionSquareInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSquareInput = connectionSquareInput
		u.Type = ConnectionTypesInputTypeSquare
		return nil
	case "STRIPE":
		connectionStripeInput := new(ConnectionStripeInput)
		if err := utils.UnmarshalJSON(data, &connectionStripeInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionStripeInput = connectionStripeInput
		u.Type = ConnectionTypesInputTypeStripe
		return nil
	case "SUMTOTAL":
		connectionSumTotalInput := new(ConnectionSumTotalInput)
		if err := utils.UnmarshalJSON(data, &connectionSumTotalInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSumTotalInput = connectionSumTotalInput
		u.Type = ConnectionTypesInputTypeSumtotal
		return nil
	case "THE_TRADE_DESK":
		connectionTheTradeDeskInput := new(ConnectionTheTradeDeskInput)
		if err := utils.UnmarshalJSON(data, &connectionTheTradeDeskInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionTheTradeDeskInput = connectionTheTradeDeskInput
		u.Type = ConnectionTypesInputTypeTheTradeDesk
		return nil
	case "TIK_TOK_ADS":
		connectionTikTokAdsInput := new(ConnectionTikTokAdsInput)
		if err := utils.UnmarshalJSON(data, &connectionTikTokAdsInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionTikTokAdsInput = connectionTikTokAdsInput
		u.Type = ConnectionTypesInputTypeTikTokAds
		return nil
	case "TWILIO":
		connectionTwilioInput := new(ConnectionTwilioInput)
		if err := utils.UnmarshalJSON(data, &connectionTwilioInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionTwilioInput = connectionTwilioInput
		u.Type = ConnectionTypesInputTypeTwilio
		return nil
	case "TWITTER_ADS":
		connectionTwitterInput := new(ConnectionTwitterInput)
		if err := utils.UnmarshalJSON(data, &connectionTwitterInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionTwitterInput = connectionTwitterInput
		u.Type = ConnectionTypesInputTypeTwitterAds
		return nil
	case "USERVOICE":
		connectionUserVoiceInput := new(ConnectionUserVoiceInput)
		if err := utils.UnmarshalJSON(data, &connectionUserVoiceInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionUserVoiceInput = connectionUserVoiceInput
		u.Type = ConnectionTypesInputTypeUservoice
		return nil
	case "USER_DEFINED_API":
		connectionUserDefinedAPIInput := new(ConnectionUserDefinedAPIInput)
		if err := utils.UnmarshalJSON(data, &connectionUserDefinedAPIInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionUserDefinedAPIInput = connectionUserDefinedAPIInput
		u.Type = ConnectionTypesInputTypeUserDefinedAPI
		return nil
	case "VEEVA":
		connectionVeevaInput := new(ConnectionVeevaInput)
		if err := utils.UnmarshalJSON(data, &connectionVeevaInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionVeevaInput = connectionVeevaInput
		u.Type = ConnectionTypesInputTypeVeeva
		return nil
	case "VERIZON_MEDIA_DSP":
		connectionVerizonMediaInput := new(ConnectionVerizonMediaInput)
		if err := utils.UnmarshalJSON(data, &connectionVerizonMediaInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionVerizonMediaInput = connectionVerizonMediaInput
		u.Type = ConnectionTypesInputTypeVerizonMediaDsp
		return nil
	case "WORKDAY_REPORT":
		connectionWorkdayReportInput := new(ConnectionWorkdayReportInput)
		if err := utils.UnmarshalJSON(data, &connectionWorkdayReportInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionWorkdayReportInput = connectionWorkdayReportInput
		u.Type = ConnectionTypesInputTypeWorkdayReport
		return nil
	case "WORKFRONT":
		connectionWorkfrontInput := new(ConnectionWorkfrontInput)
		if err := utils.UnmarshalJSON(data, &connectionWorkfrontInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionWorkfrontInput = connectionWorkfrontInput
		u.Type = ConnectionTypesInputTypeWorkfront
		return nil
	case "ZENDESK":
		connectionZendeskInput := new(ConnectionZendeskInput)
		if err := utils.UnmarshalJSON(data, &connectionZendeskInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionZendeskInput = connectionZendeskInput
		u.Type = ConnectionTypesInputTypeZendesk
		return nil
	case "ZOOM_PHONE":
		connectionZoomPhoneInput := new(ConnectionZoomPhoneInput)
		if err := utils.UnmarshalJSON(data, &connectionZoomPhoneInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionZoomPhoneInput = connectionZoomPhoneInput
		u.Type = ConnectionTypesInputTypeZoomPhone
		return nil
	case "ZUORA":
		connectionZuoraInput := new(ConnectionZuoraInput)
		if err := utils.UnmarshalJSON(data, &connectionZuoraInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionZuoraInput = connectionZuoraInput
		u.Type = ConnectionTypesInputTypeZuora
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConnectionTypesInput) MarshalJSON() ([]byte, error) {
	if u.ConnectionActiveCampaignInput != nil {
		return utils.MarshalJSON(u.ConnectionActiveCampaignInput, "", true)
	}

	if u.ConnectionBigQueryInput != nil {
		return utils.MarshalJSON(u.ConnectionBigQueryInput, "", true)
	}

	if u.ConnectionBingInput != nil {
		return utils.MarshalJSON(u.ConnectionBingInput, "", true)
	}

	if u.ConnectionBlacklineInput != nil {
		return utils.MarshalJSON(u.ConnectionBlacklineInput, "", true)
	}

	if u.ConnectionCriteoInput != nil {
		return utils.MarshalJSON(u.ConnectionCriteoInput, "", true)
	}

	if u.ConnectionDb2Input != nil {
		return utils.MarshalJSON(u.ConnectionDb2Input, "", true)
	}

	if u.ConnectionDb2ShardedInput != nil {
		return utils.MarshalJSON(u.ConnectionDb2ShardedInput, "", true)
	}

	if u.ConnectionDeltaLakeInput != nil {
		return utils.MarshalJSON(u.ConnectionDeltaLakeInput, "", true)
	}

	if u.ConnectionElasticSearchInput != nil {
		return utils.MarshalJSON(u.ConnectionElasticSearchInput, "", true)
	}

	if u.ConnectionElluminateInput != nil {
		return utils.MarshalJSON(u.ConnectionElluminateInput, "", true)
	}

	if u.ConnectionEloquaInput != nil {
		return utils.MarshalJSON(u.ConnectionEloquaInput, "", true)
	}

	if u.ConnectionFbInput != nil {
		return utils.MarshalJSON(u.ConnectionFbInput, "", true)
	}

	if u.ConnectionFifteenFiveInput != nil {
		return utils.MarshalJSON(u.ConnectionFifteenFiveInput, "", true)
	}

	if u.ConnectionFreshworksInput != nil {
		return utils.MarshalJSON(u.ConnectionFreshworksInput, "", true)
	}

	if u.ConnectionFtpInput != nil {
		return utils.MarshalJSON(u.ConnectionFtpInput, "", true)
	}

	if u.ConnectionGaInput != nil {
		return utils.MarshalJSON(u.ConnectionGaInput, "", true)
	}

	if u.ConnectionGongInput != nil {
		return utils.MarshalJSON(u.ConnectionGongInput, "", true)
	}

	if u.ConnectionGoogleAdsInput != nil {
		return utils.MarshalJSON(u.ConnectionGoogleAdsInput, "", true)
	}

	if u.ConnectionGoogleAnalyticsGa4Input != nil {
		return utils.MarshalJSON(u.ConnectionGoogleAnalyticsGa4Input, "", true)
	}

	if u.ConnectionGoogleCloudStorageInput != nil {
		return utils.MarshalJSON(u.ConnectionGoogleCloudStorageInput, "", true)
	}

	if u.ConnectionGoogleSheetsInput != nil {
		return utils.MarshalJSON(u.ConnectionGoogleSheetsInput, "", true)
	}

	if u.ConnectionHubspotInput != nil {
		return utils.MarshalJSON(u.ConnectionHubspotInput, "", true)
	}

	if u.ConnectionImpactRadiusInput != nil {
		return utils.MarshalJSON(u.ConnectionImpactRadiusInput, "", true)
	}

	if u.ConnectionIntercomInput != nil {
		return utils.MarshalJSON(u.ConnectionIntercomInput, "", true)
	}

	if u.ConnectionJiraAlignInput != nil {
		return utils.MarshalJSON(u.ConnectionJiraAlignInput, "", true)
	}

	if u.ConnectionKafkaInput != nil {
		return utils.MarshalJSON(u.ConnectionKafkaInput, "", true)
	}

	if u.ConnectionKustomerInput != nil {
		return utils.MarshalJSON(u.ConnectionKustomerInput, "", true)
	}

	if u.ConnectionLdapInput != nil {
		return utils.MarshalJSON(u.ConnectionLdapInput, "", true)
	}

	if u.ConnectionLdapVirtualListViewInput != nil {
		return utils.MarshalJSON(u.ConnectionLdapVirtualListViewInput, "", true)
	}

	if u.ConnectionLinkedInAdsInput != nil {
		return utils.MarshalJSON(u.ConnectionLinkedInAdsInput, "", true)
	}

	if u.ConnectionMarketoInput != nil {
		return utils.MarshalJSON(u.ConnectionMarketoInput, "", true)
	}

	if u.ConnectionMixpanelInput != nil {
		return utils.MarshalJSON(u.ConnectionMixpanelInput, "", true)
	}

	if u.ConnectionMongoInput != nil {
		return utils.MarshalJSON(u.ConnectionMongoInput, "", true)
	}

	if u.ConnectionMysqlInput != nil {
		return utils.MarshalJSON(u.ConnectionMysqlInput, "", true)
	}

	if u.ConnectionMysqlShardedInput != nil {
		return utils.MarshalJSON(u.ConnectionMysqlShardedInput, "", true)
	}

	if u.ConnectionNetsuiteInput != nil {
		return utils.MarshalJSON(u.ConnectionNetsuiteInput, "", true)
	}

	if u.ConnectionNetsuiteV2Input != nil {
		return utils.MarshalJSON(u.ConnectionNetsuiteV2Input, "", true)
	}

	if u.ConnectionOracleInput != nil {
		return utils.MarshalJSON(u.ConnectionOracleInput, "", true)
	}

	if u.ConnectionOracleShardedInput != nil {
		return utils.MarshalJSON(u.ConnectionOracleShardedInput, "", true)
	}

	if u.ConnectionOutlookInput != nil {
		return utils.MarshalJSON(u.ConnectionOutlookInput, "", true)
	}

	if u.ConnectionOutreachInput != nil {
		return utils.MarshalJSON(u.ConnectionOutreachInput, "", true)
	}

	if u.ConnectionPinterestAdsInput != nil {
		return utils.MarshalJSON(u.ConnectionPinterestAdsInput, "", true)
	}

	if u.ConnectionPostgresInput != nil {
		return utils.MarshalJSON(u.ConnectionPostgresInput, "", true)
	}

	if u.ConnectionPostgresShardedInput != nil {
		return utils.MarshalJSON(u.ConnectionPostgresShardedInput, "", true)
	}

	if u.ConnectionQuoraInput != nil {
		return utils.MarshalJSON(u.ConnectionQuoraInput, "", true)
	}

	if u.ConnectionRaveMedidataInput != nil {
		return utils.MarshalJSON(u.ConnectionRaveMedidataInput, "", true)
	}

	if u.ConnectionRecurlyInput != nil {
		return utils.MarshalJSON(u.ConnectionRecurlyInput, "", true)
	}

	if u.ConnectionRedshiftInput != nil {
		return utils.MarshalJSON(u.ConnectionRedshiftInput, "", true)
	}

	if u.ConnectionRedshiftShardedInput != nil {
		return utils.MarshalJSON(u.ConnectionRedshiftShardedInput, "", true)
	}

	if u.ConnectionS3DataLakeInput != nil {
		return utils.MarshalJSON(u.ConnectionS3DataLakeInput, "", true)
	}

	if u.ConnectionS3InputInput != nil {
		return utils.MarshalJSON(u.ConnectionS3InputInput, "", true)
	}

	if u.ConnectionSalesforceInput != nil {
		return utils.MarshalJSON(u.ConnectionSalesforceInput, "", true)
	}

	if u.ConnectionSalesforceMarketingCloudInput != nil {
		return utils.MarshalJSON(u.ConnectionSalesforceMarketingCloudInput, "", true)
	}

	if u.ConnectionSapHanaInput != nil {
		return utils.MarshalJSON(u.ConnectionSapHanaInput, "", true)
	}

	if u.ConnectionSapHanaShardedInput != nil {
		return utils.MarshalJSON(u.ConnectionSapHanaShardedInput, "", true)
	}

	if u.ConnectionSeismicInput != nil {
		return utils.MarshalJSON(u.ConnectionSeismicInput, "", true)
	}

	if u.ConnectionSftpInput != nil {
		return utils.MarshalJSON(u.ConnectionSftpInput, "", true)
	}

	if u.ConnectionShopifyInput != nil {
		return utils.MarshalJSON(u.ConnectionShopifyInput, "", true)
	}

	if u.ConnectionSkywardInput != nil {
		return utils.MarshalJSON(u.ConnectionSkywardInput, "", true)
	}

	if u.ConnectionSnapchatAdsInput != nil {
		return utils.MarshalJSON(u.ConnectionSnapchatAdsInput, "", true)
	}

	if u.ConnectionSnowflakeInput != nil {
		return utils.MarshalJSON(u.ConnectionSnowflakeInput, "", true)
	}

	if u.ConnectionSnowflakeShardedInput != nil {
		return utils.MarshalJSON(u.ConnectionSnowflakeShardedInput, "", true)
	}

	if u.ConnectionSQLServerInput != nil {
		return utils.MarshalJSON(u.ConnectionSQLServerInput, "", true)
	}

	if u.ConnectionSQLServerShardedInput != nil {
		return utils.MarshalJSON(u.ConnectionSQLServerShardedInput, "", true)
	}

	if u.ConnectionSquareInput != nil {
		return utils.MarshalJSON(u.ConnectionSquareInput, "", true)
	}

	if u.ConnectionStripeInput != nil {
		return utils.MarshalJSON(u.ConnectionStripeInput, "", true)
	}

	if u.ConnectionSumTotalInput != nil {
		return utils.MarshalJSON(u.ConnectionSumTotalInput, "", true)
	}

	if u.ConnectionTheTradeDeskInput != nil {
		return utils.MarshalJSON(u.ConnectionTheTradeDeskInput, "", true)
	}

	if u.ConnectionTikTokAdsInput != nil {
		return utils.MarshalJSON(u.ConnectionTikTokAdsInput, "", true)
	}

	if u.ConnectionTwilioInput != nil {
		return utils.MarshalJSON(u.ConnectionTwilioInput, "", true)
	}

	if u.ConnectionTwitterInput != nil {
		return utils.MarshalJSON(u.ConnectionTwitterInput, "", true)
	}

	if u.ConnectionUserDefinedAPIInput != nil {
		return utils.MarshalJSON(u.ConnectionUserDefinedAPIInput, "", true)
	}

	if u.ConnectionUserVoiceInput != nil {
		return utils.MarshalJSON(u.ConnectionUserVoiceInput, "", true)
	}

	if u.ConnectionVeevaInput != nil {
		return utils.MarshalJSON(u.ConnectionVeevaInput, "", true)
	}

	if u.ConnectionVerizonMediaInput != nil {
		return utils.MarshalJSON(u.ConnectionVerizonMediaInput, "", true)
	}

	if u.ConnectionWorkdayReportInput != nil {
		return utils.MarshalJSON(u.ConnectionWorkdayReportInput, "", true)
	}

	if u.ConnectionWorkfrontInput != nil {
		return utils.MarshalJSON(u.ConnectionWorkfrontInput, "", true)
	}

	if u.ConnectionZendeskInput != nil {
		return utils.MarshalJSON(u.ConnectionZendeskInput, "", true)
	}

	if u.ConnectionZoomPhoneInput != nil {
		return utils.MarshalJSON(u.ConnectionZoomPhoneInput, "", true)
	}

	if u.ConnectionZuoraInput != nil {
		return utils.MarshalJSON(u.ConnectionZuoraInput, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
