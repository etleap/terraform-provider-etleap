// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionVerizonMediaType string

const (
	ConnectionVerizonMediaTypeVerizonMediaDsp ConnectionVerizonMediaType = "VERIZON_MEDIA_DSP"
)

func (e ConnectionVerizonMediaType) ToPointer() *ConnectionVerizonMediaType {
	return &e
}

func (e *ConnectionVerizonMediaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VERIZON_MEDIA_DSP":
		*e = ConnectionVerizonMediaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionVerizonMediaType: %v", v)
	}
}

// ConnectionVerizonMediaStatus - The current status of the connection.
type ConnectionVerizonMediaStatus string

const (
	ConnectionVerizonMediaStatusUnknown     ConnectionVerizonMediaStatus = "UNKNOWN"
	ConnectionVerizonMediaStatusUp          ConnectionVerizonMediaStatus = "UP"
	ConnectionVerizonMediaStatusDown        ConnectionVerizonMediaStatus = "DOWN"
	ConnectionVerizonMediaStatusResize      ConnectionVerizonMediaStatus = "RESIZE"
	ConnectionVerizonMediaStatusMaintenance ConnectionVerizonMediaStatus = "MAINTENANCE"
	ConnectionVerizonMediaStatusQuota       ConnectionVerizonMediaStatus = "QUOTA"
	ConnectionVerizonMediaStatusCreating    ConnectionVerizonMediaStatus = "CREATING"
)

func (e ConnectionVerizonMediaStatus) ToPointer() *ConnectionVerizonMediaStatus {
	return &e
}

func (e *ConnectionVerizonMediaStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionVerizonMediaStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionVerizonMediaStatus: %v", v)
	}
}

type ConnectionVerizonMedia struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                     `json:"name"`
	Type ConnectionVerizonMediaType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionVerizonMediaStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	Username   string    `json:"username"`
}

func (c ConnectionVerizonMedia) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionVerizonMedia) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionVerizonMedia) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionVerizonMedia) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionVerizonMedia) GetType() ConnectionVerizonMediaType {
	if o == nil {
		return ConnectionVerizonMediaType("")
	}
	return o.Type
}

func (o *ConnectionVerizonMedia) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionVerizonMedia) GetStatus() ConnectionVerizonMediaStatus {
	if o == nil {
		return ConnectionVerizonMediaStatus("")
	}
	return o.Status
}

func (o *ConnectionVerizonMedia) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionVerizonMedia) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type ConnectionVerizonMediaInput struct {
	// The unique name of this connection.
	Name string                     `json:"name"`
	Type ConnectionVerizonMediaType `json:"type"`
	// Code retrieved from `/connections/oauth2-initiation`. **Note:** it is short-lived, therefore the connection creation should be done as soon as code is returned.
	Code string `json:"code"`
}

func (o *ConnectionVerizonMediaInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionVerizonMediaInput) GetType() ConnectionVerizonMediaType {
	if o == nil {
		return ConnectionVerizonMediaType("")
	}
	return o.Type
}

func (o *ConnectionVerizonMediaInput) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}
