// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionSeismicType string

const (
	ConnectionSeismicTypeSeismic ConnectionSeismicType = "SEISMIC"
)

func (e ConnectionSeismicType) ToPointer() *ConnectionSeismicType {
	return &e
}

func (e *ConnectionSeismicType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SEISMIC":
		*e = ConnectionSeismicType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSeismicType: %v", v)
	}
}

// ConnectionSeismicStatus - The current status of the connection.
type ConnectionSeismicStatus string

const (
	ConnectionSeismicStatusUnknown     ConnectionSeismicStatus = "UNKNOWN"
	ConnectionSeismicStatusUp          ConnectionSeismicStatus = "UP"
	ConnectionSeismicStatusDown        ConnectionSeismicStatus = "DOWN"
	ConnectionSeismicStatusResize      ConnectionSeismicStatus = "RESIZE"
	ConnectionSeismicStatusMaintenance ConnectionSeismicStatus = "MAINTENANCE"
	ConnectionSeismicStatusQuota       ConnectionSeismicStatus = "QUOTA"
	ConnectionSeismicStatusCreating    ConnectionSeismicStatus = "CREATING"
)

func (e ConnectionSeismicStatus) ToPointer() *ConnectionSeismicStatus {
	return &e
}

func (e *ConnectionSeismicStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionSeismicStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSeismicStatus: %v", v)
	}
}

type ConnectionSeismic struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                `json:"name"`
	Type ConnectionSeismicType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionSeismicStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The name of the tenant. This is in the URL when you use seismic: [tenant].seismic.com
	TenantName string `json:"tenantName"`
	ClientID   string `json:"clientId"`
}

func (c ConnectionSeismic) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSeismic) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSeismic) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionSeismic) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSeismic) GetType() ConnectionSeismicType {
	if o == nil {
		return ConnectionSeismicType("")
	}
	return o.Type
}

func (o *ConnectionSeismic) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionSeismic) GetStatus() ConnectionSeismicStatus {
	if o == nil {
		return ConnectionSeismicStatus("")
	}
	return o.Status
}

func (o *ConnectionSeismic) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionSeismic) GetTenantName() string {
	if o == nil {
		return ""
	}
	return o.TenantName
}

func (o *ConnectionSeismic) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

type ConnectionSeismicInput struct {
	// The unique name of this connection.
	Name string                `json:"name"`
	Type ConnectionSeismicType `json:"type"`
	// Code retrieved from `/connections/oauth2-initiation`. **Note:** it is short-lived, therefore the connection creation should be done as soon as code is returned.
	Code string `json:"code"`
	// The name of the tenant. This is in the URL when you use seismic: [tenant].seismic.com
	TenantName string `json:"tenantName"`
	ClientID   string `json:"clientId"`
	// If you don't have a Client ID or Secret, see <a target="_blank" href="https://support.etleap.com/hc/en-us/articles/360045382574-Getting-Seismic-Credentials">the instructions here</a> for getting it.
	ClientSecret string `json:"clientSecret"`
}

func (o *ConnectionSeismicInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSeismicInput) GetType() ConnectionSeismicType {
	if o == nil {
		return ConnectionSeismicType("")
	}
	return o.Type
}

func (o *ConnectionSeismicInput) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *ConnectionSeismicInput) GetTenantName() string {
	if o == nil {
		return ""
	}
	return o.TenantName
}

func (o *ConnectionSeismicInput) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ConnectionSeismicInput) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}
