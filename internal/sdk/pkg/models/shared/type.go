// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

// Type1 - Note: JSON_OBJECT is deprecated and is a synonym of JSON.
type Type1 string

const (
	Type1Auto       Type1 = "AUTO"
	Type1Bigint     Type1 = "BIGINT"
	Type1Boolean    Type1 = "BOOLEAN"
	Type1Date       Type1 = "DATE"
	Type1Datetime   Type1 = "DATETIME"
	Type1Double     Type1 = "DOUBLE"
	Type1String     Type1 = "STRING"
	Type1JSONObject Type1 = "JSON_OBJECT"
	Type1JSON       Type1 = "JSON"
)

func (e Type1) ToPointer() *Type1 {
	return &e
}

func (e *Type1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AUTO":
		fallthrough
	case "BIGINT":
		fallthrough
	case "BOOLEAN":
		fallthrough
	case "DATE":
		fallthrough
	case "DATETIME":
		fallthrough
	case "DOUBLE":
		fallthrough
	case "STRING":
		fallthrough
	case "JSON_OBJECT":
		fallthrough
	case "JSON":
		*e = Type1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type1: %v", v)
	}
}

type TypeType string

const (
	TypeTypeType1                   TypeType = "type_1"
	TypeTypeTypeDecimal             TypeType = "type_decimal"
	TypeTypeTypeStringWithMaxLength TypeType = "type_string_with_max_length"
)

type Type struct {
	Type1                   *Type1
	TypeDecimal             *TypeDecimal
	TypeStringWithMaxLength *TypeStringWithMaxLength

	Type TypeType
}

func CreateTypeType1(type1 Type1) Type {
	typ := TypeTypeType1

	return Type{
		Type1: &type1,
		Type:  typ,
	}
}

func CreateTypeTypeDecimal(typeDecimal TypeDecimal) Type {
	typ := TypeTypeTypeDecimal

	return Type{
		TypeDecimal: &typeDecimal,
		Type:        typ,
	}
}

func CreateTypeTypeStringWithMaxLength(typeStringWithMaxLength TypeStringWithMaxLength) Type {
	typ := TypeTypeTypeStringWithMaxLength

	return Type{
		TypeStringWithMaxLength: &typeStringWithMaxLength,
		Type:                    typ,
	}
}

func (u *Type) UnmarshalJSON(data []byte) error {

	typeStringWithMaxLength := new(TypeStringWithMaxLength)
	if err := utils.UnmarshalJSON(data, &typeStringWithMaxLength, "", true, true); err == nil {
		u.TypeStringWithMaxLength = typeStringWithMaxLength
		u.Type = TypeTypeTypeStringWithMaxLength
		return nil
	}

	typeDecimal := new(TypeDecimal)
	if err := utils.UnmarshalJSON(data, &typeDecimal, "", true, true); err == nil {
		u.TypeDecimal = typeDecimal
		u.Type = TypeTypeTypeDecimal
		return nil
	}

	type1 := new(Type1)
	if err := utils.UnmarshalJSON(data, &type1, "", true, true); err == nil {
		u.Type1 = type1
		u.Type = TypeTypeType1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Type) MarshalJSON() ([]byte, error) {
	if u.Type1 != nil {
		return utils.MarshalJSON(u.Type1, "", true)
	}

	if u.TypeDecimal != nil {
		return utils.MarshalJSON(u.TypeDecimal, "", true)
	}

	if u.TypeStringWithMaxLength != nil {
		return utils.MarshalJSON(u.TypeStringWithMaxLength, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
