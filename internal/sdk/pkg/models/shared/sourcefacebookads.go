// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceFacebookAdsType string

const (
	SourceFacebookAdsTypeFacebookAds SourceFacebookAdsType = "FACEBOOK_ADS"
)

func (e SourceFacebookAdsType) ToPointer() *SourceFacebookAdsType {
	return &e
}

func (e *SourceFacebookAdsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FACEBOOK_ADS":
		*e = SourceFacebookAdsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceFacebookAdsType: %v", v)
	}
}

type SourceFacebookAds struct {
	Type SourceFacebookAdsType `json:"type"`
	// The universally unique identifier for the source.
	ConnectionID string `json:"connectionId"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// The aggregation level of the Facebook report. Example values: [Insights by Ad, Insights by Adset, Insights by Campaign, Insights by Account]
	Entity string `json:"entity"`
	// The breakdown fields. The first one must be `date_start`. See the [Facebook Documentation on Breakdowns.](https://developers.facebook.com/docs/marketing-api/insights/breakdowns/v16.0#insights-api-breakdowns)
	Breakdowns []string `json:"breakdowns"`
}

func (o *SourceFacebookAds) GetType() SourceFacebookAdsType {
	if o == nil {
		return SourceFacebookAdsType("")
	}
	return o.Type
}

func (o *SourceFacebookAds) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceFacebookAds) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceFacebookAds) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}

func (o *SourceFacebookAds) GetBreakdowns() []string {
	if o == nil {
		return []string{}
	}
	return o.Breakdowns
}
