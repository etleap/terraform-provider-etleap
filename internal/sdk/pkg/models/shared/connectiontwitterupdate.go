// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionTwitterUpdateType string

const (
	ConnectionTwitterUpdateTypeTwitterAds ConnectionTwitterUpdateType = "TWITTER_ADS"
)

func (e ConnectionTwitterUpdateType) ToPointer() *ConnectionTwitterUpdateType {
	return &e
}

func (e *ConnectionTwitterUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TWITTER_ADS":
		*e = ConnectionTwitterUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionTwitterUpdateType: %v", v)
	}
}

type ConnectionTwitterUpdate struct {
	// The unique name of this connection.
	Name *string                      `json:"name,omitempty"`
	Type *ConnectionTwitterUpdateType `json:"type"`
	// Whether this connection should be marked as active.
	Active *bool `json:"active,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// This represents your Twitter developer app when making API requests. Generated under 'Consumer API keys'.
	AppKey *string `json:"appKey,omitempty"`
	// This authenticates your Twitter developer app when making API requests. Generated under 'Consumer API keys'.
	AppSecretKey *string `json:"appSecretKey,omitempty"`
	// This identifies your Twitter account when generating Ad reports. Generated under 'Access token & access token secret'.
	AccessToken *string `json:"accessToken,omitempty"`
	// This authenticates your Twitter account when generating Ad reports. Generated under 'Access token & access token secret'.
	AccessTokenSecret *string `json:"accessTokenSecret,omitempty"`
	// If you want to create pipelines from entities that uses Twitter API V2 endpoints you need to specify which Twitter accounts you want to retrieve data from. The usernames must be separated by comma and without the @
	TwitterUsernames *string `json:"twitterUsernames,omitempty"`
}

func (o *ConnectionTwitterUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionTwitterUpdate) GetType() *ConnectionTwitterUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConnectionTwitterUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionTwitterUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionTwitterUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionTwitterUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionTwitterUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionTwitterUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionTwitterUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionTwitterUpdate) GetAppKey() *string {
	if o == nil {
		return nil
	}
	return o.AppKey
}

func (o *ConnectionTwitterUpdate) GetAppSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.AppSecretKey
}

func (o *ConnectionTwitterUpdate) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *ConnectionTwitterUpdate) GetAccessTokenSecret() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenSecret
}

func (o *ConnectionTwitterUpdate) GetTwitterUsernames() *string {
	if o == nil {
		return nil
	}
	return o.TwitterUsernames
}
