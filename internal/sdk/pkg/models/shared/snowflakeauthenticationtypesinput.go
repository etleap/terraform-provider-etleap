// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type SnowflakeAuthenticationTypesInputType string

const (
	SnowflakeAuthenticationTypesInputTypePassword SnowflakeAuthenticationTypesInputType = "PASSWORD"
	SnowflakeAuthenticationTypesInputTypeKeyPair  SnowflakeAuthenticationTypesInputType = "KEY_PAIR"
)

// SnowflakeAuthenticationTypesInput - Snowflake Authentication Types
type SnowflakeAuthenticationTypesInput struct {
	SnowflakeAuthenticationKeyPairInput *SnowflakeAuthenticationKeyPairInput
	SnowflakeAuthenticationPassword     *SnowflakeAuthenticationPassword

	Type SnowflakeAuthenticationTypesInputType
}

func CreateSnowflakeAuthenticationTypesInputPassword(password SnowflakeAuthenticationPassword) SnowflakeAuthenticationTypesInput {
	typ := SnowflakeAuthenticationTypesInputTypePassword

	typStr := SnowflakeAuthenticationPasswordType(typ)
	password.Type = typStr

	return SnowflakeAuthenticationTypesInput{
		SnowflakeAuthenticationPassword: &password,
		Type:                            typ,
	}
}

func CreateSnowflakeAuthenticationTypesInputKeyPair(keyPair SnowflakeAuthenticationKeyPairInput) SnowflakeAuthenticationTypesInput {
	typ := SnowflakeAuthenticationTypesInputTypeKeyPair

	typStr := SnowflakeAuthenticationKeyPairType(typ)
	keyPair.Type = typStr

	return SnowflakeAuthenticationTypesInput{
		SnowflakeAuthenticationKeyPairInput: &keyPair,
		Type:                                typ,
	}
}

func (u *SnowflakeAuthenticationTypesInput) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "PASSWORD":
		snowflakeAuthenticationPassword := new(SnowflakeAuthenticationPassword)
		if err := utils.UnmarshalJSON(data, &snowflakeAuthenticationPassword, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.SnowflakeAuthenticationPassword = snowflakeAuthenticationPassword
		u.Type = SnowflakeAuthenticationTypesInputTypePassword
		return nil
	case "KEY_PAIR":
		snowflakeAuthenticationKeyPairInput := new(SnowflakeAuthenticationKeyPairInput)
		if err := utils.UnmarshalJSON(data, &snowflakeAuthenticationKeyPairInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.SnowflakeAuthenticationKeyPairInput = snowflakeAuthenticationKeyPairInput
		u.Type = SnowflakeAuthenticationTypesInputTypeKeyPair
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SnowflakeAuthenticationTypesInput) MarshalJSON() ([]byte, error) {
	if u.SnowflakeAuthenticationKeyPairInput != nil {
		return utils.MarshalJSON(u.SnowflakeAuthenticationKeyPairInput, "", true)
	}

	if u.SnowflakeAuthenticationPassword != nil {
		return utils.MarshalJSON(u.SnowflakeAuthenticationPassword, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
