// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionSftpUpdateType string

const (
	ConnectionSftpUpdateTypeSftp ConnectionSftpUpdateType = "SFTP"
)

func (e ConnectionSftpUpdateType) ToPointer() *ConnectionSftpUpdateType {
	return &e
}

func (e *ConnectionSftpUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SFTP":
		*e = ConnectionSftpUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSftpUpdateType: %v", v)
	}
}

type ConnectionSftpUpdate struct {
	// Whether this connection should be marked as active.
	Active *bool                     `json:"active,omitempty"`
	Type   *ConnectionSftpUpdateType `json:"type"`
	// The unique name of this connection.
	Name *string `json:"name,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	Username       *string              `json:"username,omitempty"`
	// E.g. 'etleap.com' or '10.0.0.2'.
	Hostname *string `json:"hostname,omitempty"`
	// The start directory for the user. Etleap will read any file or folders under this directory.
	BaseDirectory *string `json:"baseDirectory,omitempty"`
	// If set to `null`, Public Key Authentication will be used.
	Password *string `json:"password,omitempty"`
	Port     *int64  `json:"port,omitempty"`
}

func (o *ConnectionSftpUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionSftpUpdate) GetType() *ConnectionSftpUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConnectionSftpUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionSftpUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSftpUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSftpUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSftpUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSftpUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSftpUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSftpUpdate) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *ConnectionSftpUpdate) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *ConnectionSftpUpdate) GetBaseDirectory() *string {
	if o == nil {
		return nil
	}
	return o.BaseDirectory
}

func (o *ConnectionSftpUpdate) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *ConnectionSftpUpdate) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}
