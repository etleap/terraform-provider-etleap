// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionFifteenFiveType string

const (
	ConnectionFifteenFiveTypeFifteenFive ConnectionFifteenFiveType = "FIFTEEN_FIVE"
)

func (e ConnectionFifteenFiveType) ToPointer() *ConnectionFifteenFiveType {
	return &e
}

func (e *ConnectionFifteenFiveType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FIFTEEN_FIVE":
		*e = ConnectionFifteenFiveType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionFifteenFiveType: %v", v)
	}
}

// ConnectionFifteenFiveStatus - The current status of the connection.
type ConnectionFifteenFiveStatus string

const (
	ConnectionFifteenFiveStatusUnknown     ConnectionFifteenFiveStatus = "UNKNOWN"
	ConnectionFifteenFiveStatusUp          ConnectionFifteenFiveStatus = "UP"
	ConnectionFifteenFiveStatusDown        ConnectionFifteenFiveStatus = "DOWN"
	ConnectionFifteenFiveStatusResize      ConnectionFifteenFiveStatus = "RESIZE"
	ConnectionFifteenFiveStatusMaintenance ConnectionFifteenFiveStatus = "MAINTENANCE"
	ConnectionFifteenFiveStatusQuota       ConnectionFifteenFiveStatus = "QUOTA"
	ConnectionFifteenFiveStatusCreating    ConnectionFifteenFiveStatus = "CREATING"
)

func (e ConnectionFifteenFiveStatus) ToPointer() *ConnectionFifteenFiveStatus {
	return &e
}

func (e *ConnectionFifteenFiveStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionFifteenFiveStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionFifteenFiveStatus: %v", v)
	}
}

type ConnectionFifteenFive struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                    `json:"name"`
	Type ConnectionFifteenFiveType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionFifteenFiveStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// You company 15Five's subdomain, only required if your 15Five instance has a subdomain that's not https://(my).15five.com. Example: https://(subdomain).15Five.com
	Subdomain *string `json:"subdomain,omitempty"`
}

func (c ConnectionFifteenFive) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionFifteenFive) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionFifteenFive) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionFifteenFive) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionFifteenFive) GetType() ConnectionFifteenFiveType {
	if o == nil {
		return ConnectionFifteenFiveType("")
	}
	return o.Type
}

func (o *ConnectionFifteenFive) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionFifteenFive) GetStatus() ConnectionFifteenFiveStatus {
	if o == nil {
		return ConnectionFifteenFiveStatus("")
	}
	return o.Status
}

func (o *ConnectionFifteenFive) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionFifteenFive) GetSubdomain() *string {
	if o == nil {
		return nil
	}
	return o.Subdomain
}

type ConnectionFifteenFiveInput struct {
	// The unique name of this connection.
	Name        string                    `json:"name"`
	Type        ConnectionFifteenFiveType `json:"type"`
	AccessToken string                    `json:"accessToken"`
	// You company 15Five's subdomain, only required if your 15Five instance has a subdomain that's not https://(my).15five.com. Example: https://(subdomain).15Five.com
	Subdomain *string `json:"subdomain,omitempty"`
}

func (o *ConnectionFifteenFiveInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionFifteenFiveInput) GetType() ConnectionFifteenFiveType {
	if o == nil {
		return ConnectionFifteenFiveType("")
	}
	return o.Type
}

func (o *ConnectionFifteenFiveInput) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *ConnectionFifteenFiveInput) GetSubdomain() *string {
	if o == nil {
		return nil
	}
	return o.Subdomain
}
