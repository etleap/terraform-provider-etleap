// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionSnowflakeShardedType string

const (
	ConnectionSnowflakeShardedTypeSnowflakeSharded ConnectionSnowflakeShardedType = "SNOWFLAKE_SHARDED"
)

func (e ConnectionSnowflakeShardedType) ToPointer() *ConnectionSnowflakeShardedType {
	return &e
}

func (e *ConnectionSnowflakeShardedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SNOWFLAKE_SHARDED":
		*e = ConnectionSnowflakeShardedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSnowflakeShardedType: %v", v)
	}
}

// ConnectionSnowflakeShardedStatus - The current status of the connection.
type ConnectionSnowflakeShardedStatus string

const (
	ConnectionSnowflakeShardedStatusUnknown     ConnectionSnowflakeShardedStatus = "UNKNOWN"
	ConnectionSnowflakeShardedStatusUp          ConnectionSnowflakeShardedStatus = "UP"
	ConnectionSnowflakeShardedStatusDown        ConnectionSnowflakeShardedStatus = "DOWN"
	ConnectionSnowflakeShardedStatusResize      ConnectionSnowflakeShardedStatus = "RESIZE"
	ConnectionSnowflakeShardedStatusMaintenance ConnectionSnowflakeShardedStatus = "MAINTENANCE"
	ConnectionSnowflakeShardedStatusQuota       ConnectionSnowflakeShardedStatus = "QUOTA"
	ConnectionSnowflakeShardedStatusCreating    ConnectionSnowflakeShardedStatus = "CREATING"
)

func (e ConnectionSnowflakeShardedStatus) ToPointer() *ConnectionSnowflakeShardedStatus {
	return &e
}

func (e *ConnectionSnowflakeShardedStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionSnowflakeShardedStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSnowflakeShardedStatus: %v", v)
	}
}

type ConnectionSnowflakeShardedDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionSnowflakeShardedDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionSnowflakeShardedDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSnowflakeShardedDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSnowflakeShardedDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSnowflakeShardedDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSnowflakeShardedDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSnowflakeShardedDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

type ConnectionSnowflakeSharded struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                         `json:"name"`
	Type ConnectionSnowflakeShardedType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionSnowflakeShardedStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionSnowflakeShardedDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Take into account that the schema is case sensitive
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Schema *string `json:"schema,omitempty"`
	// When Etleap creates Snowflake tables, SELECT privileges will be granted to roles specified here. Take into account that the roles are case sensitive.
	Roles []string `json:"roles,omitempty"`
	// Are you going to use this connection only as a source for pipelines? When `true`, this connection will only be available as an ETL source only, and Etleap will skip the creation of an audit table in the database.
	SourceOnly *bool                  `default:"false" json:"sourceOnly"`
	Shards     []SnowflakeShardOutput `json:"shards"`
}

func (c ConnectionSnowflakeSharded) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSnowflakeSharded) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSnowflakeSharded) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionSnowflakeSharded) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSnowflakeSharded) GetType() ConnectionSnowflakeShardedType {
	if o == nil {
		return ConnectionSnowflakeShardedType("")
	}
	return o.Type
}

func (o *ConnectionSnowflakeSharded) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionSnowflakeSharded) GetStatus() ConnectionSnowflakeShardedStatus {
	if o == nil {
		return ConnectionSnowflakeShardedStatus("")
	}
	return o.Status
}

func (o *ConnectionSnowflakeSharded) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionSnowflakeSharded) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSnowflakeSharded) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSnowflakeSharded) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSnowflakeSharded) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSnowflakeSharded) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSnowflakeSharded) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSnowflakeSharded) GetDefaultUpdateSchedule() []ConnectionSnowflakeShardedDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionSnowflakeShardedDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionSnowflakeSharded) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionSnowflakeSharded) GetRoles() []string {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *ConnectionSnowflakeSharded) GetSourceOnly() *bool {
	if o == nil {
		return nil
	}
	return o.SourceOnly
}

func (o *ConnectionSnowflakeSharded) GetShards() []SnowflakeShardOutput {
	if o == nil {
		return []SnowflakeShardOutput{}
	}
	return o.Shards
}

type ConnectionSnowflakeShardedInput struct {
	// The unique name of this connection.
	Name string                         `json:"name"`
	Type ConnectionSnowflakeShardedType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Take into account that the schema is case sensitive
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Schema *string `json:"schema,omitempty"`
	// When Etleap creates Snowflake tables, SELECT privileges will be granted to roles specified here. Take into account that the roles are case sensitive.
	Roles []string `json:"roles,omitempty"`
	// Are you going to use this connection only as a source for pipelines? When `true`, this connection will only be available as an ETL source only, and Etleap will skip the creation of an audit table in the database.
	SourceOnly *bool            `default:"false" json:"sourceOnly"`
	Shards     []SnowflakeShard `json:"shards"`
}

func (c ConnectionSnowflakeShardedInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSnowflakeShardedInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSnowflakeShardedInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSnowflakeShardedInput) GetType() ConnectionSnowflakeShardedType {
	if o == nil {
		return ConnectionSnowflakeShardedType("")
	}
	return o.Type
}

func (o *ConnectionSnowflakeShardedInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSnowflakeShardedInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSnowflakeShardedInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSnowflakeShardedInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSnowflakeShardedInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSnowflakeShardedInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSnowflakeShardedInput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionSnowflakeShardedInput) GetRoles() []string {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *ConnectionSnowflakeShardedInput) GetSourceOnly() *bool {
	if o == nil {
		return nil
	}
	return o.SourceOnly
}

func (o *ConnectionSnowflakeShardedInput) GetShards() []SnowflakeShard {
	if o == nil {
		return []SnowflakeShard{}
	}
	return o.Shards
}
