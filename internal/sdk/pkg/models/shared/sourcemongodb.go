// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceMongodbType string

const (
	SourceMongodbTypeMongodb SourceMongodbType = "MONGODB"
)

func (e SourceMongodbType) ToPointer() *SourceMongodbType {
	return &e
}

func (e *SourceMongodbType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MONGODB":
		*e = SourceMongodbType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbType: %v", v)
	}
}

type SourceMongodb struct {
	Type SourceMongodbType `json:"type"`
	// The universally unique identifier for the source.
	ConnectionID string `json:"connectionId"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// Name of the table to be extracted from the source. Either `table` or `tableNameFilter` must be specified, but not both.
	Table *string `json:"table,omitempty"`
	// Regular expression matching all partitions of a table. Partitions must have the same table schema. Either `tableNameFilter` or `table` must be specified, but not both.
	TableNameFilter *string `json:"tableNameFilter,omitempty"`
}

func (o *SourceMongodb) GetType() SourceMongodbType {
	if o == nil {
		return SourceMongodbType("")
	}
	return o.Type
}

func (o *SourceMongodb) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceMongodb) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceMongodb) GetTable() *string {
	if o == nil {
		return nil
	}
	return o.Table
}

func (o *SourceMongodb) GetTableNameFilter() *string {
	if o == nil {
		return nil
	}
	return o.TableNameFilter
}
