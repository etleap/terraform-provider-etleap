// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type GrantWithoutPrivilegeType string

const (
	GrantWithoutPrivilegeTypeUser GrantWithoutPrivilegeType = "USER"
	GrantWithoutPrivilegeTypeTeam GrantWithoutPrivilegeType = "TEAM"
)

// GrantWithoutPrivilege - An access grant to an object in Etleap. A grant can provide access for a user or a team.
type GrantWithoutPrivilege struct {
	GrantUser *GrantUser
	GrantTeam *GrantTeam

	Type GrantWithoutPrivilegeType
}

func CreateGrantWithoutPrivilegeUser(user GrantUser) GrantWithoutPrivilege {
	typ := GrantWithoutPrivilegeTypeUser
	typStr := GrantUserType(typ)
	user.Type = typStr

	return GrantWithoutPrivilege{
		GrantUser: &user,
		Type:      typ,
	}
}

func CreateGrantWithoutPrivilegeTeam(team GrantTeam) GrantWithoutPrivilege {
	typ := GrantWithoutPrivilegeTypeTeam
	typStr := GrantTeamType(typ)
	team.Type = typStr

	return GrantWithoutPrivilege{
		GrantTeam: &team,
		Type:      typ,
	}
}

func (u *GrantWithoutPrivilege) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "USER":
		grantUser := new(GrantUser)
		if err := utils.UnmarshalJSON(data, &grantUser, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GrantUser = grantUser
		u.Type = GrantWithoutPrivilegeTypeUser
		return nil
	case "TEAM":
		grantTeam := new(GrantTeam)
		if err := utils.UnmarshalJSON(data, &grantTeam, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GrantTeam = grantTeam
		u.Type = GrantWithoutPrivilegeTypeTeam
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GrantWithoutPrivilege) MarshalJSON() ([]byte, error) {
	if u.GrantUser != nil {
		return utils.MarshalJSON(u.GrantUser, "", true)
	}

	if u.GrantTeam != nil {
		return utils.MarshalJSON(u.GrantTeam, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
