// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionImpactRadiusStatus - The current status of the connection.
type ConnectionImpactRadiusStatus string

const (
	ConnectionImpactRadiusStatusUnknown     ConnectionImpactRadiusStatus = "UNKNOWN"
	ConnectionImpactRadiusStatusUp          ConnectionImpactRadiusStatus = "UP"
	ConnectionImpactRadiusStatusDown        ConnectionImpactRadiusStatus = "DOWN"
	ConnectionImpactRadiusStatusResize      ConnectionImpactRadiusStatus = "RESIZE"
	ConnectionImpactRadiusStatusMaintenance ConnectionImpactRadiusStatus = "MAINTENANCE"
	ConnectionImpactRadiusStatusQuota       ConnectionImpactRadiusStatus = "QUOTA"
	ConnectionImpactRadiusStatusCreating    ConnectionImpactRadiusStatus = "CREATING"
)

func (e ConnectionImpactRadiusStatus) ToPointer() *ConnectionImpactRadiusStatus {
	return &e
}

func (e *ConnectionImpactRadiusStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionImpactRadiusStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionImpactRadiusStatus: %v", v)
	}
}

type ConnectionImpactRadiusDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionImpactRadiusDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionImpactRadiusDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionImpactRadiusDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionImpactRadiusDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionImpactRadiusDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionImpactRadiusDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionImpactRadiusDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionImpactRadiusType string

const (
	ConnectionImpactRadiusTypeImpactRadius ConnectionImpactRadiusType = "IMPACT_RADIUS"
)

func (e ConnectionImpactRadiusType) ToPointer() *ConnectionImpactRadiusType {
	return &e
}

func (e *ConnectionImpactRadiusType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IMPACT_RADIUS":
		*e = ConnectionImpactRadiusType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionImpactRadiusType: %v", v)
	}
}

type ConnectionImpactRadiusOutput struct {
	// The current status of the connection.
	Status ConnectionImpactRadiusStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionImpactRadiusDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool                       `json:"active"`
	Type   ConnectionImpactRadiusType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// To find the Account SID to Impact Radius, click on the Cloud Icon in the bottom left > Click API > Find Rest API information
	AccountSid string `json:"accountSid"`
}

func (c ConnectionImpactRadiusOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionImpactRadiusOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionImpactRadiusOutput) GetStatus() ConnectionImpactRadiusStatus {
	if o == nil {
		return ConnectionImpactRadiusStatus("")
	}
	return o.Status
}

func (o *ConnectionImpactRadiusOutput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionImpactRadiusOutput) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionImpactRadiusOutput) GetDefaultUpdateSchedule() []ConnectionImpactRadiusDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionImpactRadiusDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionImpactRadiusOutput) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionImpactRadiusOutput) GetType() ConnectionImpactRadiusType {
	if o == nil {
		return ConnectionImpactRadiusType("")
	}
	return o.Type
}

func (o *ConnectionImpactRadiusOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionImpactRadiusOutput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionImpactRadiusOutput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionImpactRadiusOutput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionImpactRadiusOutput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionImpactRadiusOutput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionImpactRadiusOutput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionImpactRadiusOutput) GetAccountSid() string {
	if o == nil {
		return ""
	}
	return o.AccountSid
}

type ConnectionImpactRadius struct {
	// The unique name of this connection.
	Name string                     `json:"name"`
	Type ConnectionImpactRadiusType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// To find the Auth Token to Impact Radius, click on the Cloud Icon in the bottom left > Click API > Find Rest API information
	AuthToken string `json:"authToken"`
	// To find the Account SID to Impact Radius, click on the Cloud Icon in the bottom left > Click API > Find Rest API information
	AccountSid string `json:"accountSid"`
}

func (o *ConnectionImpactRadius) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionImpactRadius) GetType() ConnectionImpactRadiusType {
	if o == nil {
		return ConnectionImpactRadiusType("")
	}
	return o.Type
}

func (o *ConnectionImpactRadius) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionImpactRadius) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionImpactRadius) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionImpactRadius) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionImpactRadius) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionImpactRadius) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionImpactRadius) GetAuthToken() string {
	if o == nil {
		return ""
	}
	return o.AuthToken
}

func (o *ConnectionImpactRadius) GetAccountSid() string {
	if o == nil {
		return ""
	}
	return o.AccountSid
}
