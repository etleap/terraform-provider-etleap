// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RefreshScheduleModeMonthlyMode string

const (
	RefreshScheduleModeMonthlyModeMonthly RefreshScheduleModeMonthlyMode = "MONTHLY"
)

func (e RefreshScheduleModeMonthlyMode) ToPointer() *RefreshScheduleModeMonthlyMode {
	return &e
}

func (e *RefreshScheduleModeMonthlyMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MONTHLY":
		*e = RefreshScheduleModeMonthlyMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefreshScheduleModeMonthlyMode: %v", v)
	}
}

type RefreshScheduleModeMonthly struct {
	Mode RefreshScheduleModeMonthlyMode `json:"mode"`
	// Hour of day this schedule should trigger at (in UTC).
	HourOfDay int64 `json:"hourOfDay"`
	// Day of the month this schedule should trigger at (in UTC).
	DayOfMonth int64 `json:"dayOfMonth"`
}

func (o *RefreshScheduleModeMonthly) GetMode() RefreshScheduleModeMonthlyMode {
	if o == nil {
		return RefreshScheduleModeMonthlyMode("")
	}
	return o.Mode
}

func (o *RefreshScheduleModeMonthly) GetHourOfDay() int64 {
	if o == nil {
		return 0
	}
	return o.HourOfDay
}

func (o *RefreshScheduleModeMonthly) GetDayOfMonth() int64 {
	if o == nil {
		return 0
	}
	return o.DayOfMonth
}
