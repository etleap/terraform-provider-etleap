// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SnowflakeAuthenticationKeyPairType string

const (
	SnowflakeAuthenticationKeyPairTypePassword SnowflakeAuthenticationKeyPairType = "PASSWORD"
	SnowflakeAuthenticationKeyPairTypeKeyPair  SnowflakeAuthenticationKeyPairType = "KEY_PAIR"
)

func (e SnowflakeAuthenticationKeyPairType) ToPointer() *SnowflakeAuthenticationKeyPairType {
	return &e
}

func (e *SnowflakeAuthenticationKeyPairType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSWORD":
		fallthrough
	case "KEY_PAIR":
		*e = SnowflakeAuthenticationKeyPairType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SnowflakeAuthenticationKeyPairType: %v", v)
	}
}

// SnowflakeAuthenticationKeyPair - Snowflake Key Pair Authentication
type SnowflakeAuthenticationKeyPair struct {
	PublicKey string                             `json:"publicKey"`
	Type      SnowflakeAuthenticationKeyPairType `json:"type"`
}

func (o *SnowflakeAuthenticationKeyPair) GetPublicKey() string {
	if o == nil {
		return ""
	}
	return o.PublicKey
}

func (o *SnowflakeAuthenticationKeyPair) GetType() SnowflakeAuthenticationKeyPairType {
	if o == nil {
		return SnowflakeAuthenticationKeyPairType("")
	}
	return o.Type
}

// SnowflakeAuthenticationKeyPairInput - Snowflake Key Pair Authentication
type SnowflakeAuthenticationKeyPairInput struct {
	PrivateKey string                             `json:"privateKey"`
	Type       SnowflakeAuthenticationKeyPairType `json:"type"`
}

func (o *SnowflakeAuthenticationKeyPairInput) GetPrivateKey() string {
	if o == nil {
		return ""
	}
	return o.PrivateKey
}

func (o *SnowflakeAuthenticationKeyPairInput) GetType() SnowflakeAuthenticationKeyPairType {
	if o == nil {
		return SnowflakeAuthenticationKeyPairType("")
	}
	return o.Type
}
