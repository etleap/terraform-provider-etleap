// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionBingType string

const (
	ConnectionBingTypeBingAds ConnectionBingType = "BING_ADS"
)

func (e ConnectionBingType) ToPointer() *ConnectionBingType {
	return &e
}

func (e *ConnectionBingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BING_ADS":
		*e = ConnectionBingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionBingType: %v", v)
	}
}

// ConnectionBingStatus - The current status of the connection.
type ConnectionBingStatus string

const (
	ConnectionBingStatusUnknown     ConnectionBingStatus = "UNKNOWN"
	ConnectionBingStatusUp          ConnectionBingStatus = "UP"
	ConnectionBingStatusDown        ConnectionBingStatus = "DOWN"
	ConnectionBingStatusResize      ConnectionBingStatus = "RESIZE"
	ConnectionBingStatusMaintenance ConnectionBingStatus = "MAINTENANCE"
	ConnectionBingStatusQuota       ConnectionBingStatus = "QUOTA"
	ConnectionBingStatusCreating    ConnectionBingStatus = "CREATING"
)

func (e ConnectionBingStatus) ToPointer() *ConnectionBingStatus {
	return &e
}

func (e *ConnectionBingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionBingStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionBingStatus: %v", v)
	}
}

type ConnectionBing struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string             `json:"name"`
	Type ConnectionBingType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionBingStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	Username   string    `json:"username"`
	UserID     *int64    `json:"userId,omitempty"`
}

func (c ConnectionBing) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionBing) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionBing) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionBing) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionBing) GetType() ConnectionBingType {
	if o == nil {
		return ConnectionBingType("")
	}
	return o.Type
}

func (o *ConnectionBing) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionBing) GetStatus() ConnectionBingStatus {
	if o == nil {
		return ConnectionBingStatus("")
	}
	return o.Status
}

func (o *ConnectionBing) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionBing) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionBing) GetUserID() *int64 {
	if o == nil {
		return nil
	}
	return o.UserID
}

type ConnectionBingInput struct {
	// The unique name of this connection.
	Name string             `json:"name"`
	Type ConnectionBingType `json:"type"`
	// Code retrieved from `/connections/oauth2-initiation`. **Note:** it is short-lived, therefore the connection creation should be done as soon as code is returned.
	Code string `json:"code"`
}

func (o *ConnectionBingInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionBingInput) GetType() ConnectionBingType {
	if o == nil {
		return ConnectionBingType("")
	}
	return o.Type
}

func (o *ConnectionBingInput) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}
