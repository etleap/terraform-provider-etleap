// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type EntityTypeName string

const (
	EntityTypeNameEntity EntityTypeName = "ENTITY"
)

func (e EntityTypeName) ToPointer() *EntityTypeName {
	return &e
}

func (e *EntityTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENTITY":
		*e = EntityTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityTypeName: %v", v)
	}
}

type EntityType struct {
	Name     *EntityTypeName `default:"ENTITY" json:"name"`
	EntityID string          `json:"entityId"`
}

func (e EntityType) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityType) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *EntityType) GetName() *EntityTypeName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EntityType) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}
