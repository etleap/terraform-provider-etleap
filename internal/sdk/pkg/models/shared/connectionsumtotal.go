// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionSumTotalType string

const (
	ConnectionSumTotalTypeSumtotal ConnectionSumTotalType = "SUMTOTAL"
)

func (e ConnectionSumTotalType) ToPointer() *ConnectionSumTotalType {
	return &e
}

func (e *ConnectionSumTotalType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUMTOTAL":
		*e = ConnectionSumTotalType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSumTotalType: %v", v)
	}
}

// ConnectionSumTotalStatus - The current status of the connection.
type ConnectionSumTotalStatus string

const (
	ConnectionSumTotalStatusUnknown     ConnectionSumTotalStatus = "UNKNOWN"
	ConnectionSumTotalStatusUp          ConnectionSumTotalStatus = "UP"
	ConnectionSumTotalStatusDown        ConnectionSumTotalStatus = "DOWN"
	ConnectionSumTotalStatusResize      ConnectionSumTotalStatus = "RESIZE"
	ConnectionSumTotalStatusMaintenance ConnectionSumTotalStatus = "MAINTENANCE"
	ConnectionSumTotalStatusQuota       ConnectionSumTotalStatus = "QUOTA"
	ConnectionSumTotalStatusCreating    ConnectionSumTotalStatus = "CREATING"
)

func (e ConnectionSumTotalStatus) ToPointer() *ConnectionSumTotalStatus {
	return &e
}

func (e *ConnectionSumTotalStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionSumTotalStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSumTotalStatus: %v", v)
	}
}

type ConnectionSumTotalDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionSumTotalDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionSumTotalDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSumTotalDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSumTotalDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSumTotalDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSumTotalDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSumTotalDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

type ConnectionSumTotal struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionSumTotalType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionSumTotalStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionSumTotalDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	TenantURL             string                                    `json:"tenantUrl"`
	ClientID              string                                    `json:"clientId"`
}

func (c ConnectionSumTotal) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSumTotal) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSumTotal) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionSumTotal) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSumTotal) GetType() ConnectionSumTotalType {
	if o == nil {
		return ConnectionSumTotalType("")
	}
	return o.Type
}

func (o *ConnectionSumTotal) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionSumTotal) GetStatus() ConnectionSumTotalStatus {
	if o == nil {
		return ConnectionSumTotalStatus("")
	}
	return o.Status
}

func (o *ConnectionSumTotal) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionSumTotal) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSumTotal) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSumTotal) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSumTotal) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSumTotal) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSumTotal) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSumTotal) GetDefaultUpdateSchedule() []ConnectionSumTotalDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionSumTotalDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionSumTotal) GetTenantURL() string {
	if o == nil {
		return ""
	}
	return o.TenantURL
}

func (o *ConnectionSumTotal) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

type ConnectionSumTotalInput struct {
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionSumTotalType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	TenantURL      string               `json:"tenantUrl"`
	ClientID       string               `json:"clientId"`
	ClientSecret   string               `json:"clientSecret"`
}

func (o *ConnectionSumTotalInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSumTotalInput) GetType() ConnectionSumTotalType {
	if o == nil {
		return ConnectionSumTotalType("")
	}
	return o.Type
}

func (o *ConnectionSumTotalInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSumTotalInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSumTotalInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSumTotalInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSumTotalInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSumTotalInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSumTotalInput) GetTenantURL() string {
	if o == nil {
		return ""
	}
	return o.TenantURL
}

func (o *ConnectionSumTotalInput) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ConnectionSumTotalInput) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}
