// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type SnowflakeAuthenticationTypesOutputType string

const (
	SnowflakeAuthenticationTypesOutputTypePassword SnowflakeAuthenticationTypesOutputType = "PASSWORD"
	SnowflakeAuthenticationTypesOutputTypeKeyPair  SnowflakeAuthenticationTypesOutputType = "KEY_PAIR"
)

// SnowflakeAuthenticationTypesOutput - Snowflake Authentication Types
type SnowflakeAuthenticationTypesOutput struct {
	SnowflakeAuthenticationKeyPairOutput  *SnowflakeAuthenticationKeyPairOutput
	SnowflakeAuthenticationPasswordOutput *SnowflakeAuthenticationPasswordOutput

	Type SnowflakeAuthenticationTypesOutputType
}

func CreateSnowflakeAuthenticationTypesOutputPassword(password SnowflakeAuthenticationPasswordOutput) SnowflakeAuthenticationTypesOutput {
	typ := SnowflakeAuthenticationTypesOutputTypePassword

	typStr := SnowflakeAuthenticationPasswordType(typ)
	password.Type = typStr

	return SnowflakeAuthenticationTypesOutput{
		SnowflakeAuthenticationPasswordOutput: &password,
		Type:                                  typ,
	}
}

func CreateSnowflakeAuthenticationTypesOutputKeyPair(keyPair SnowflakeAuthenticationKeyPairOutput) SnowflakeAuthenticationTypesOutput {
	typ := SnowflakeAuthenticationTypesOutputTypeKeyPair

	typStr := SnowflakeAuthenticationKeyPairType(typ)
	keyPair.Type = typStr

	return SnowflakeAuthenticationTypesOutput{
		SnowflakeAuthenticationKeyPairOutput: &keyPair,
		Type:                                 typ,
	}
}

func (u *SnowflakeAuthenticationTypesOutput) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "PASSWORD":
		snowflakeAuthenticationPasswordOutput := new(SnowflakeAuthenticationPasswordOutput)
		if err := utils.UnmarshalJSON(data, &snowflakeAuthenticationPasswordOutput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.SnowflakeAuthenticationPasswordOutput = snowflakeAuthenticationPasswordOutput
		u.Type = SnowflakeAuthenticationTypesOutputTypePassword
		return nil
	case "KEY_PAIR":
		snowflakeAuthenticationKeyPairOutput := new(SnowflakeAuthenticationKeyPairOutput)
		if err := utils.UnmarshalJSON(data, &snowflakeAuthenticationKeyPairOutput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.SnowflakeAuthenticationKeyPairOutput = snowflakeAuthenticationKeyPairOutput
		u.Type = SnowflakeAuthenticationTypesOutputTypeKeyPair
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SnowflakeAuthenticationTypesOutput) MarshalJSON() ([]byte, error) {
	if u.SnowflakeAuthenticationKeyPairOutput != nil {
		return utils.MarshalJSON(u.SnowflakeAuthenticationKeyPairOutput, "", true)
	}

	if u.SnowflakeAuthenticationPasswordOutput != nil {
		return utils.MarshalJSON(u.SnowflakeAuthenticationPasswordOutput, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
