// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type DbtScheduleRunInProgressStatus string

const (
	DbtScheduleRunInProgressStatusInProgress DbtScheduleRunInProgressStatus = "IN_PROGRESS"
)

func (e DbtScheduleRunInProgressStatus) ToPointer() *DbtScheduleRunInProgressStatus {
	return &e
}

func (e *DbtScheduleRunInProgressStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		*e = DbtScheduleRunInProgressStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DbtScheduleRunInProgressStatus: %v", v)
	}
}

// Phase - The phase that this dbt run is currently in. dbt runs consist of an `INGEST` phase where source pipelines ingest data into the warehouse, followed by a `BUILD` phase where the dbt models are built.
type Phase string

const (
	PhaseIngest Phase = "INGEST"
	PhaseBuild  Phase = "BUILD"
)

func (e Phase) ToPointer() *Phase {
	return &e
}

func (e *Phase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INGEST":
		fallthrough
	case "BUILD":
		*e = Phase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phase: %v", v)
	}
}

type DbtScheduleRunInProgress struct {
	Status DbtScheduleRunInProgressStatus `json:"status"`
	// The time that this dbt run was triggered.
	StartDate time.Time `json:"startDate"`
	// The phase that this dbt run is currently in. dbt runs consist of an `INGEST` phase where source pipelines ingest data into the warehouse, followed by a `BUILD` phase where the dbt models are built.
	Phase Phase `json:"phase"`
	// Whether the dbt build phase is taking too long.
	BuildIsTakingTooLong bool `json:"buildIsTakingTooLong"`
	// The duration, in seconds, between the time the previous run was triggered and the time it completed. This will be `null` if this is the first time this schedule has run.
	PreviousRunDuration *int64        `json:"previousRunDuration,omitempty"`
	PreviousRunStatus   *DbtRunStatus `json:"previousRunStatus,omitempty"`
	// The last time that a successful dbt build finished.
	LastSuccessfulDbtBuildDate *time.Time `json:"lastSuccessfulDbtBuildDate,omitempty"`
}

func (d DbtScheduleRunInProgress) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DbtScheduleRunInProgress) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DbtScheduleRunInProgress) GetStatus() DbtScheduleRunInProgressStatus {
	if o == nil {
		return DbtScheduleRunInProgressStatus("")
	}
	return o.Status
}

func (o *DbtScheduleRunInProgress) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *DbtScheduleRunInProgress) GetPhase() Phase {
	if o == nil {
		return Phase("")
	}
	return o.Phase
}

func (o *DbtScheduleRunInProgress) GetBuildIsTakingTooLong() bool {
	if o == nil {
		return false
	}
	return o.BuildIsTakingTooLong
}

func (o *DbtScheduleRunInProgress) GetPreviousRunDuration() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousRunDuration
}

func (o *DbtScheduleRunInProgress) GetPreviousRunStatus() *DbtRunStatus {
	if o == nil {
		return nil
	}
	return o.PreviousRunStatus
}

func (o *DbtScheduleRunInProgress) GetLastSuccessfulDbtBuildDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastSuccessfulDbtBuildDate
}
