// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionWorkdayReportType string

const (
	ConnectionWorkdayReportTypeWorkdayReport ConnectionWorkdayReportType = "WORKDAY_REPORT"
)

func (e ConnectionWorkdayReportType) ToPointer() *ConnectionWorkdayReportType {
	return &e
}

func (e *ConnectionWorkdayReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WORKDAY_REPORT":
		*e = ConnectionWorkdayReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionWorkdayReportType: %v", v)
	}
}

// ConnectionWorkdayReportStatus - The current status of the connection.
type ConnectionWorkdayReportStatus string

const (
	ConnectionWorkdayReportStatusUnknown     ConnectionWorkdayReportStatus = "UNKNOWN"
	ConnectionWorkdayReportStatusUp          ConnectionWorkdayReportStatus = "UP"
	ConnectionWorkdayReportStatusDown        ConnectionWorkdayReportStatus = "DOWN"
	ConnectionWorkdayReportStatusResize      ConnectionWorkdayReportStatus = "RESIZE"
	ConnectionWorkdayReportStatusMaintenance ConnectionWorkdayReportStatus = "MAINTENANCE"
	ConnectionWorkdayReportStatusQuota       ConnectionWorkdayReportStatus = "QUOTA"
	ConnectionWorkdayReportStatusCreating    ConnectionWorkdayReportStatus = "CREATING"
)

func (e ConnectionWorkdayReportStatus) ToPointer() *ConnectionWorkdayReportStatus {
	return &e
}

func (e *ConnectionWorkdayReportStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionWorkdayReportStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionWorkdayReportStatus: %v", v)
	}
}

type ConnectionWorkdayReport struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                      `json:"name"`
	Type ConnectionWorkdayReportType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionWorkdayReportStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	ReportURL  string    `json:"reportUrl"`
	Username   string    `json:"username"`
}

func (c ConnectionWorkdayReport) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionWorkdayReport) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionWorkdayReport) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionWorkdayReport) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionWorkdayReport) GetType() ConnectionWorkdayReportType {
	if o == nil {
		return ConnectionWorkdayReportType("")
	}
	return o.Type
}

func (o *ConnectionWorkdayReport) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionWorkdayReport) GetStatus() ConnectionWorkdayReportStatus {
	if o == nil {
		return ConnectionWorkdayReportStatus("")
	}
	return o.Status
}

func (o *ConnectionWorkdayReport) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionWorkdayReport) GetReportURL() string {
	if o == nil {
		return ""
	}
	return o.ReportURL
}

func (o *ConnectionWorkdayReport) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type ConnectionWorkdayReportInput struct {
	// The unique name of this connection.
	Name      string                      `json:"name"`
	Type      ConnectionWorkdayReportType `json:"type"`
	ReportURL string                      `json:"reportUrl"`
	Username  string                      `json:"username"`
	Password  string                      `json:"password"`
}

func (o *ConnectionWorkdayReportInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionWorkdayReportInput) GetType() ConnectionWorkdayReportType {
	if o == nil {
		return ConnectionWorkdayReportType("")
	}
	return o.Type
}

func (o *ConnectionWorkdayReportInput) GetReportURL() string {
	if o == nil {
		return ""
	}
	return o.ReportURL
}

func (o *ConnectionWorkdayReportInput) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionWorkdayReportInput) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}
