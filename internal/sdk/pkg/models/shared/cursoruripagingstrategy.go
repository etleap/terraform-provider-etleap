// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type CursorURIPagingStrategyType string

const (
	CursorURIPagingStrategyTypeCursorURI CursorURIPagingStrategyType = "CURSOR_URI"
)

func (e CursorURIPagingStrategyType) ToPointer() *CursorURIPagingStrategyType {
	return &e
}

func (e *CursorURIPagingStrategyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CURSOR_URI":
		*e = CursorURIPagingStrategyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CursorURIPagingStrategyType: %v", v)
	}
}

// CursorURIPagingStrategy - Paging strategy that uses a cursor to iterate through the results
type CursorURIPagingStrategy struct {
	// The name of the request parameter used to specify the page size.
	PageSizeFieldName string `json:"pageSizeFieldName"`
	// The maximum page size supported by the API.
	MaxPageSize int64                        `json:"maxPageSize"`
	Type        *CursorURIPagingStrategyType `default:"CURSOR_URI" json:"type"`
	// The path to the paging cursor inside the response body.
	PathToCursor string `json:"pathToCursor"`
	// String prepended to the paging cursor string to turn it into a URL, e.g. because the cursor only contains the URL path.
	URLPrefix string `json:"urlPrefix"`
}

func (c CursorURIPagingStrategy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CursorURIPagingStrategy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CursorURIPagingStrategy) GetPageSizeFieldName() string {
	if o == nil {
		return ""
	}
	return o.PageSizeFieldName
}

func (o *CursorURIPagingStrategy) GetMaxPageSize() int64 {
	if o == nil {
		return 0
	}
	return o.MaxPageSize
}

func (o *CursorURIPagingStrategy) GetType() *CursorURIPagingStrategyType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CursorURIPagingStrategy) GetPathToCursor() string {
	if o == nil {
		return ""
	}
	return o.PathToCursor
}

func (o *CursorURIPagingStrategy) GetURLPrefix() string {
	if o == nil {
		return ""
	}
	return o.URLPrefix
}
