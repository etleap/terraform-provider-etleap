// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TypeDecimalType string

const (
	TypeDecimalTypeDecimal TypeDecimalType = "DECIMAL"
)

func (e TypeDecimalType) ToPointer() *TypeDecimalType {
	return &e
}

func (e *TypeDecimalType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DECIMAL":
		*e = TypeDecimalType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeDecimalType: %v", v)
	}
}

type TypeDecimal struct {
	Scale     int64           `json:"scale"`
	Type      TypeDecimalType `json:"type"`
	Precision int64           `json:"precision"`
}

func (o *TypeDecimal) GetScale() int64 {
	if o == nil {
		return 0
	}
	return o.Scale
}

func (o *TypeDecimal) GetType() TypeDecimalType {
	if o == nil {
		return TypeDecimalType("")
	}
	return o.Type
}

func (o *TypeDecimal) GetPrecision() int64 {
	if o == nil {
		return 0
	}
	return o.Precision
}
