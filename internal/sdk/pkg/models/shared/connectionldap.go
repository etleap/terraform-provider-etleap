// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionLdapType string

const (
	ConnectionLdapTypeLdap ConnectionLdapType = "LDAP"
)

func (e ConnectionLdapType) ToPointer() *ConnectionLdapType {
	return &e
}

func (e *ConnectionLdapType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LDAP":
		*e = ConnectionLdapType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionLdapType: %v", v)
	}
}

// ConnectionLdapStatus - The current status of the connection.
type ConnectionLdapStatus string

const (
	ConnectionLdapStatusUnknown     ConnectionLdapStatus = "UNKNOWN"
	ConnectionLdapStatusUp          ConnectionLdapStatus = "UP"
	ConnectionLdapStatusDown        ConnectionLdapStatus = "DOWN"
	ConnectionLdapStatusResize      ConnectionLdapStatus = "RESIZE"
	ConnectionLdapStatusMaintenance ConnectionLdapStatus = "MAINTENANCE"
	ConnectionLdapStatusQuota       ConnectionLdapStatus = "QUOTA"
	ConnectionLdapStatusCreating    ConnectionLdapStatus = "CREATING"
)

func (e ConnectionLdapStatus) ToPointer() *ConnectionLdapStatus {
	return &e
}

func (e *ConnectionLdapStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionLdapStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionLdapStatus: %v", v)
	}
}

type ConnectionLdapDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionLdapDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionLdapDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionLdapDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionLdapDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionLdapDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionLdapDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionLdapDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

type ConnectionLdap struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string             `json:"name"`
	Type ConnectionLdapType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionLdapStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionLdapDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// LDAP server name or ip address
	Hostname string `json:"hostname"`
	Port     int64  `json:"port"`
	// Enable this if you are using a secure port to connect to LDAP. Usually, this should be enabled if you are connecting via port 636.
	UseSsl *bool `default:"false" json:"useSsl"`
	// The login string to use, similar to 'uid=admin,ou=system'
	User string `json:"user"`
	// The IANA-assigned number for your custom schema entities
	Pen int64 `json:"pen"`
	// The path of your DIT, typically a DC, OU, or O entry
	BaseDn string `json:"baseDn"`
}

func (c ConnectionLdap) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionLdap) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionLdap) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionLdap) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionLdap) GetType() ConnectionLdapType {
	if o == nil {
		return ConnectionLdapType("")
	}
	return o.Type
}

func (o *ConnectionLdap) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionLdap) GetStatus() ConnectionLdapStatus {
	if o == nil {
		return ConnectionLdapStatus("")
	}
	return o.Status
}

func (o *ConnectionLdap) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionLdap) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionLdap) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionLdap) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionLdap) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionLdap) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionLdap) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionLdap) GetDefaultUpdateSchedule() []ConnectionLdapDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionLdapDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionLdap) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *ConnectionLdap) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *ConnectionLdap) GetUseSsl() *bool {
	if o == nil {
		return nil
	}
	return o.UseSsl
}

func (o *ConnectionLdap) GetUser() string {
	if o == nil {
		return ""
	}
	return o.User
}

func (o *ConnectionLdap) GetPen() int64 {
	if o == nil {
		return 0
	}
	return o.Pen
}

func (o *ConnectionLdap) GetBaseDn() string {
	if o == nil {
		return ""
	}
	return o.BaseDn
}

type ConnectionLdapInput struct {
	// The unique name of this connection.
	Name string             `json:"name"`
	Type ConnectionLdapType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// LDAP server name or ip address
	Hostname string `json:"hostname"`
	Port     int64  `json:"port"`
	// Enable this if you are using a secure port to connect to LDAP. Usually, this should be enabled if you are connecting via port 636.
	UseSsl *bool `default:"false" json:"useSsl"`
	// The login string to use, similar to 'uid=admin,ou=system'
	User     string `json:"user"`
	Password string `json:"password"`
	// The IANA-assigned number for your custom schema entities
	Pen int64 `json:"pen"`
	// The path of your DIT, typically a DC, OU, or O entry
	BaseDn string `json:"baseDn"`
}

func (c ConnectionLdapInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionLdapInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionLdapInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionLdapInput) GetType() ConnectionLdapType {
	if o == nil {
		return ConnectionLdapType("")
	}
	return o.Type
}

func (o *ConnectionLdapInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionLdapInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionLdapInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionLdapInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionLdapInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionLdapInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionLdapInput) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *ConnectionLdapInput) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *ConnectionLdapInput) GetUseSsl() *bool {
	if o == nil {
		return nil
	}
	return o.UseSsl
}

func (o *ConnectionLdapInput) GetUser() string {
	if o == nil {
		return ""
	}
	return o.User
}

func (o *ConnectionLdapInput) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *ConnectionLdapInput) GetPen() int64 {
	if o == nil {
		return 0
	}
	return o.Pen
}

func (o *ConnectionLdapInput) GetBaseDn() string {
	if o == nil {
		return ""
	}
	return o.BaseDn
}
