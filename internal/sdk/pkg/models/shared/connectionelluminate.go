// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionElluminateType string

const (
	ConnectionElluminateTypeElluminate ConnectionElluminateType = "ELLUMINATE"
)

func (e ConnectionElluminateType) ToPointer() *ConnectionElluminateType {
	return &e
}

func (e *ConnectionElluminateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ELLUMINATE":
		*e = ConnectionElluminateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionElluminateType: %v", v)
	}
}

// ConnectionElluminateStatus - The current status of the connection.
type ConnectionElluminateStatus string

const (
	ConnectionElluminateStatusUnknown     ConnectionElluminateStatus = "UNKNOWN"
	ConnectionElluminateStatusUp          ConnectionElluminateStatus = "UP"
	ConnectionElluminateStatusDown        ConnectionElluminateStatus = "DOWN"
	ConnectionElluminateStatusResize      ConnectionElluminateStatus = "RESIZE"
	ConnectionElluminateStatusMaintenance ConnectionElluminateStatus = "MAINTENANCE"
	ConnectionElluminateStatusQuota       ConnectionElluminateStatus = "QUOTA"
	ConnectionElluminateStatusCreating    ConnectionElluminateStatus = "CREATING"
)

func (e ConnectionElluminateStatus) ToPointer() *ConnectionElluminateStatus {
	return &e
}

func (e *ConnectionElluminateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionElluminateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionElluminateStatus: %v", v)
	}
}

type ConnectionElluminateDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionElluminateDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionElluminateDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionElluminateDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionElluminateDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionElluminateDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionElluminateDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionElluminateDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

type ConnectionElluminate struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                   `json:"name"`
	Type ConnectionElluminateType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionElluminateStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionElluminateDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Your Elluminate URL.
	BaseURL string `json:"baseUrl"`
	// Your Elluminate API key
	APIKey string `json:"apiKey"`
}

func (c ConnectionElluminate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionElluminate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionElluminate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionElluminate) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionElluminate) GetType() ConnectionElluminateType {
	if o == nil {
		return ConnectionElluminateType("")
	}
	return o.Type
}

func (o *ConnectionElluminate) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionElluminate) GetStatus() ConnectionElluminateStatus {
	if o == nil {
		return ConnectionElluminateStatus("")
	}
	return o.Status
}

func (o *ConnectionElluminate) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionElluminate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionElluminate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionElluminate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionElluminate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionElluminate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionElluminate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionElluminate) GetDefaultUpdateSchedule() []ConnectionElluminateDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionElluminateDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionElluminate) GetBaseURL() string {
	if o == nil {
		return ""
	}
	return o.BaseURL
}

func (o *ConnectionElluminate) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

type ConnectionElluminateInput struct {
	// The unique name of this connection.
	Name string                   `json:"name"`
	Type ConnectionElluminateType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Your Elluminate URL.
	BaseURL string `json:"baseUrl"`
	// Your Elluminate API key
	APIKey string `json:"apiKey"`
	// Your Elluminate API secret
	APISecret string `json:"apiSecret"`
}

func (o *ConnectionElluminateInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionElluminateInput) GetType() ConnectionElluminateType {
	if o == nil {
		return ConnectionElluminateType("")
	}
	return o.Type
}

func (o *ConnectionElluminateInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionElluminateInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionElluminateInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionElluminateInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionElluminateInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionElluminateInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionElluminateInput) GetBaseURL() string {
	if o == nil {
		return ""
	}
	return o.BaseURL
}

func (o *ConnectionElluminateInput) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *ConnectionElluminateInput) GetAPISecret() string {
	if o == nil {
		return ""
	}
	return o.APISecret
}
