// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type BooleanTypeType string

const (
	BooleanTypeTypeBoolean BooleanTypeType = "BOOLEAN"
)

func (e BooleanTypeType) ToPointer() *BooleanTypeType {
	return &e
}

func (e *BooleanTypeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOOLEAN":
		*e = BooleanTypeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BooleanTypeType: %v", v)
	}
}

type BooleanType struct {
	Type *BooleanTypeType `default:"BOOLEAN" json:"type"`
}

func (b BooleanType) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BooleanType) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *BooleanType) GetType() *BooleanTypeType {
	if o == nil {
		return nil
	}
	return o.Type
}
