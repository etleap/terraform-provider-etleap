// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionRedshiftUpdateType string

const (
	ConnectionRedshiftUpdateTypeRedshift ConnectionRedshiftUpdateType = "REDSHIFT"
)

func (e ConnectionRedshiftUpdateType) ToPointer() *ConnectionRedshiftUpdateType {
	return &e
}

func (e *ConnectionRedshiftUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REDSHIFT":
		*e = ConnectionRedshiftUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionRedshiftUpdateType: %v", v)
	}
}

type ConnectionRedshiftUpdateSSHConfigurationUpdate struct {
	// The server address for the SSH connection.
	Address *string `json:"address,omitempty"`
	// The username for the SSH connection.
	Username *string `json:"username,omitempty"`
}

func (o *ConnectionRedshiftUpdateSSHConfigurationUpdate) GetAddress() *string {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *ConnectionRedshiftUpdateSSHConfigurationUpdate) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// ConnectionRedshiftUpdate - Specifies the location of a database.
type ConnectionRedshiftUpdate struct {
	// The unique name of this connection.
	Name *string                      `json:"name,omitempty"`
	Type ConnectionRedshiftUpdateType `json:"type"`
	// Whether this connection should be marked as active.
	Active *bool `json:"active,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// If not specified, the default schema will be used.
	Schema *string `json:"schema,omitempty"`
	// When Etleap creates Redshift tables, SELECT privileges will be granted to user groups specified here.
	UserGroups []string `json:"userGroups,omitempty"`
	// Are you going to use this connection only as a source for pipelines? When `true`, this connection will only be available as an ETL source only, and Etleap will skip the creation of an audit table in the database.
	SourceOnly *bool `json:"sourceOnly,omitempty"`
	// Should Etleap prefix each load query with metadata? More info can be found <a href="https://docs.etleap.com/docs/documentation/ba7744fcf6114-redshift-optional-connection-settings#include-query-tags">here</a>.
	QueryTagsEnabled *bool `json:"queryTagsEnabled,omitempty"`
	// The id of another Etleap Redshift connection. If specified, Etleap will make the data loaded available to the other cluster via Redshift Data Sharing.
	DataSharingDestinations []string `json:"dataSharingDestinations,omitempty"`
	// Etleap will create VARCHAR columns with the minimal required width based on the data it's loading, and expand the column width as required. This can improve performance but there are <a target="_blank" href="https://docs.etleap.com/docs/documentation/ba7744fcf6114-redshift-optional-connection-settings#enable-dynamic-varchar-widths">some limitations</a>. Note: if set to `true`, it can't later be updated to `false`.
	DynamicVarcharWidthEnabled *bool                                           `json:"dynamicVarcharWidthEnabled,omitempty"`
	Address                    *string                                         `json:"address,omitempty"`
	Port                       *int64                                          `json:"port,omitempty"`
	Database                   *string                                         `json:"database,omitempty"`
	Username                   *string                                         `json:"username,omitempty"`
	Password                   *string                                         `json:"password,omitempty"`
	SSHConfig                  *ConnectionRedshiftUpdateSSHConfigurationUpdate `json:"sshConfig,omitempty"`
}

func (o *ConnectionRedshiftUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionRedshiftUpdate) GetType() ConnectionRedshiftUpdateType {
	if o == nil {
		return ConnectionRedshiftUpdateType("")
	}
	return o.Type
}

func (o *ConnectionRedshiftUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionRedshiftUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionRedshiftUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionRedshiftUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionRedshiftUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionRedshiftUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionRedshiftUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionRedshiftUpdate) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionRedshiftUpdate) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *ConnectionRedshiftUpdate) GetSourceOnly() *bool {
	if o == nil {
		return nil
	}
	return o.SourceOnly
}

func (o *ConnectionRedshiftUpdate) GetQueryTagsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.QueryTagsEnabled
}

func (o *ConnectionRedshiftUpdate) GetDataSharingDestinations() []string {
	if o == nil {
		return nil
	}
	return o.DataSharingDestinations
}

func (o *ConnectionRedshiftUpdate) GetDynamicVarcharWidthEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.DynamicVarcharWidthEnabled
}

func (o *ConnectionRedshiftUpdate) GetAddress() *string {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *ConnectionRedshiftUpdate) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *ConnectionRedshiftUpdate) GetDatabase() *string {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *ConnectionRedshiftUpdate) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *ConnectionRedshiftUpdate) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *ConnectionRedshiftUpdate) GetSSHConfig() *ConnectionRedshiftUpdateSSHConfigurationUpdate {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}
