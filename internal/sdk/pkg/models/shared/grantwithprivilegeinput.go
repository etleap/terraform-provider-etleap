// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type GrantWithPrivilegeInputType string

const (
	GrantWithPrivilegeInputTypeUser GrantWithPrivilegeInputType = "USER"
	GrantWithPrivilegeInputTypeTeam GrantWithPrivilegeInputType = "TEAM"
)

// GrantWithPrivilegeInput - An access grant with privilege to an object in Etleap. A grant can provide access for a user or a team.
type GrantWithPrivilegeInput struct {
	GrantWithPrivilegeUserInput *GrantWithPrivilegeUserInput
	GrantWithPrivilegeTeamInput *GrantWithPrivilegeTeamInput

	Type GrantWithPrivilegeInputType
}

func CreateGrantWithPrivilegeInputUser(user GrantWithPrivilegeUserInput) GrantWithPrivilegeInput {
	typ := GrantWithPrivilegeInputTypeUser

	typStr := GrantWithPrivilegeUserType(typ)
	user.Type = typStr

	return GrantWithPrivilegeInput{
		GrantWithPrivilegeUserInput: &user,
		Type:                        typ,
	}
}

func CreateGrantWithPrivilegeInputTeam(team GrantWithPrivilegeTeamInput) GrantWithPrivilegeInput {
	typ := GrantWithPrivilegeInputTypeTeam

	typStr := GrantWithPrivilegeTeamType(typ)
	team.Type = typStr

	return GrantWithPrivilegeInput{
		GrantWithPrivilegeTeamInput: &team,
		Type:                        typ,
	}
}

func (u *GrantWithPrivilegeInput) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "USER":
		grantWithPrivilegeUserInput := new(GrantWithPrivilegeUserInput)
		if err := utils.UnmarshalJSON(data, &grantWithPrivilegeUserInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GrantWithPrivilegeUserInput = grantWithPrivilegeUserInput
		u.Type = GrantWithPrivilegeInputTypeUser
		return nil
	case "TEAM":
		grantWithPrivilegeTeamInput := new(GrantWithPrivilegeTeamInput)
		if err := utils.UnmarshalJSON(data, &grantWithPrivilegeTeamInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GrantWithPrivilegeTeamInput = grantWithPrivilegeTeamInput
		u.Type = GrantWithPrivilegeInputTypeTeam
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GrantWithPrivilegeInput) MarshalJSON() ([]byte, error) {
	if u.GrantWithPrivilegeUserInput != nil {
		return utils.MarshalJSON(u.GrantWithPrivilegeUserInput, "", true)
	}

	if u.GrantWithPrivilegeTeamInput != nil {
		return utils.MarshalJSON(u.GrantWithPrivilegeTeamInput, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
