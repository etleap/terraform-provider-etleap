// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionSkywardType string

const (
	ConnectionSkywardTypeSkyward ConnectionSkywardType = "SKYWARD"
)

func (e ConnectionSkywardType) ToPointer() *ConnectionSkywardType {
	return &e
}

func (e *ConnectionSkywardType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SKYWARD":
		*e = ConnectionSkywardType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSkywardType: %v", v)
	}
}

// ConnectionSkywardStatus - The current status of the connection.
type ConnectionSkywardStatus string

const (
	ConnectionSkywardStatusUnknown     ConnectionSkywardStatus = "UNKNOWN"
	ConnectionSkywardStatusUp          ConnectionSkywardStatus = "UP"
	ConnectionSkywardStatusDown        ConnectionSkywardStatus = "DOWN"
	ConnectionSkywardStatusResize      ConnectionSkywardStatus = "RESIZE"
	ConnectionSkywardStatusMaintenance ConnectionSkywardStatus = "MAINTENANCE"
	ConnectionSkywardStatusQuota       ConnectionSkywardStatus = "QUOTA"
	ConnectionSkywardStatusCreating    ConnectionSkywardStatus = "CREATING"
)

func (e ConnectionSkywardStatus) ToPointer() *ConnectionSkywardStatus {
	return &e
}

func (e *ConnectionSkywardStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionSkywardStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSkywardStatus: %v", v)
	}
}

type ConnectionSkyward struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                `json:"name"`
	Type ConnectionSkywardType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionSkywardStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	ClientID   string    `json:"clientId"`
}

func (c ConnectionSkyward) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSkyward) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSkyward) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionSkyward) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSkyward) GetType() ConnectionSkywardType {
	if o == nil {
		return ConnectionSkywardType("")
	}
	return o.Type
}

func (o *ConnectionSkyward) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionSkyward) GetStatus() ConnectionSkywardStatus {
	if o == nil {
		return ConnectionSkywardStatus("")
	}
	return o.Status
}

func (o *ConnectionSkyward) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionSkyward) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

type ConnectionSkywardInput struct {
	// The unique name of this connection.
	Name         string                `json:"name"`
	Type         ConnectionSkywardType `json:"type"`
	ClientID     string                `json:"clientId"`
	ClientSecret string                `json:"clientSecret"`
}

func (o *ConnectionSkywardInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSkywardInput) GetType() ConnectionSkywardType {
	if o == nil {
		return ConnectionSkywardType("")
	}
	return o.Type
}

func (o *ConnectionSkywardInput) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ConnectionSkywardInput) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}
