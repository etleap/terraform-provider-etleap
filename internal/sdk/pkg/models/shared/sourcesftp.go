// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/types"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type SourceSftpType string

const (
	SourceSftpTypeSftp SourceSftpType = "SFTP"
)

func (e SourceSftpType) ToPointer() *SourceSftpType {
	return &e
}

func (e *SourceSftpType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SFTP":
		*e = SourceSftpType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSftpType: %v", v)
	}
}

// SourceSftpNewFileBehavior - Specifies whether new files update, add to or replace existing files. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjI0NTQwNzI2-create-a-file-based-pipeline#update-method">the documentation</a> for more details.
type SourceSftpNewFileBehavior string

const (
	SourceSftpNewFileBehaviorUpdate  SourceSftpNewFileBehavior = "UPDATE"
	SourceSftpNewFileBehaviorAppend  SourceSftpNewFileBehavior = "APPEND"
	SourceSftpNewFileBehaviorReplace SourceSftpNewFileBehavior = "REPLACE"
)

func (e SourceSftpNewFileBehavior) ToPointer() *SourceSftpNewFileBehavior {
	return &e
}

func (e *SourceSftpNewFileBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UPDATE":
		fallthrough
	case "APPEND":
		fallthrough
	case "REPLACE":
		*e = SourceSftpNewFileBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSftpNewFileBehavior: %v", v)
	}
}

type SourceSftp struct {
	// The universally unique identifier for the source.
	ConnectionID string         `json:"connectionId"`
	Type         SourceSftpType `json:"type"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// Specifies whether new files update, add to or replace existing files. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjI0NTQwNzI2-create-a-file-based-pipeline#update-method">the documentation</a> for more details.
	NewFileBehavior SourceSftpNewFileBehavior `json:"newFileBehavior"`
	// Regular expression matching the names of the files to be processed by this pipeline. A single value for `paths` is required when `fileNameFilter` is specified.
	FileNameFilter *string `json:"fileNameFilter,omitempty"`
	// Timestamp of the earliest modified file that should be processed by the pipeline. Only the files modified after this timestamp will be processed. Format of the timestamp: 'yyyy-MM-dd'.
	LowWatermark *types.Date `json:"lowWatermark,omitempty"`
	// File or folder paths for the files to be extracted from the source. In the case when `fileNameFilter` is specified exactly one folder path must be given here. `paths` can't be used when a `globPattern` is specified.
	Paths []string `json:"paths,omitempty"`
	// A glob pattern to be used as a path. Either `globPattern` or `paths` must be specified, but not both.
	GlobPattern *string `json:"globPattern,omitempty"`
}

func (s SourceSftp) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSftp) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSftp) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceSftp) GetType() SourceSftpType {
	if o == nil {
		return SourceSftpType("")
	}
	return o.Type
}

func (o *SourceSftp) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceSftp) GetNewFileBehavior() SourceSftpNewFileBehavior {
	if o == nil {
		return SourceSftpNewFileBehavior("")
	}
	return o.NewFileBehavior
}

func (o *SourceSftp) GetFileNameFilter() *string {
	if o == nil {
		return nil
	}
	return o.FileNameFilter
}

func (o *SourceSftp) GetLowWatermark() *types.Date {
	if o == nil {
		return nil
	}
	return o.LowWatermark
}

func (o *SourceSftp) GetPaths() []string {
	if o == nil {
		return nil
	}
	return o.Paths
}

func (o *SourceSftp) GetGlobPattern() *string {
	if o == nil {
		return nil
	}
	return o.GlobPattern
}
