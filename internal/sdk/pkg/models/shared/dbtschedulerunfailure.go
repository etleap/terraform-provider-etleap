// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type DbtScheduleRunFailureStatus string

const (
	DbtScheduleRunFailureStatusIngestCouldNotComplete DbtScheduleRunFailureStatus = "INGEST_COULD_NOT_COMPLETE"
	DbtScheduleRunFailureStatusDbtError               DbtScheduleRunFailureStatus = "DBT_ERROR"
)

func (e DbtScheduleRunFailureStatus) ToPointer() *DbtScheduleRunFailureStatus {
	return &e
}

func (e *DbtScheduleRunFailureStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INGEST_COULD_NOT_COMPLETE":
		fallthrough
	case "DBT_ERROR":
		*e = DbtScheduleRunFailureStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DbtScheduleRunFailureStatus: %v", v)
	}
}

type DbtScheduleRunFailure struct {
	Status DbtScheduleRunFailureStatus `json:"status"`
	// The time that this dbt run was triggered.
	StartDate time.Time `json:"startDate"`
	// The duration, in seconds, between the time this dbt run was triggered and the time the dbt build for this run completed.
	Duration int64 `json:"duration"`
	// Timestamp for the next dbt schedule trigger.
	NextTriggerDate time.Time `json:"nextTriggerDate"`
	// The last time that a successful dbt build finished.
	LastSuccessfulDbtBuildDate *time.Time `json:"lastSuccessfulDbtBuildDate,omitempty"`
}

func (d DbtScheduleRunFailure) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DbtScheduleRunFailure) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DbtScheduleRunFailure) GetStatus() DbtScheduleRunFailureStatus {
	if o == nil {
		return DbtScheduleRunFailureStatus("")
	}
	return o.Status
}

func (o *DbtScheduleRunFailure) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *DbtScheduleRunFailure) GetDuration() int64 {
	if o == nil {
		return 0
	}
	return o.Duration
}

func (o *DbtScheduleRunFailure) GetNextTriggerDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.NextTriggerDate
}

func (o *DbtScheduleRunFailure) GetLastSuccessfulDbtBuildDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastSuccessfulDbtBuildDate
}
