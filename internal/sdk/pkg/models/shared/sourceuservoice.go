// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceUserVoiceType string

const (
	SourceUserVoiceTypeUservoice SourceUserVoiceType = "USERVOICE"
)

func (e SourceUserVoiceType) ToPointer() *SourceUserVoiceType {
	return &e
}

func (e *SourceUserVoiceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USERVOICE":
		*e = SourceUserVoiceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceUserVoiceType: %v", v)
	}
}

type SourceUserVoice struct {
	Type SourceUserVoiceType `json:"type"`
	// The universally unique identifier for the source.
	ConnectionID string `json:"connectionId"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// The UserVoice entity. Example values: [Category, Comment, Feature, Feature Status, Feedback Record, Forum, Forum Invitation, Internal Status, Label, NPS Rating, Note, Permission, Product Area, Score, Segment, Segmented Values, Status, Status Updates, Suggestion, Suggestion Activity Entry, Supporter, Supporter Message, Team, User, VSTS Work Item]
	Entity string `json:"entity"`
}

func (o *SourceUserVoice) GetType() SourceUserVoiceType {
	if o == nil {
		return SourceUserVoiceType("")
	}
	return o.Type
}

func (o *SourceUserVoice) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceUserVoice) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceUserVoice) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}
