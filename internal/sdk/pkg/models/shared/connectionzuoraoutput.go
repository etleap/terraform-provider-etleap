// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionZuoraStatus - The current status of the connection.
type ConnectionZuoraStatus string

const (
	ConnectionZuoraStatusUnknown     ConnectionZuoraStatus = "UNKNOWN"
	ConnectionZuoraStatusUp          ConnectionZuoraStatus = "UP"
	ConnectionZuoraStatusDown        ConnectionZuoraStatus = "DOWN"
	ConnectionZuoraStatusResize      ConnectionZuoraStatus = "RESIZE"
	ConnectionZuoraStatusMaintenance ConnectionZuoraStatus = "MAINTENANCE"
	ConnectionZuoraStatusQuota       ConnectionZuoraStatus = "QUOTA"
	ConnectionZuoraStatusCreating    ConnectionZuoraStatus = "CREATING"
)

func (e ConnectionZuoraStatus) ToPointer() *ConnectionZuoraStatus {
	return &e
}

func (e *ConnectionZuoraStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionZuoraStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionZuoraStatus: %v", v)
	}
}

type ConnectionZuoraDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionZuoraDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionZuoraDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionZuoraDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionZuoraDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionZuoraDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionZuoraDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionZuoraDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionZuoraType string

const (
	ConnectionZuoraTypeZuora ConnectionZuoraType = "ZUORA"
)

func (e ConnectionZuoraType) ToPointer() *ConnectionZuoraType {
	return &e
}

func (e *ConnectionZuoraType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ZUORA":
		*e = ConnectionZuoraType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionZuoraType: %v", v)
	}
}

type ConnectionZuoraOutput struct {
	// The current status of the connection.
	Status ConnectionZuoraStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionZuoraDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool                `json:"active"`
	Type   ConnectionZuoraType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Leave blank unless you have been assigned a specific endpoint, e.g. services42.zuora.com. Setting this overrides the 'Endpoint' and 'Sandbox' settings above.
	EndpointHostname *string `json:"endpointHostname,omitempty"`
	// The endpoint region.
	Endpoint string `json:"endpoint"`
	// The Client ID displayed when you created the OAuth client. If you need help to create an OAuth Client, <a target="_blank" href="https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/Manage_Users#Create_an_OAuth_Client_for_a_User">follow this article</a>.
	ClientID string `json:"clientId"`
	// Whether this is a sandbox account.
	Sandbox bool `json:"sandbox"`
}

func (c ConnectionZuoraOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionZuoraOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionZuoraOutput) GetStatus() ConnectionZuoraStatus {
	if o == nil {
		return ConnectionZuoraStatus("")
	}
	return o.Status
}

func (o *ConnectionZuoraOutput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionZuoraOutput) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionZuoraOutput) GetDefaultUpdateSchedule() []ConnectionZuoraDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionZuoraDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionZuoraOutput) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionZuoraOutput) GetType() ConnectionZuoraType {
	if o == nil {
		return ConnectionZuoraType("")
	}
	return o.Type
}

func (o *ConnectionZuoraOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionZuoraOutput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionZuoraOutput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionZuoraOutput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionZuoraOutput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionZuoraOutput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionZuoraOutput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionZuoraOutput) GetEndpointHostname() *string {
	if o == nil {
		return nil
	}
	return o.EndpointHostname
}

func (o *ConnectionZuoraOutput) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *ConnectionZuoraOutput) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ConnectionZuoraOutput) GetSandbox() bool {
	if o == nil {
		return false
	}
	return o.Sandbox
}

type ConnectionZuora struct {
	// The unique name of this connection.
	Name string              `json:"name"`
	Type ConnectionZuoraType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Leave blank unless you have been assigned a specific endpoint, e.g. services42.zuora.com. Setting this overrides the 'Endpoint' and 'Sandbox' settings above.
	EndpointHostname *string `json:"endpointHostname,omitempty"`
	ClientSecret     string  `json:"clientSecret"`
	// The endpoint region.
	Endpoint string `json:"endpoint"`
	// The Client ID displayed when you created the OAuth client. If you need help to create an OAuth Client, <a target="_blank" href="https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/Manage_Users#Create_an_OAuth_Client_for_a_User">follow this article</a>.
	ClientID string `json:"clientId"`
	// Whether this is a sandbox account.
	Sandbox bool `json:"sandbox"`
}

func (o *ConnectionZuora) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionZuora) GetType() ConnectionZuoraType {
	if o == nil {
		return ConnectionZuoraType("")
	}
	return o.Type
}

func (o *ConnectionZuora) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionZuora) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionZuora) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionZuora) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionZuora) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionZuora) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionZuora) GetEndpointHostname() *string {
	if o == nil {
		return nil
	}
	return o.EndpointHostname
}

func (o *ConnectionZuora) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *ConnectionZuora) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *ConnectionZuora) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ConnectionZuora) GetSandbox() bool {
	if o == nil {
		return false
	}
	return o.Sandbox
}
