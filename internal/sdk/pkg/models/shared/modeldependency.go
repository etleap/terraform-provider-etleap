// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ModelDependencyType string

const (
	ModelDependencyTypePipeline ModelDependencyType = "PIPELINE"
	ModelDependencyTypeModel    ModelDependencyType = "MODEL"
)

func (e ModelDependencyType) ToPointer() *ModelDependencyType {
	return &e
}

func (e *ModelDependencyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PIPELINE":
		fallthrough
	case "MODEL":
		*e = ModelDependencyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModelDependencyType: %v", v)
	}
}

// ModelDependency - <!-- theme: warning -->
// > This feature is currently in Beta which means that it is subject to non-backwards-compatible and breaking changes.
type ModelDependency struct {
	Type ModelDependencyType `json:"type"`
	// The unique identifier of the pipeline or model.
	ID string `json:"id"`
	// The name of the pipeline or model.
	Name string `json:"name"`
}

func (o *ModelDependency) GetType() ModelDependencyType {
	if o == nil {
		return ModelDependencyType("")
	}
	return o.Type
}

func (o *ModelDependency) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ModelDependency) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}
