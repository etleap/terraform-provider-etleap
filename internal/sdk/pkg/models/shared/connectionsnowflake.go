// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionSnowflakeType string

const (
	ConnectionSnowflakeTypeSnowflake ConnectionSnowflakeType = "SNOWFLAKE"
)

func (e ConnectionSnowflakeType) ToPointer() *ConnectionSnowflakeType {
	return &e
}

func (e *ConnectionSnowflakeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SNOWFLAKE":
		*e = ConnectionSnowflakeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSnowflakeType: %v", v)
	}
}

// ConnectionSnowflakeStatus - The current status of the connection.
type ConnectionSnowflakeStatus string

const (
	ConnectionSnowflakeStatusUnknown     ConnectionSnowflakeStatus = "UNKNOWN"
	ConnectionSnowflakeStatusUp          ConnectionSnowflakeStatus = "UP"
	ConnectionSnowflakeStatusDown        ConnectionSnowflakeStatus = "DOWN"
	ConnectionSnowflakeStatusResize      ConnectionSnowflakeStatus = "RESIZE"
	ConnectionSnowflakeStatusMaintenance ConnectionSnowflakeStatus = "MAINTENANCE"
	ConnectionSnowflakeStatusQuota       ConnectionSnowflakeStatus = "QUOTA"
	ConnectionSnowflakeStatusCreating    ConnectionSnowflakeStatus = "CREATING"
)

func (e ConnectionSnowflakeStatus) ToPointer() *ConnectionSnowflakeStatus {
	return &e
}

func (e *ConnectionSnowflakeStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionSnowflakeStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSnowflakeStatus: %v", v)
	}
}

type ConnectionSnowflake struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionSnowflakeType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionSnowflakeStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// Take into account that the schema is case sensitive
	Schema string `json:"schema"`
	// When Etleap creates Snowflake tables, SELECT privileges will be granted to roles specified here. Take into account that the roles are case sensitive.
	Roles []string `json:"roles,omitempty"`
	// Are you going to use this connection only as a source for pipelines? When `true`, this connection will only be available as an ETL source only, and Etleap will skip the creation of an audit table in the database.
	SourceOnly *bool  `default:"false" json:"sourceOnly"`
	Address    string `json:"address"`
	Database   string `json:"database"`
	// The virtual warehouse to use once connected.
	Warehouse string `json:"warehouse"`
	Username  string `json:"username"`
	// The role the user will use to connect
	Role *string `json:"role,omitempty"`
}

func (c ConnectionSnowflake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSnowflake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSnowflake) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionSnowflake) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSnowflake) GetType() ConnectionSnowflakeType {
	if o == nil {
		return ConnectionSnowflakeType("")
	}
	return o.Type
}

func (o *ConnectionSnowflake) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionSnowflake) GetStatus() ConnectionSnowflakeStatus {
	if o == nil {
		return ConnectionSnowflakeStatus("")
	}
	return o.Status
}

func (o *ConnectionSnowflake) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionSnowflake) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *ConnectionSnowflake) GetRoles() []string {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *ConnectionSnowflake) GetSourceOnly() *bool {
	if o == nil {
		return nil
	}
	return o.SourceOnly
}

func (o *ConnectionSnowflake) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionSnowflake) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *ConnectionSnowflake) GetWarehouse() string {
	if o == nil {
		return ""
	}
	return o.Warehouse
}

func (o *ConnectionSnowflake) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionSnowflake) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

type ConnectionSnowflakeInput struct {
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionSnowflakeType `json:"type"`
	// Take into account that the schema is case sensitive
	Schema string `json:"schema"`
	// When Etleap creates Snowflake tables, SELECT privileges will be granted to roles specified here. Take into account that the roles are case sensitive.
	Roles []string `json:"roles,omitempty"`
	// Are you going to use this connection only as a source for pipelines? When `true`, this connection will only be available as an ETL source only, and Etleap will skip the creation of an audit table in the database.
	SourceOnly *bool  `default:"false" json:"sourceOnly"`
	Address    string `json:"address"`
	Database   string `json:"database"`
	// The virtual warehouse to use once connected.
	Warehouse string `json:"warehouse"`
	Username  string `json:"username"`
	Password  string `json:"password"`
	// The role the user will use to connect
	Role *string `json:"role,omitempty"`
}

func (c ConnectionSnowflakeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSnowflakeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSnowflakeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSnowflakeInput) GetType() ConnectionSnowflakeType {
	if o == nil {
		return ConnectionSnowflakeType("")
	}
	return o.Type
}

func (o *ConnectionSnowflakeInput) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *ConnectionSnowflakeInput) GetRoles() []string {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *ConnectionSnowflakeInput) GetSourceOnly() *bool {
	if o == nil {
		return nil
	}
	return o.SourceOnly
}

func (o *ConnectionSnowflakeInput) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionSnowflakeInput) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *ConnectionSnowflakeInput) GetWarehouse() string {
	if o == nil {
		return ""
	}
	return o.Warehouse
}

func (o *ConnectionSnowflakeInput) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionSnowflakeInput) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *ConnectionSnowflakeInput) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}
