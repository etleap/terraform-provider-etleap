// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionGoogleAnalyticsGa4Type string

const (
	ConnectionGoogleAnalyticsGa4TypeGoogleAnalyticsGa4 ConnectionGoogleAnalyticsGa4Type = "GOOGLE_ANALYTICS_GA4"
)

func (e ConnectionGoogleAnalyticsGa4Type) ToPointer() *ConnectionGoogleAnalyticsGa4Type {
	return &e
}

func (e *ConnectionGoogleAnalyticsGa4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GOOGLE_ANALYTICS_GA4":
		*e = ConnectionGoogleAnalyticsGa4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionGoogleAnalyticsGa4Type: %v", v)
	}
}

// ConnectionGoogleAnalyticsGa4Status - The current status of the connection.
type ConnectionGoogleAnalyticsGa4Status string

const (
	ConnectionGoogleAnalyticsGa4StatusUnknown     ConnectionGoogleAnalyticsGa4Status = "UNKNOWN"
	ConnectionGoogleAnalyticsGa4StatusUp          ConnectionGoogleAnalyticsGa4Status = "UP"
	ConnectionGoogleAnalyticsGa4StatusDown        ConnectionGoogleAnalyticsGa4Status = "DOWN"
	ConnectionGoogleAnalyticsGa4StatusResize      ConnectionGoogleAnalyticsGa4Status = "RESIZE"
	ConnectionGoogleAnalyticsGa4StatusMaintenance ConnectionGoogleAnalyticsGa4Status = "MAINTENANCE"
	ConnectionGoogleAnalyticsGa4StatusQuota       ConnectionGoogleAnalyticsGa4Status = "QUOTA"
	ConnectionGoogleAnalyticsGa4StatusCreating    ConnectionGoogleAnalyticsGa4Status = "CREATING"
)

func (e ConnectionGoogleAnalyticsGa4Status) ToPointer() *ConnectionGoogleAnalyticsGa4Status {
	return &e
}

func (e *ConnectionGoogleAnalyticsGa4Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionGoogleAnalyticsGa4Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionGoogleAnalyticsGa4Status: %v", v)
	}
}

type ConnectionGoogleAnalyticsGa4 struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                           `json:"name"`
	Type ConnectionGoogleAnalyticsGa4Type `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionGoogleAnalyticsGa4Status `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
}

func (c ConnectionGoogleAnalyticsGa4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionGoogleAnalyticsGa4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionGoogleAnalyticsGa4) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionGoogleAnalyticsGa4) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionGoogleAnalyticsGa4) GetType() ConnectionGoogleAnalyticsGa4Type {
	if o == nil {
		return ConnectionGoogleAnalyticsGa4Type("")
	}
	return o.Type
}

func (o *ConnectionGoogleAnalyticsGa4) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionGoogleAnalyticsGa4) GetStatus() ConnectionGoogleAnalyticsGa4Status {
	if o == nil {
		return ConnectionGoogleAnalyticsGa4Status("")
	}
	return o.Status
}

func (o *ConnectionGoogleAnalyticsGa4) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

type ConnectionGoogleAnalyticsGa4Input struct {
	// The unique name of this connection.
	Name string                           `json:"name"`
	Type ConnectionGoogleAnalyticsGa4Type `json:"type"`
	// Code retrieved from `/connections/oauth2-initiation`. **Note:** it is short-lived, therefore the connection creation should be done as soon as code is returned.
	Code string `json:"code"`
}

func (o *ConnectionGoogleAnalyticsGa4Input) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionGoogleAnalyticsGa4Input) GetType() ConnectionGoogleAnalyticsGa4Type {
	if o == nil {
		return ConnectionGoogleAnalyticsGa4Type("")
	}
	return o.Type
}

func (o *ConnectionGoogleAnalyticsGa4Input) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}
