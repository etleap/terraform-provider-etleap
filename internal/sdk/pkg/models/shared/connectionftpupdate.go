// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionFtpUpdateType string

const (
	ConnectionFtpUpdateTypeFtp ConnectionFtpUpdateType = "FTP"
)

func (e ConnectionFtpUpdateType) ToPointer() *ConnectionFtpUpdateType {
	return &e
}

func (e *ConnectionFtpUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FTP":
		*e = ConnectionFtpUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionFtpUpdateType: %v", v)
	}
}

type ConnectionFtpUpdate struct {
	// Whether this connection should be marked as active.
	Active *bool                    `json:"active,omitempty"`
	Type   *ConnectionFtpUpdateType `json:"type"`
	// The unique name of this connection.
	Name *string `json:"name,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	Username       *string              `json:"username,omitempty"`
	// E.g. 'ftp.etleap.com' or '10.0.0.2'.
	Hostname    *string `json:"hostname,omitempty"`
	PassiveMode *bool   `json:"passiveMode,omitempty"`
	Password    *string `json:"password,omitempty"`
	Port        *int64  `json:"port,omitempty"`
}

func (o *ConnectionFtpUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionFtpUpdate) GetType() *ConnectionFtpUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConnectionFtpUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionFtpUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionFtpUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionFtpUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionFtpUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionFtpUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionFtpUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionFtpUpdate) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *ConnectionFtpUpdate) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *ConnectionFtpUpdate) GetPassiveMode() *bool {
	if o == nil {
		return nil
	}
	return o.PassiveMode
}

func (o *ConnectionFtpUpdate) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *ConnectionFtpUpdate) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}
