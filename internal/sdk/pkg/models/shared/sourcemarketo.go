// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceMarketoType string

const (
	SourceMarketoTypeMarketo SourceMarketoType = "MARKETO"
)

func (e SourceMarketoType) ToPointer() *SourceMarketoType {
	return &e
}

func (e *SourceMarketoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MARKETO":
		*e = SourceMarketoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMarketoType: %v", v)
	}
}

type SourceMarketo struct {
	// The universally unique identifier for the source.
	ConnectionID string            `json:"connectionId"`
	Type         SourceMarketoType `json:"type"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// The Marketo entity type. Example values: [Leads, Activities, Campaigns, Programs, Tags]
	Entity string `json:"entity"`
	// Specify `activityTypes` if and only if the entity is 'Activities'
	ActivityTypes []string `json:"activityTypes,omitempty"`
}

func (o *SourceMarketo) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceMarketo) GetType() SourceMarketoType {
	if o == nil {
		return SourceMarketoType("")
	}
	return o.Type
}

func (o *SourceMarketo) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceMarketo) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}

func (o *SourceMarketo) GetActivityTypes() []string {
	if o == nil {
		return nil
	}
	return o.ActivityTypes
}
