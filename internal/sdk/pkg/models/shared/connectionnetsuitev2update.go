// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionNetsuiteV2UpdateType string

const (
	ConnectionNetsuiteV2UpdateTypeNetsuiteV2 ConnectionNetsuiteV2UpdateType = "NETSUITE_V2"
)

func (e ConnectionNetsuiteV2UpdateType) ToPointer() *ConnectionNetsuiteV2UpdateType {
	return &e
}

func (e *ConnectionNetsuiteV2UpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NETSUITE_V2":
		*e = ConnectionNetsuiteV2UpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionNetsuiteV2UpdateType: %v", v)
	}
}

type ConnectionNetsuiteV2Update struct {
	// Whether this connection should be marked as active.
	Active *bool                           `json:"active,omitempty"`
	Type   *ConnectionNetsuiteV2UpdateType `json:"type"`
	// The unique name of this connection.
	Name *string `json:"name,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Token Secret value displayed after creating a new access token.
	TokenSecret *string `json:"tokenSecret,omitempty"`
	// Token Id value displayed after creating a new access token.
	TokenID *string `json:"tokenId,omitempty"`
	// Consumer Key value displayed after creating a new integration.
	ConsumerKey *string `json:"consumerKey,omitempty"`
	// Consumer Secret value displayed after creating a new integration.
	ConsumerSecret *string `json:"consumerSecret,omitempty"`
	// Under Setup > Company > Company Information
	AccountID *string `json:"accountId,omitempty"`
}

func (o *ConnectionNetsuiteV2Update) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionNetsuiteV2Update) GetType() *ConnectionNetsuiteV2UpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConnectionNetsuiteV2Update) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionNetsuiteV2Update) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionNetsuiteV2Update) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionNetsuiteV2Update) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionNetsuiteV2Update) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionNetsuiteV2Update) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionNetsuiteV2Update) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionNetsuiteV2Update) GetTokenSecret() *string {
	if o == nil {
		return nil
	}
	return o.TokenSecret
}

func (o *ConnectionNetsuiteV2Update) GetTokenID() *string {
	if o == nil {
		return nil
	}
	return o.TokenID
}

func (o *ConnectionNetsuiteV2Update) GetConsumerKey() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerKey
}

func (o *ConnectionNetsuiteV2Update) GetConsumerSecret() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerSecret
}

func (o *ConnectionNetsuiteV2Update) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}
