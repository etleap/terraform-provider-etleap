// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionTheTradeDeskType string

const (
	ConnectionTheTradeDeskTypeTheTradeDesk ConnectionTheTradeDeskType = "THE_TRADE_DESK"
)

func (e ConnectionTheTradeDeskType) ToPointer() *ConnectionTheTradeDeskType {
	return &e
}

func (e *ConnectionTheTradeDeskType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "THE_TRADE_DESK":
		*e = ConnectionTheTradeDeskType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionTheTradeDeskType: %v", v)
	}
}

// ConnectionTheTradeDeskStatus - The current status of the connection.
type ConnectionTheTradeDeskStatus string

const (
	ConnectionTheTradeDeskStatusUnknown     ConnectionTheTradeDeskStatus = "UNKNOWN"
	ConnectionTheTradeDeskStatusUp          ConnectionTheTradeDeskStatus = "UP"
	ConnectionTheTradeDeskStatusDown        ConnectionTheTradeDeskStatus = "DOWN"
	ConnectionTheTradeDeskStatusResize      ConnectionTheTradeDeskStatus = "RESIZE"
	ConnectionTheTradeDeskStatusMaintenance ConnectionTheTradeDeskStatus = "MAINTENANCE"
	ConnectionTheTradeDeskStatusQuota       ConnectionTheTradeDeskStatus = "QUOTA"
	ConnectionTheTradeDeskStatusCreating    ConnectionTheTradeDeskStatus = "CREATING"
)

func (e ConnectionTheTradeDeskStatus) ToPointer() *ConnectionTheTradeDeskStatus {
	return &e
}

func (e *ConnectionTheTradeDeskStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionTheTradeDeskStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionTheTradeDeskStatus: %v", v)
	}
}

type ConnectionTheTradeDesk struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                     `json:"name"`
	Type ConnectionTheTradeDeskType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionTheTradeDeskStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// Typically an email address.
	Username string `json:"username"`
	// Your Partner ID at The Trade Desk.
	PartnerID string `json:"partnerId"`
	// Whether this is a sandbox account.
	Sandbox bool `json:"sandbox"`
}

func (c ConnectionTheTradeDesk) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionTheTradeDesk) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionTheTradeDesk) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionTheTradeDesk) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionTheTradeDesk) GetType() ConnectionTheTradeDeskType {
	if o == nil {
		return ConnectionTheTradeDeskType("")
	}
	return o.Type
}

func (o *ConnectionTheTradeDesk) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionTheTradeDesk) GetStatus() ConnectionTheTradeDeskStatus {
	if o == nil {
		return ConnectionTheTradeDeskStatus("")
	}
	return o.Status
}

func (o *ConnectionTheTradeDesk) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionTheTradeDesk) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionTheTradeDesk) GetPartnerID() string {
	if o == nil {
		return ""
	}
	return o.PartnerID
}

func (o *ConnectionTheTradeDesk) GetSandbox() bool {
	if o == nil {
		return false
	}
	return o.Sandbox
}

type ConnectionTheTradeDeskInput struct {
	// The unique name of this connection.
	Name string                     `json:"name"`
	Type ConnectionTheTradeDeskType `json:"type"`
	// Typically an email address.
	Username string `json:"username"`
	Password string `json:"password"`
	// Your Partner ID at The Trade Desk.
	PartnerID string `json:"partnerId"`
	// Whether this is a sandbox account.
	Sandbox bool `json:"sandbox"`
}

func (o *ConnectionTheTradeDeskInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionTheTradeDeskInput) GetType() ConnectionTheTradeDeskType {
	if o == nil {
		return ConnectionTheTradeDeskType("")
	}
	return o.Type
}

func (o *ConnectionTheTradeDeskInput) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionTheTradeDeskInput) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *ConnectionTheTradeDeskInput) GetPartnerID() string {
	if o == nil {
		return ""
	}
	return o.PartnerID
}

func (o *ConnectionTheTradeDeskInput) GetSandbox() bool {
	if o == nil {
		return false
	}
	return o.Sandbox
}
