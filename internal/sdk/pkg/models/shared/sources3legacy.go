// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/types"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type SourceS3LegacyType string

const (
	SourceS3LegacyTypeS3Legacy SourceS3LegacyType = "S3_LEGACY"
)

func (e SourceS3LegacyType) ToPointer() *SourceS3LegacyType {
	return &e
}

func (e *SourceS3LegacyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_LEGACY":
		*e = SourceS3LegacyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3LegacyType: %v", v)
	}
}

// SourceS3LegacyNewFileBehavior - Specifies whether new files update, add to or replace existing files. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjI0NTQwNzI2-create-a-file-based-pipeline#update-method">the documentation</a> for more details.
type SourceS3LegacyNewFileBehavior string

const (
	SourceS3LegacyNewFileBehaviorUpdate  SourceS3LegacyNewFileBehavior = "UPDATE"
	SourceS3LegacyNewFileBehaviorAppend  SourceS3LegacyNewFileBehavior = "APPEND"
	SourceS3LegacyNewFileBehaviorReplace SourceS3LegacyNewFileBehavior = "REPLACE"
)

func (e SourceS3LegacyNewFileBehavior) ToPointer() *SourceS3LegacyNewFileBehavior {
	return &e
}

func (e *SourceS3LegacyNewFileBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UPDATE":
		fallthrough
	case "APPEND":
		fallthrough
	case "REPLACE":
		*e = SourceS3LegacyNewFileBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3LegacyNewFileBehavior: %v", v)
	}
}

type SourceS3Legacy struct {
	// The universally unique identifier for the source.
	ConnectionID string             `json:"connectionId"`
	Type         SourceS3LegacyType `json:"type"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// Specifies whether new files update, add to or replace existing files. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjI0NTQwNzI2-create-a-file-based-pipeline#update-method">the documentation</a> for more details.
	NewFileBehavior SourceS3LegacyNewFileBehavior `json:"newFileBehavior"`
	// Regular expression matching the names of the files to be processed by this pipeline. A single value for `paths` is required when `fileNameFilter` is specified.
	FileNameFilter *string `json:"fileNameFilter,omitempty"`
	// Timestamp of the earliest modified file that should be processed by the pipeline. Only the files modified after this timestamp will be processed. Format of the timestamp: 'yyyy-MM-dd'.
	LowWatermark *types.Date `json:"lowWatermark,omitempty"`
	// File or folder paths for the files to be extracted from the source. In the case when `fileNameFilter` is specified exactly one folder path must be given here.
	Paths []string `json:"paths"`
}

func (s SourceS3Legacy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3Legacy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3Legacy) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceS3Legacy) GetType() SourceS3LegacyType {
	if o == nil {
		return SourceS3LegacyType("")
	}
	return o.Type
}

func (o *SourceS3Legacy) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceS3Legacy) GetNewFileBehavior() SourceS3LegacyNewFileBehavior {
	if o == nil {
		return SourceS3LegacyNewFileBehavior("")
	}
	return o.NewFileBehavior
}

func (o *SourceS3Legacy) GetFileNameFilter() *string {
	if o == nil {
		return nil
	}
	return o.FileNameFilter
}

func (o *SourceS3Legacy) GetLowWatermark() *types.Date {
	if o == nil {
		return nil
	}
	return o.LowWatermark
}

func (o *SourceS3Legacy) GetPaths() []string {
	if o == nil {
		return []string{}
	}
	return o.Paths
}
