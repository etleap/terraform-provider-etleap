// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceEloquaType string

const (
	SourceEloquaTypeEloqua SourceEloquaType = "ELOQUA"
)

func (e SourceEloquaType) ToPointer() *SourceEloquaType {
	return &e
}

func (e *SourceEloquaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ELOQUA":
		*e = SourceEloquaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceEloquaType: %v", v)
	}
}

type SourceEloqua struct {
	// The universally unique identifier for the source.
	ConnectionID string           `json:"connectionId"`
	Type         SourceEloquaType `json:"type"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// The Eloqua resource, spelled as it is shown in the Eloqua UI. Each ActivityType is a different entity and is spelled without spaces like EmailClickthrough and EmailSend.
	Entity string `json:"entity"`
}

func (o *SourceEloqua) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceEloqua) GetType() SourceEloquaType {
	if o == nil {
		return SourceEloquaType("")
	}
	return o.Type
}

func (o *SourceEloqua) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceEloqua) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}
