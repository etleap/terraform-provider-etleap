// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionMongoUpdateType string

const (
	ConnectionMongoUpdateTypeMongodb ConnectionMongoUpdateType = "MONGODB"
)

func (e ConnectionMongoUpdateType) ToPointer() *ConnectionMongoUpdateType {
	return &e
}

func (e *ConnectionMongoUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MONGODB":
		*e = ConnectionMongoUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionMongoUpdateType: %v", v)
	}
}

type ConnectionMongoUpdateSSHConfigurationUpdate struct {
	// The server address for the SSH connection.
	Address *string `json:"address,omitempty"`
	// The username for the SSH connection.
	Username *string `json:"username,omitempty"`
}

func (o *ConnectionMongoUpdateSSHConfigurationUpdate) GetAddress() *string {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *ConnectionMongoUpdateSSHConfigurationUpdate) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type ReplicaSet struct {
	Address string `json:"address"`
	Port    int64  `json:"port"`
}

func (o *ReplicaSet) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ReplicaSet) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

type ConnectionMongoUpdate struct {
	// The unique name of this connection.
	Name *string                    `json:"name,omitempty"`
	Type *ConnectionMongoUpdateType `json:"type"`
	// Whether this connection should be marked as active.
	Active *bool `json:"active,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes                         `json:"updateSchedule,omitempty"`
	SSHConfig      *ConnectionMongoUpdateSSHConfigurationUpdate `json:"sshConfig,omitempty"`
	ReplicaSet     []ReplicaSet                                 `json:"replicaSet,omitempty"`
	// The name of the database, e.g. 'etleap'
	DatabaseName *string `json:"databaseName,omitempty"`
	// Whether Etleap should connect over SSL.
	UseSsl   *bool   `json:"useSsl,omitempty"`
	Username *string `json:"username,omitempty"`
	Password *string `json:"password,omitempty"`
	// The database used for authentication. Omit to use the connection database.
	AuthDatabaseName *string `json:"authDatabaseName,omitempty"`
}

func (o *ConnectionMongoUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionMongoUpdate) GetType() *ConnectionMongoUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConnectionMongoUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionMongoUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionMongoUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionMongoUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionMongoUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionMongoUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionMongoUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionMongoUpdate) GetSSHConfig() *ConnectionMongoUpdateSSHConfigurationUpdate {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}

func (o *ConnectionMongoUpdate) GetReplicaSet() []ReplicaSet {
	if o == nil {
		return nil
	}
	return o.ReplicaSet
}

func (o *ConnectionMongoUpdate) GetDatabaseName() *string {
	if o == nil {
		return nil
	}
	return o.DatabaseName
}

func (o *ConnectionMongoUpdate) GetUseSsl() *bool {
	if o == nil {
		return nil
	}
	return o.UseSsl
}

func (o *ConnectionMongoUpdate) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *ConnectionMongoUpdate) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *ConnectionMongoUpdate) GetAuthDatabaseName() *string {
	if o == nil {
		return nil
	}
	return o.AuthDatabaseName
}
