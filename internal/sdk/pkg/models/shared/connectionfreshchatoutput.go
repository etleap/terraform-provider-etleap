// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionFreshchatStatus - The current status of the connection.
type ConnectionFreshchatStatus string

const (
	ConnectionFreshchatStatusUnknown     ConnectionFreshchatStatus = "UNKNOWN"
	ConnectionFreshchatStatusUp          ConnectionFreshchatStatus = "UP"
	ConnectionFreshchatStatusDown        ConnectionFreshchatStatus = "DOWN"
	ConnectionFreshchatStatusResize      ConnectionFreshchatStatus = "RESIZE"
	ConnectionFreshchatStatusMaintenance ConnectionFreshchatStatus = "MAINTENANCE"
	ConnectionFreshchatStatusQuota       ConnectionFreshchatStatus = "QUOTA"
	ConnectionFreshchatStatusCreating    ConnectionFreshchatStatus = "CREATING"
)

func (e ConnectionFreshchatStatus) ToPointer() *ConnectionFreshchatStatus {
	return &e
}

func (e *ConnectionFreshchatStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionFreshchatStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionFreshchatStatus: %v", v)
	}
}

type ConnectionFreshchatDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionFreshchatDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionFreshchatDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionFreshchatDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionFreshchatDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionFreshchatDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionFreshchatDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionFreshchatDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionFreshchatType string

const (
	ConnectionFreshchatTypeFreshchat ConnectionFreshchatType = "FRESHCHAT"
)

func (e ConnectionFreshchatType) ToPointer() *ConnectionFreshchatType {
	return &e
}

func (e *ConnectionFreshchatType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FRESHCHAT":
		*e = ConnectionFreshchatType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionFreshchatType: %v", v)
	}
}

type ConnectionFreshchatOutput struct {
	// The current status of the connection.
	Status ConnectionFreshchatStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionFreshchatDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool                    `json:"active"`
	Type   ConnectionFreshchatType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Your Freshchat domain. Can be found under Admin Settings -> Marketplace and Integrations -> API Settings under the "Your chat URL" label.
	Domain string `json:"domain"`
}

func (c ConnectionFreshchatOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionFreshchatOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionFreshchatOutput) GetStatus() ConnectionFreshchatStatus {
	if o == nil {
		return ConnectionFreshchatStatus("")
	}
	return o.Status
}

func (o *ConnectionFreshchatOutput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionFreshchatOutput) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionFreshchatOutput) GetDefaultUpdateSchedule() []ConnectionFreshchatDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionFreshchatDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionFreshchatOutput) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionFreshchatOutput) GetType() ConnectionFreshchatType {
	if o == nil {
		return ConnectionFreshchatType("")
	}
	return o.Type
}

func (o *ConnectionFreshchatOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionFreshchatOutput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionFreshchatOutput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionFreshchatOutput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionFreshchatOutput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionFreshchatOutput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionFreshchatOutput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionFreshchatOutput) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

type ConnectionFreshchat struct {
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionFreshchatType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Your Freshchat domain. Can be found under Admin Settings -> Marketplace and Integrations -> API Settings under the "Your chat URL" label.
	Domain string `json:"domain"`
	// Your Freshchat API key. Can be found under Admin Settings -> Marketplace and Integrations -> API Settings under the "Your API Key" label.
	APIKey string `json:"apiKey"`
}

func (o *ConnectionFreshchat) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionFreshchat) GetType() ConnectionFreshchatType {
	if o == nil {
		return ConnectionFreshchatType("")
	}
	return o.Type
}

func (o *ConnectionFreshchat) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionFreshchat) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionFreshchat) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionFreshchat) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionFreshchat) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionFreshchat) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionFreshchat) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *ConnectionFreshchat) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}
