// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionSnowflakeShardedUpdateType string

const (
	ConnectionSnowflakeShardedUpdateTypeSnowflakeSharded ConnectionSnowflakeShardedUpdateType = "SNOWFLAKE_SHARDED"
)

func (e ConnectionSnowflakeShardedUpdateType) ToPointer() *ConnectionSnowflakeShardedUpdateType {
	return &e
}

func (e *ConnectionSnowflakeShardedUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SNOWFLAKE_SHARDED":
		*e = ConnectionSnowflakeShardedUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSnowflakeShardedUpdateType: %v", v)
	}
}

type ConnectionSnowflakeShardedUpdate struct {
	// Whether this connection should be marked as active.
	Active *bool                                `json:"active,omitempty"`
	Type   ConnectionSnowflakeShardedUpdateType `json:"type"`
	// The unique name of this connection.
	Name *string `json:"name,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Are you going to use this connection only as a source for pipelines? When `true`, this connection will only be available as an ETL source only, and Etleap will skip the creation of an audit table in the database.
	SourceOnly *bool `json:"sourceOnly,omitempty"`
	// When Etleap creates Snowflake tables, SELECT privileges will be granted to roles specified here. Take into account that the roles are case sensitive.
	Roles []string `json:"roles,omitempty"`
	// Take into account that the schema is case sensitive
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Schema *string               `json:"schema,omitempty"`
	Shards []SnowflakeShardInput `json:"shards,omitempty"`
}

func (o *ConnectionSnowflakeShardedUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionSnowflakeShardedUpdate) GetType() ConnectionSnowflakeShardedUpdateType {
	if o == nil {
		return ConnectionSnowflakeShardedUpdateType("")
	}
	return o.Type
}

func (o *ConnectionSnowflakeShardedUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionSnowflakeShardedUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSnowflakeShardedUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSnowflakeShardedUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSnowflakeShardedUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSnowflakeShardedUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSnowflakeShardedUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSnowflakeShardedUpdate) GetSourceOnly() *bool {
	if o == nil {
		return nil
	}
	return o.SourceOnly
}

func (o *ConnectionSnowflakeShardedUpdate) GetRoles() []string {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *ConnectionSnowflakeShardedUpdate) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionSnowflakeShardedUpdate) GetShards() []SnowflakeShardInput {
	if o == nil {
		return nil
	}
	return o.Shards
}
