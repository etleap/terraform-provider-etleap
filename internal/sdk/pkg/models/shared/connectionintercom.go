// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionIntercomType string

const (
	ConnectionIntercomTypeIntercom ConnectionIntercomType = "INTERCOM"
)

func (e ConnectionIntercomType) ToPointer() *ConnectionIntercomType {
	return &e
}

func (e *ConnectionIntercomType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INTERCOM":
		*e = ConnectionIntercomType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionIntercomType: %v", v)
	}
}

// ConnectionIntercomStatus - The current status of the connection.
type ConnectionIntercomStatus string

const (
	ConnectionIntercomStatusUnknown     ConnectionIntercomStatus = "UNKNOWN"
	ConnectionIntercomStatusUp          ConnectionIntercomStatus = "UP"
	ConnectionIntercomStatusDown        ConnectionIntercomStatus = "DOWN"
	ConnectionIntercomStatusResize      ConnectionIntercomStatus = "RESIZE"
	ConnectionIntercomStatusMaintenance ConnectionIntercomStatus = "MAINTENANCE"
	ConnectionIntercomStatusQuota       ConnectionIntercomStatus = "QUOTA"
	ConnectionIntercomStatusCreating    ConnectionIntercomStatus = "CREATING"
)

func (e ConnectionIntercomStatus) ToPointer() *ConnectionIntercomStatus {
	return &e
}

func (e *ConnectionIntercomStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionIntercomStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionIntercomStatus: %v", v)
	}
}

type ConnectionIntercom struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionIntercomType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionIntercomStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	Username   string    `json:"username"`
}

func (c ConnectionIntercom) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionIntercom) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionIntercom) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionIntercom) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionIntercom) GetType() ConnectionIntercomType {
	if o == nil {
		return ConnectionIntercomType("")
	}
	return o.Type
}

func (o *ConnectionIntercom) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionIntercom) GetStatus() ConnectionIntercomStatus {
	if o == nil {
		return ConnectionIntercomStatus("")
	}
	return o.Status
}

func (o *ConnectionIntercom) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionIntercom) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type ConnectionIntercomInput struct {
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionIntercomType `json:"type"`
	// Code retrieved from `/connections/oauth2-initiation`. **Note:** it is short-lived, therefore the connection creation should be done as soon as code is returned.
	Code string `json:"code"`
}

func (o *ConnectionIntercomInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionIntercomInput) GetType() ConnectionIntercomType {
	if o == nil {
		return ConnectionIntercomType("")
	}
	return o.Type
}

func (o *ConnectionIntercomInput) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}
