// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionPinterestAdsType string

const (
	ConnectionPinterestAdsTypePinterestAds ConnectionPinterestAdsType = "PINTEREST_ADS"
)

func (e ConnectionPinterestAdsType) ToPointer() *ConnectionPinterestAdsType {
	return &e
}

func (e *ConnectionPinterestAdsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PINTEREST_ADS":
		*e = ConnectionPinterestAdsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionPinterestAdsType: %v", v)
	}
}

// ConnectionPinterestAdsStatus - The current status of the connection.
type ConnectionPinterestAdsStatus string

const (
	ConnectionPinterestAdsStatusUnknown     ConnectionPinterestAdsStatus = "UNKNOWN"
	ConnectionPinterestAdsStatusUp          ConnectionPinterestAdsStatus = "UP"
	ConnectionPinterestAdsStatusDown        ConnectionPinterestAdsStatus = "DOWN"
	ConnectionPinterestAdsStatusResize      ConnectionPinterestAdsStatus = "RESIZE"
	ConnectionPinterestAdsStatusMaintenance ConnectionPinterestAdsStatus = "MAINTENANCE"
	ConnectionPinterestAdsStatusQuota       ConnectionPinterestAdsStatus = "QUOTA"
	ConnectionPinterestAdsStatusCreating    ConnectionPinterestAdsStatus = "CREATING"
)

func (e ConnectionPinterestAdsStatus) ToPointer() *ConnectionPinterestAdsStatus {
	return &e
}

func (e *ConnectionPinterestAdsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionPinterestAdsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionPinterestAdsStatus: %v", v)
	}
}

type ConnectionPinterestAds struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                     `json:"name"`
	Type ConnectionPinterestAdsType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionPinterestAdsStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
}

func (c ConnectionPinterestAds) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionPinterestAds) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionPinterestAds) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionPinterestAds) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionPinterestAds) GetType() ConnectionPinterestAdsType {
	if o == nil {
		return ConnectionPinterestAdsType("")
	}
	return o.Type
}

func (o *ConnectionPinterestAds) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionPinterestAds) GetStatus() ConnectionPinterestAdsStatus {
	if o == nil {
		return ConnectionPinterestAdsStatus("")
	}
	return o.Status
}

func (o *ConnectionPinterestAds) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

type ConnectionPinterestAdsInput struct {
	// The unique name of this connection.
	Name string                     `json:"name"`
	Type ConnectionPinterestAdsType `json:"type"`
	// Code retrieved from `/connections/oauth2-initiation`. **Note:** it is short-lived, therefore the connection creation should be done as soon as code is returned.
	Code string `json:"code"`
}

func (o *ConnectionPinterestAdsInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionPinterestAdsInput) GetType() ConnectionPinterestAdsType {
	if o == nil {
		return ConnectionPinterestAdsType("")
	}
	return o.Type
}

func (o *ConnectionPinterestAdsInput) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}
