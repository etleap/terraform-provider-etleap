// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type BasicAuthenticationType string

const (
	BasicAuthenticationTypeBasic BasicAuthenticationType = "BASIC"
)

func (e BasicAuthenticationType) ToPointer() *BasicAuthenticationType {
	return &e
}

func (e *BasicAuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BASIC":
		*e = BasicAuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasicAuthenticationType: %v", v)
	}
}

// BasicAuthentication - Authentication method that uses a username/password pair.
type BasicAuthentication struct {
	Type     *BasicAuthenticationType `default:"BASIC" json:"type"`
	Username string                   `json:"username"`
	// The Basic password. This property is stored as a secret in Etleap.
	Password string `json:"password"`
}

func (b BasicAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BasicAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *BasicAuthentication) GetType() *BasicAuthenticationType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *BasicAuthentication) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *BasicAuthentication) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}
