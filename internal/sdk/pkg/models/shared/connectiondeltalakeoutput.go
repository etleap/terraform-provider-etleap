// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionDeltaLakeStatus - The current status of the connection.
type ConnectionDeltaLakeStatus string

const (
	ConnectionDeltaLakeStatusUnknown     ConnectionDeltaLakeStatus = "UNKNOWN"
	ConnectionDeltaLakeStatusUp          ConnectionDeltaLakeStatus = "UP"
	ConnectionDeltaLakeStatusDown        ConnectionDeltaLakeStatus = "DOWN"
	ConnectionDeltaLakeStatusResize      ConnectionDeltaLakeStatus = "RESIZE"
	ConnectionDeltaLakeStatusMaintenance ConnectionDeltaLakeStatus = "MAINTENANCE"
	ConnectionDeltaLakeStatusQuota       ConnectionDeltaLakeStatus = "QUOTA"
	ConnectionDeltaLakeStatusCreating    ConnectionDeltaLakeStatus = "CREATING"
)

func (e ConnectionDeltaLakeStatus) ToPointer() *ConnectionDeltaLakeStatus {
	return &e
}

func (e *ConnectionDeltaLakeStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionDeltaLakeStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionDeltaLakeStatus: %v", v)
	}
}

type ConnectionDeltaLakeDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionDeltaLakeDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionDeltaLakeDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionDeltaLakeDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionDeltaLakeDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionDeltaLakeDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionDeltaLakeDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionDeltaLakeDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionDeltaLakeType string

const (
	ConnectionDeltaLakeTypeDeltaLake ConnectionDeltaLakeType = "DELTA_LAKE"
)

func (e ConnectionDeltaLakeType) ToPointer() *ConnectionDeltaLakeType {
	return &e
}

func (e *ConnectionDeltaLakeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DELTA_LAKE":
		*e = ConnectionDeltaLakeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionDeltaLakeType: %v", v)
	}
}

type ConnectionDeltaLakeOutput struct {
	// The current status of the connection.
	Status ConnectionDeltaLakeStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionDeltaLakeDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool                    `json:"active"`
	Type   ConnectionDeltaLakeType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	Hostname       string               `json:"hostname"`
	// HTTP path for your Databricks compute cluster or SQL Warehouse.
	HTTPPath string `json:"httpPath"`
	// The schema to use when this connection is used as a source. When the connection is used as a destination the schema can be set to a different one for each pipeline.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Schema *string `json:"schema,omitempty"`
}

func (c ConnectionDeltaLakeOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionDeltaLakeOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionDeltaLakeOutput) GetStatus() ConnectionDeltaLakeStatus {
	if o == nil {
		return ConnectionDeltaLakeStatus("")
	}
	return o.Status
}

func (o *ConnectionDeltaLakeOutput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionDeltaLakeOutput) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionDeltaLakeOutput) GetDefaultUpdateSchedule() []ConnectionDeltaLakeDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionDeltaLakeDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionDeltaLakeOutput) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionDeltaLakeOutput) GetType() ConnectionDeltaLakeType {
	if o == nil {
		return ConnectionDeltaLakeType("")
	}
	return o.Type
}

func (o *ConnectionDeltaLakeOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionDeltaLakeOutput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionDeltaLakeOutput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionDeltaLakeOutput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionDeltaLakeOutput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionDeltaLakeOutput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionDeltaLakeOutput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionDeltaLakeOutput) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *ConnectionDeltaLakeOutput) GetHTTPPath() string {
	if o == nil {
		return ""
	}
	return o.HTTPPath
}

func (o *ConnectionDeltaLakeOutput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

type ConnectionDeltaLake struct {
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionDeltaLakeType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	Hostname       string               `json:"hostname"`
	// HTTP path for your Databricks compute cluster or SQL Warehouse.
	HTTPPath string `json:"httpPath"`
	// Authenticates the user that you want to connect to Databricks with. Instructions on generating a personal access token can be found <a href='https://docs.databricks.com/dev-tools/api/latest/authentication.html#token-management' target="_blank">here</a>.
	PersonalAccessToken string `json:"personalAccessToken"`
	// The schema to use when this connection is used as a source. When the connection is used as a destination the schema can be set to a different one for each pipeline.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Schema *string `json:"schema,omitempty"`
}

func (o *ConnectionDeltaLake) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionDeltaLake) GetType() ConnectionDeltaLakeType {
	if o == nil {
		return ConnectionDeltaLakeType("")
	}
	return o.Type
}

func (o *ConnectionDeltaLake) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionDeltaLake) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionDeltaLake) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionDeltaLake) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionDeltaLake) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionDeltaLake) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionDeltaLake) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *ConnectionDeltaLake) GetHTTPPath() string {
	if o == nil {
		return ""
	}
	return o.HTTPPath
}

func (o *ConnectionDeltaLake) GetPersonalAccessToken() string {
	if o == nil {
		return ""
	}
	return o.PersonalAccessToken
}

func (o *ConnectionDeltaLake) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}
