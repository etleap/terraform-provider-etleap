// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionMysqlShardedType string

const (
	ConnectionMysqlShardedTypeMysqlSharded ConnectionMysqlShardedType = "MYSQL_SHARDED"
)

func (e ConnectionMysqlShardedType) ToPointer() *ConnectionMysqlShardedType {
	return &e
}

func (e *ConnectionMysqlShardedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MYSQL_SHARDED":
		*e = ConnectionMysqlShardedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionMysqlShardedType: %v", v)
	}
}

// ConnectionMysqlShardedStatus - The current status of the connection.
type ConnectionMysqlShardedStatus string

const (
	ConnectionMysqlShardedStatusUnknown     ConnectionMysqlShardedStatus = "UNKNOWN"
	ConnectionMysqlShardedStatusUp          ConnectionMysqlShardedStatus = "UP"
	ConnectionMysqlShardedStatusDown        ConnectionMysqlShardedStatus = "DOWN"
	ConnectionMysqlShardedStatusResize      ConnectionMysqlShardedStatus = "RESIZE"
	ConnectionMysqlShardedStatusMaintenance ConnectionMysqlShardedStatus = "MAINTENANCE"
	ConnectionMysqlShardedStatusQuota       ConnectionMysqlShardedStatus = "QUOTA"
	ConnectionMysqlShardedStatusCreating    ConnectionMysqlShardedStatus = "CREATING"
)

func (e ConnectionMysqlShardedStatus) ToPointer() *ConnectionMysqlShardedStatus {
	return &e
}

func (e *ConnectionMysqlShardedStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionMysqlShardedStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionMysqlShardedStatus: %v", v)
	}
}

// ConnectionMysqlSharded - The properties available shared among both sharded and unsharded versions. Cannot be used directly; use the inheriting classes.
type ConnectionMysqlSharded struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                     `json:"name"`
	Type ConnectionMysqlShardedType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionMysqlShardedStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate      time.Time `json:"createDate"`
	ValidateSslCert *bool     `default:"false" json:"validateSslCert"`
	// Should Etleap use MySQL binlogs to capture changes from this database? This setting cannot be changed later.
	CdcEnabled *bool `default:"false" json:"cdcEnabled"`
	// If you want Etleap to create pipelines for each source table automatically, specify the id of an Etleap destination connection here. If you want to create pipelines manually, omit this property. Note that only the connection owner can change this setting.
	AutoReplicate *string `json:"autoReplicate,omitempty"`
	// Should Etleap interpret columns with type Tinyint(1) as Boolean (i.e. true/false)?
	TinyInt1IsBoolean *bool `default:"false" json:"tinyInt1IsBoolean"`
	// All MySQL shards for a connection should specify the same database.
	Shards []DatabaseShardOutput `json:"shards"`
}

func (c ConnectionMysqlSharded) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionMysqlSharded) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionMysqlSharded) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionMysqlSharded) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionMysqlSharded) GetType() ConnectionMysqlShardedType {
	if o == nil {
		return ConnectionMysqlShardedType("")
	}
	return o.Type
}

func (o *ConnectionMysqlSharded) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionMysqlSharded) GetStatus() ConnectionMysqlShardedStatus {
	if o == nil {
		return ConnectionMysqlShardedStatus("")
	}
	return o.Status
}

func (o *ConnectionMysqlSharded) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionMysqlSharded) GetValidateSslCert() *bool {
	if o == nil {
		return nil
	}
	return o.ValidateSslCert
}

func (o *ConnectionMysqlSharded) GetCdcEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CdcEnabled
}

func (o *ConnectionMysqlSharded) GetAutoReplicate() *string {
	if o == nil {
		return nil
	}
	return o.AutoReplicate
}

func (o *ConnectionMysqlSharded) GetTinyInt1IsBoolean() *bool {
	if o == nil {
		return nil
	}
	return o.TinyInt1IsBoolean
}

func (o *ConnectionMysqlSharded) GetShards() []DatabaseShardOutput {
	if o == nil {
		return []DatabaseShardOutput{}
	}
	return o.Shards
}

// ConnectionMysqlShardedInput - The properties available shared among both sharded and unsharded versions. Cannot be used directly; use the inheriting classes.
type ConnectionMysqlShardedInput struct {
	// The unique name of this connection.
	Name            string                     `json:"name"`
	Type            ConnectionMysqlShardedType `json:"type"`
	ValidateSslCert *bool                      `default:"false" json:"validateSslCert"`
	// Should Etleap use MySQL binlogs to capture changes from this database? This setting cannot be changed later.
	CdcEnabled *bool `default:"false" json:"cdcEnabled"`
	// If you want Etleap to create pipelines for each source table automatically, specify the id of an Etleap destination connection here. If you want to create pipelines manually, omit this property. Note that only the connection owner can change this setting.
	AutoReplicate *string `json:"autoReplicate,omitempty"`
	// Should Etleap interpret columns with type Tinyint(1) as Boolean (i.e. true/false)?
	TinyInt1IsBoolean *bool `default:"false" json:"tinyInt1IsBoolean"`
	// All MySQL shards for a connection should specify the same database.
	Shards []DatabaseShard `json:"shards"`
}

func (c ConnectionMysqlShardedInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionMysqlShardedInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionMysqlShardedInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionMysqlShardedInput) GetType() ConnectionMysqlShardedType {
	if o == nil {
		return ConnectionMysqlShardedType("")
	}
	return o.Type
}

func (o *ConnectionMysqlShardedInput) GetValidateSslCert() *bool {
	if o == nil {
		return nil
	}
	return o.ValidateSslCert
}

func (o *ConnectionMysqlShardedInput) GetCdcEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CdcEnabled
}

func (o *ConnectionMysqlShardedInput) GetAutoReplicate() *string {
	if o == nil {
		return nil
	}
	return o.AutoReplicate
}

func (o *ConnectionMysqlShardedInput) GetTinyInt1IsBoolean() *bool {
	if o == nil {
		return nil
	}
	return o.TinyInt1IsBoolean
}

func (o *ConnectionMysqlShardedInput) GetShards() []DatabaseShard {
	if o == nil {
		return []DatabaseShard{}
	}
	return o.Shards
}
