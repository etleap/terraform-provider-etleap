// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RefreshScheduleModeNeverMode string

const (
	RefreshScheduleModeNeverModeNever RefreshScheduleModeNeverMode = "NEVER"
)

func (e RefreshScheduleModeNeverMode) ToPointer() *RefreshScheduleModeNeverMode {
	return &e
}

func (e *RefreshScheduleModeNeverMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEVER":
		*e = RefreshScheduleModeNeverMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefreshScheduleModeNeverMode: %v", v)
	}
}

type RefreshScheduleModeNever struct {
	Mode RefreshScheduleModeNeverMode `json:"mode"`
}

func (o *RefreshScheduleModeNever) GetMode() RefreshScheduleModeNeverMode {
	if o == nil {
		return RefreshScheduleModeNeverMode("")
	}
	return o.Mode
}
