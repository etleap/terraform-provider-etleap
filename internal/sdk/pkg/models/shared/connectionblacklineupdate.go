// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionBlacklineUpdateType string

const (
	ConnectionBlacklineUpdateTypeBlackline ConnectionBlacklineUpdateType = "BLACKLINE"
)

func (e ConnectionBlacklineUpdateType) ToPointer() *ConnectionBlacklineUpdateType {
	return &e
}

func (e *ConnectionBlacklineUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BLACKLINE":
		*e = ConnectionBlacklineUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionBlacklineUpdateType: %v", v)
	}
}

type ConnectionBlacklineUpdate struct {
	// Whether this connection should be marked as active.
	Active *bool                          `json:"active,omitempty"`
	Type   *ConnectionBlacklineUpdateType `json:"type"`
	// The unique name of this connection.
	Name *string `json:"name,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Your Blackline username
	Username *string `json:"username,omitempty"`
	// Your Blackline instance Client ID
	ClientID *string `json:"client_id,omitempty"`
	// Your Blackline instance base URL, i.e, https://<BASE_URL>.api.blackline.com
	BaseURL *string `json:"base_url,omitempty"`
	// Your Blackline instance authorization scope.
	InstanceScope *string `json:"instance_scope,omitempty"`
	// Your Blackline instance Client Secret
	ClientSecret *string `json:"client_secret,omitempty"`
	// The Blackline API Key generated for your user
	APIKey *string `json:"api_key,omitempty"`
}

func (o *ConnectionBlacklineUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionBlacklineUpdate) GetType() *ConnectionBlacklineUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConnectionBlacklineUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionBlacklineUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionBlacklineUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionBlacklineUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionBlacklineUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionBlacklineUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionBlacklineUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionBlacklineUpdate) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *ConnectionBlacklineUpdate) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *ConnectionBlacklineUpdate) GetBaseURL() *string {
	if o == nil {
		return nil
	}
	return o.BaseURL
}

func (o *ConnectionBlacklineUpdate) GetInstanceScope() *string {
	if o == nil {
		return nil
	}
	return o.InstanceScope
}

func (o *ConnectionBlacklineUpdate) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *ConnectionBlacklineUpdate) GetAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.APIKey
}
