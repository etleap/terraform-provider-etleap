// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type DestinationRedshiftType string

const (
	DestinationRedshiftTypeRedshift DestinationRedshiftType = "REDSHIFT"
)

func (e DestinationRedshiftType) ToPointer() *DestinationRedshiftType {
	return &e
}

func (e *DestinationRedshiftType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REDSHIFT":
		*e = DestinationRedshiftType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedshiftType: %v", v)
	}
}

type DestinationRedshift struct {
	// The universally unique identifier of the destination connection.
	ConnectionID string                  `json:"connectionId"`
	Type         DestinationRedshiftType `json:"type"`
	// The destination column names that constitute the primary key. <br> If the pipline has a sharded source include a column that specifies the shard identifier.
	PrimaryKey []string `json:"primaryKey,omitempty"`
	// If set to `true`, a `Transformation Complete` event is published once a transformation completes, and the pipeline waits for a `Quality Check Complete` event before loading to the destination. Defaults to `false`.
	WaitForQualityCheck *bool `default:"false" json:"waitForQualityCheck"`
	// Whether schema changes detected during transformation should be handled automatically or not. Defaults to `true`.
	AutomaticSchemaChanges *bool  `default:"true" json:"automaticSchemaChanges"`
	Table                  string `json:"table"`
	// The schema in the destination that the tables will be created in. If this is not specified or set to `null` then the schema specified on the connection is used.
	Schema *string `json:"schema,omitempty"`
	// If the destination table should retain the history of the source. More information here: https://docs.etleap.com/docs/documentation/56a1503dc499e-update-with-history-retention-mode. Defaults to `false`.
	RetainHistory *bool `default:"false" json:"retainHistory"`
	// Whether columns should be compressed. Defaults to `true`.
	CompressColumns *bool `default:"true" json:"compressColumns"`
	// The sort columns to use.
	SortColumns []string `json:"sortColumns,omitempty"`
	// Can either be one the strings `ALL`, `AUTO` or `EVEN`, or an object for `KEY` distribution that specifies a column.
	DistributionStyle *DistributionStyle `json:"distributionStyle,omitempty"`
	// Name of a column that indicates the time the record was updated at the destination.
	LastUpdatedColumn *string `json:"lastUpdatedColumn,omitempty"`
	// Truncate strings to 64K characters, the max allowed by Redshift in a single column. Defaults to `false`.
	TruncateStrings *bool `default:"false" json:"truncateStrings"`
}

func (d DestinationRedshift) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationRedshift) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationRedshift) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *DestinationRedshift) GetType() DestinationRedshiftType {
	if o == nil {
		return DestinationRedshiftType("")
	}
	return o.Type
}

func (o *DestinationRedshift) GetPrimaryKey() []string {
	if o == nil {
		return nil
	}
	return o.PrimaryKey
}

func (o *DestinationRedshift) GetWaitForQualityCheck() *bool {
	if o == nil {
		return nil
	}
	return o.WaitForQualityCheck
}

func (o *DestinationRedshift) GetAutomaticSchemaChanges() *bool {
	if o == nil {
		return nil
	}
	return o.AutomaticSchemaChanges
}

func (o *DestinationRedshift) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

func (o *DestinationRedshift) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *DestinationRedshift) GetRetainHistory() *bool {
	if o == nil {
		return nil
	}
	return o.RetainHistory
}

func (o *DestinationRedshift) GetCompressColumns() *bool {
	if o == nil {
		return nil
	}
	return o.CompressColumns
}

func (o *DestinationRedshift) GetSortColumns() []string {
	if o == nil {
		return nil
	}
	return o.SortColumns
}

func (o *DestinationRedshift) GetDistributionStyle() *DistributionStyle {
	if o == nil {
		return nil
	}
	return o.DistributionStyle
}

func (o *DestinationRedshift) GetLastUpdatedColumn() *string {
	if o == nil {
		return nil
	}
	return o.LastUpdatedColumn
}

func (o *DestinationRedshift) GetTruncateStrings() *bool {
	if o == nil {
		return nil
	}
	return o.TruncateStrings
}
