// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type RefreshScheduleTypesType string

const (
	RefreshScheduleTypesTypeMonthly RefreshScheduleTypesType = "MONTHLY"
	RefreshScheduleTypesTypeHourly  RefreshScheduleTypesType = "HOURLY"
	RefreshScheduleTypesTypeNever   RefreshScheduleTypesType = "NEVER"
	RefreshScheduleTypesTypeDaily   RefreshScheduleTypesType = "DAILY"
	RefreshScheduleTypesTypeWeekly  RefreshScheduleTypesType = "WEEKLY"
)

type RefreshScheduleTypes struct {
	RefreshScheduleModeNever   *RefreshScheduleModeNever
	RefreshScheduleModeHourly  *RefreshScheduleModeHourly
	RefreshScheduleModeDaily   *RefreshScheduleModeDaily
	RefreshScheduleModeWeekly  *RefreshScheduleModeWeekly
	RefreshScheduleModeMonthly *RefreshScheduleModeMonthly

	Type RefreshScheduleTypesType
}

func CreateRefreshScheduleTypesMonthly(monthly RefreshScheduleModeMonthly) RefreshScheduleTypes {
	typ := RefreshScheduleTypesTypeMonthly

	typStr := RefreshScheduleModeMonthlyMode(typ)
	monthly.Mode = typStr

	return RefreshScheduleTypes{
		RefreshScheduleModeMonthly: &monthly,
		Type:                       typ,
	}
}

func CreateRefreshScheduleTypesHourly(hourly RefreshScheduleModeHourly) RefreshScheduleTypes {
	typ := RefreshScheduleTypesTypeHourly

	typStr := RefreshScheduleModeHourlyMode(typ)
	hourly.Mode = typStr

	return RefreshScheduleTypes{
		RefreshScheduleModeHourly: &hourly,
		Type:                      typ,
	}
}

func CreateRefreshScheduleTypesNever(never RefreshScheduleModeNever) RefreshScheduleTypes {
	typ := RefreshScheduleTypesTypeNever

	typStr := RefreshScheduleModeNeverMode(typ)
	never.Mode = typStr

	return RefreshScheduleTypes{
		RefreshScheduleModeNever: &never,
		Type:                     typ,
	}
}

func CreateRefreshScheduleTypesDaily(daily RefreshScheduleModeDaily) RefreshScheduleTypes {
	typ := RefreshScheduleTypesTypeDaily

	typStr := RefreshScheduleModeDailyMode(typ)
	daily.Mode = typStr

	return RefreshScheduleTypes{
		RefreshScheduleModeDaily: &daily,
		Type:                     typ,
	}
}

func CreateRefreshScheduleTypesWeekly(weekly RefreshScheduleModeWeekly) RefreshScheduleTypes {
	typ := RefreshScheduleTypesTypeWeekly

	typStr := RefreshScheduleModeWeeklyMode(typ)
	weekly.Mode = typStr

	return RefreshScheduleTypes{
		RefreshScheduleModeWeekly: &weekly,
		Type:                      typ,
	}
}

func (u *RefreshScheduleTypes) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Mode string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Mode {
	case "MONTHLY":
		refreshScheduleModeMonthly := new(RefreshScheduleModeMonthly)
		if err := utils.UnmarshalJSON(data, &refreshScheduleModeMonthly, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.RefreshScheduleModeMonthly = refreshScheduleModeMonthly
		u.Type = RefreshScheduleTypesTypeMonthly
		return nil
	case "HOURLY":
		refreshScheduleModeHourly := new(RefreshScheduleModeHourly)
		if err := utils.UnmarshalJSON(data, &refreshScheduleModeHourly, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.RefreshScheduleModeHourly = refreshScheduleModeHourly
		u.Type = RefreshScheduleTypesTypeHourly
		return nil
	case "NEVER":
		refreshScheduleModeNever := new(RefreshScheduleModeNever)
		if err := utils.UnmarshalJSON(data, &refreshScheduleModeNever, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.RefreshScheduleModeNever = refreshScheduleModeNever
		u.Type = RefreshScheduleTypesTypeNever
		return nil
	case "DAILY":
		refreshScheduleModeDaily := new(RefreshScheduleModeDaily)
		if err := utils.UnmarshalJSON(data, &refreshScheduleModeDaily, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.RefreshScheduleModeDaily = refreshScheduleModeDaily
		u.Type = RefreshScheduleTypesTypeDaily
		return nil
	case "WEEKLY":
		refreshScheduleModeWeekly := new(RefreshScheduleModeWeekly)
		if err := utils.UnmarshalJSON(data, &refreshScheduleModeWeekly, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.RefreshScheduleModeWeekly = refreshScheduleModeWeekly
		u.Type = RefreshScheduleTypesTypeWeekly
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RefreshScheduleTypes) MarshalJSON() ([]byte, error) {
	if u.RefreshScheduleModeNever != nil {
		return utils.MarshalJSON(u.RefreshScheduleModeNever, "", true)
	}

	if u.RefreshScheduleModeHourly != nil {
		return utils.MarshalJSON(u.RefreshScheduleModeHourly, "", true)
	}

	if u.RefreshScheduleModeDaily != nil {
		return utils.MarshalJSON(u.RefreshScheduleModeDaily, "", true)
	}

	if u.RefreshScheduleModeWeekly != nil {
		return utils.MarshalJSON(u.RefreshScheduleModeWeekly, "", true)
	}

	if u.RefreshScheduleModeMonthly != nil {
		return utils.MarshalJSON(u.RefreshScheduleModeMonthly, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
