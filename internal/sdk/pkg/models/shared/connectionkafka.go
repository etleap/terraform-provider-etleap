// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionKafkaType string

const (
	ConnectionKafkaTypeKafka ConnectionKafkaType = "KAFKA"
)

func (e ConnectionKafkaType) ToPointer() *ConnectionKafkaType {
	return &e
}

func (e *ConnectionKafkaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "KAFKA":
		*e = ConnectionKafkaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionKafkaType: %v", v)
	}
}

// ConnectionKafkaStatus - The current status of the connection.
type ConnectionKafkaStatus string

const (
	ConnectionKafkaStatusUnknown     ConnectionKafkaStatus = "UNKNOWN"
	ConnectionKafkaStatusUp          ConnectionKafkaStatus = "UP"
	ConnectionKafkaStatusDown        ConnectionKafkaStatus = "DOWN"
	ConnectionKafkaStatusResize      ConnectionKafkaStatus = "RESIZE"
	ConnectionKafkaStatusMaintenance ConnectionKafkaStatus = "MAINTENANCE"
	ConnectionKafkaStatusQuota       ConnectionKafkaStatus = "QUOTA"
	ConnectionKafkaStatusCreating    ConnectionKafkaStatus = "CREATING"
)

func (e ConnectionKafkaStatus) ToPointer() *ConnectionKafkaStatus {
	return &e
}

func (e *ConnectionKafkaStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionKafkaStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionKafkaStatus: %v", v)
	}
}

// AuthMechanism - Kafka SASL authentication mechanism.
type AuthMechanism string

const (
	AuthMechanismSaslSsl      AuthMechanism = "SASL_SSL"
	AuthMechanismSaslScram256 AuthMechanism = "SASL_SCRAM_256"
	AuthMechanismSaslScram512 AuthMechanism = "SASL_SCRAM_512"
)

func (e AuthMechanism) ToPointer() *AuthMechanism {
	return &e
}

func (e *AuthMechanism) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SASL_SSL":
		fallthrough
	case "SASL_SCRAM_256":
		fallthrough
	case "SASL_SCRAM_512":
		*e = AuthMechanism(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthMechanism: %v", v)
	}
}

type ConnectionKafka struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string              `json:"name"`
	Type ConnectionKafkaType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionKafkaStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The Kafka server list. The list should be in the form host1:port1,host2:port2,...
	ServerList string `json:"serverList"`
	User       string `json:"user"`
	// Kafka SASL authentication mechanism.
	AuthMechanism         *AuthMechanism `default:"SASL_SSL" json:"authMechanism"`
	TruststoreCertificate string         `json:"truststoreCertificate"`
	// The Schema Registry server: host:port
	SchemaRegistryServer *string `json:"schemaRegistryServer,omitempty"`
	SchemaRegistryUser   *string `json:"schemaRegistryUser,omitempty"`
}

func (c ConnectionKafka) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionKafka) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionKafka) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionKafka) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionKafka) GetType() ConnectionKafkaType {
	if o == nil {
		return ConnectionKafkaType("")
	}
	return o.Type
}

func (o *ConnectionKafka) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionKafka) GetStatus() ConnectionKafkaStatus {
	if o == nil {
		return ConnectionKafkaStatus("")
	}
	return o.Status
}

func (o *ConnectionKafka) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionKafka) GetServerList() string {
	if o == nil {
		return ""
	}
	return o.ServerList
}

func (o *ConnectionKafka) GetUser() string {
	if o == nil {
		return ""
	}
	return o.User
}

func (o *ConnectionKafka) GetAuthMechanism() *AuthMechanism {
	if o == nil {
		return nil
	}
	return o.AuthMechanism
}

func (o *ConnectionKafka) GetTruststoreCertificate() string {
	if o == nil {
		return ""
	}
	return o.TruststoreCertificate
}

func (o *ConnectionKafka) GetSchemaRegistryServer() *string {
	if o == nil {
		return nil
	}
	return o.SchemaRegistryServer
}

func (o *ConnectionKafka) GetSchemaRegistryUser() *string {
	if o == nil {
		return nil
	}
	return o.SchemaRegistryUser
}

type ConnectionKafkaInput struct {
	// The unique name of this connection.
	Name string              `json:"name"`
	Type ConnectionKafkaType `json:"type"`
	// The Kafka server list. The list should be in the form host1:port1,host2:port2,...
	ServerList string `json:"serverList"`
	User       string `json:"user"`
	Password   string `json:"password"`
	// Kafka SASL authentication mechanism.
	AuthMechanism         *AuthMechanism `default:"SASL_SSL" json:"authMechanism"`
	TruststoreCertificate string         `json:"truststoreCertificate"`
	// The Schema Registry server: host:port
	SchemaRegistryServer   *string `json:"schemaRegistryServer,omitempty"`
	SchemaRegistryUser     *string `json:"schemaRegistryUser,omitempty"`
	SchemaRegistryPassword *string `json:"schemaRegistryPassword,omitempty"`
}

func (c ConnectionKafkaInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionKafkaInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionKafkaInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionKafkaInput) GetType() ConnectionKafkaType {
	if o == nil {
		return ConnectionKafkaType("")
	}
	return o.Type
}

func (o *ConnectionKafkaInput) GetServerList() string {
	if o == nil {
		return ""
	}
	return o.ServerList
}

func (o *ConnectionKafkaInput) GetUser() string {
	if o == nil {
		return ""
	}
	return o.User
}

func (o *ConnectionKafkaInput) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *ConnectionKafkaInput) GetAuthMechanism() *AuthMechanism {
	if o == nil {
		return nil
	}
	return o.AuthMechanism
}

func (o *ConnectionKafkaInput) GetTruststoreCertificate() string {
	if o == nil {
		return ""
	}
	return o.TruststoreCertificate
}

func (o *ConnectionKafkaInput) GetSchemaRegistryServer() *string {
	if o == nil {
		return nil
	}
	return o.SchemaRegistryServer
}

func (o *ConnectionKafkaInput) GetSchemaRegistryUser() *string {
	if o == nil {
		return nil
	}
	return o.SchemaRegistryUser
}

func (o *ConnectionKafkaInput) GetSchemaRegistryPassword() *string {
	if o == nil {
		return nil
	}
	return o.SchemaRegistryPassword
}
