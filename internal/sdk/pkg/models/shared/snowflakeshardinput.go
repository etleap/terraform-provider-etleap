// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// SnowflakeShardInput - Use shards when the database is split amongst several physical machines, but should be treated as a single database.
type SnowflakeShardInput struct {
	ShardID  string `json:"shardId"`
	Username string `json:"username"`
	Database string `json:"database"`
	// Snowflake Authentication Types
	Authentication *SnowflakeAuthenticationTypesInput `json:"authentication,omitempty"`
	// The role the user will use to connect
	Role    *string `json:"role,omitempty"`
	Address string  `json:"address"`
	// The virtual warehouse to use once connected.
	Warehouse string  `json:"warehouse"`
	Password  *string `json:"password,omitempty"`
}

func (o *SnowflakeShardInput) GetShardID() string {
	if o == nil {
		return ""
	}
	return o.ShardID
}

func (o *SnowflakeShardInput) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *SnowflakeShardInput) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *SnowflakeShardInput) GetAuthentication() *SnowflakeAuthenticationTypesInput {
	if o == nil {
		return nil
	}
	return o.Authentication
}

func (o *SnowflakeShardInput) GetAuthenticationPassword() *SnowflakeAuthenticationPassword {
	if v := o.GetAuthentication(); v != nil {
		return v.SnowflakeAuthenticationPassword
	}
	return nil
}

func (o *SnowflakeShardInput) GetAuthenticationKeyPair() *SnowflakeAuthenticationKeyPairInput {
	if v := o.GetAuthentication(); v != nil {
		return v.SnowflakeAuthenticationKeyPairInput
	}
	return nil
}

func (o *SnowflakeShardInput) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *SnowflakeShardInput) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *SnowflakeShardInput) GetWarehouse() string {
	if o == nil {
		return ""
	}
	return o.Warehouse
}

func (o *SnowflakeShardInput) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}
