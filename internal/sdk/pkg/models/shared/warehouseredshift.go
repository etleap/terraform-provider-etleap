// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WarehouseRedshiftType string

const (
	WarehouseRedshiftTypeRedshift WarehouseRedshiftType = "REDSHIFT"
)

func (e WarehouseRedshiftType) ToPointer() *WarehouseRedshiftType {
	return &e
}

func (e *WarehouseRedshiftType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REDSHIFT":
		*e = WarehouseRedshiftType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WarehouseRedshiftType: %v", v)
	}
}

type WarehouseRedshift struct {
	Type         WarehouseRedshiftType `json:"type"`
	ConnectionID string                `json:"connectionId"`
	Schema       *string               `json:"schema,omitempty"`
	Table        string                `json:"table"`
	// Only set when a table rename was triggered but is not complete yet.
	PendingRenamedTable      *string `json:"pendingRenamedTable,omitempty"`
	MaterializedView         bool    `json:"materializedView"`
	WaitForUpdatePreparation bool    `json:"waitForUpdatePreparation"`
	// The sort columns to use.
	SortColumns       []string          `json:"sortColumns,omitempty"`
	DistributionStyle DistributionStyle `json:"distributionStyle"`
}

func (o *WarehouseRedshift) GetType() WarehouseRedshiftType {
	if o == nil {
		return WarehouseRedshiftType("")
	}
	return o.Type
}

func (o *WarehouseRedshift) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *WarehouseRedshift) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *WarehouseRedshift) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

func (o *WarehouseRedshift) GetPendingRenamedTable() *string {
	if o == nil {
		return nil
	}
	return o.PendingRenamedTable
}

func (o *WarehouseRedshift) GetMaterializedView() bool {
	if o == nil {
		return false
	}
	return o.MaterializedView
}

func (o *WarehouseRedshift) GetWaitForUpdatePreparation() bool {
	if o == nil {
		return false
	}
	return o.WaitForUpdatePreparation
}

func (o *WarehouseRedshift) GetSortColumns() []string {
	if o == nil {
		return nil
	}
	return o.SortColumns
}

func (o *WarehouseRedshift) GetDistributionStyle() DistributionStyle {
	if o == nil {
		return DistributionStyle{}
	}
	return o.DistributionStyle
}

type WarehouseRedshiftInput struct {
	Type                     WarehouseRedshiftType `json:"type"`
	ConnectionID             string                `json:"connectionId"`
	Schema                   *string               `json:"schema,omitempty"`
	Table                    string                `json:"table"`
	MaterializedView         bool                  `json:"materializedView"`
	WaitForUpdatePreparation bool                  `json:"waitForUpdatePreparation"`
	// The sort columns to use.
	SortColumns       []string          `json:"sortColumns,omitempty"`
	DistributionStyle DistributionStyle `json:"distributionStyle"`
}

func (o *WarehouseRedshiftInput) GetType() WarehouseRedshiftType {
	if o == nil {
		return WarehouseRedshiftType("")
	}
	return o.Type
}

func (o *WarehouseRedshiftInput) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *WarehouseRedshiftInput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *WarehouseRedshiftInput) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

func (o *WarehouseRedshiftInput) GetMaterializedView() bool {
	if o == nil {
		return false
	}
	return o.MaterializedView
}

func (o *WarehouseRedshiftInput) GetWaitForUpdatePreparation() bool {
	if o == nil {
		return false
	}
	return o.WaitForUpdatePreparation
}

func (o *WarehouseRedshiftInput) GetSortColumns() []string {
	if o == nil {
		return nil
	}
	return o.SortColumns
}

func (o *WarehouseRedshiftInput) GetDistributionStyle() DistributionStyle {
	if o == nil {
		return DistributionStyle{}
	}
	return o.DistributionStyle
}
