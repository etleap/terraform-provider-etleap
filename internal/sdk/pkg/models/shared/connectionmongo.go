// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionMongoType string

const (
	ConnectionMongoTypeMongodb ConnectionMongoType = "MONGODB"
)

func (e ConnectionMongoType) ToPointer() *ConnectionMongoType {
	return &e
}

func (e *ConnectionMongoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MONGODB":
		*e = ConnectionMongoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionMongoType: %v", v)
	}
}

// ConnectionMongoStatus - The current status of the connection.
type ConnectionMongoStatus string

const (
	ConnectionMongoStatusUnknown     ConnectionMongoStatus = "UNKNOWN"
	ConnectionMongoStatusUp          ConnectionMongoStatus = "UP"
	ConnectionMongoStatusDown        ConnectionMongoStatus = "DOWN"
	ConnectionMongoStatusResize      ConnectionMongoStatus = "RESIZE"
	ConnectionMongoStatusMaintenance ConnectionMongoStatus = "MAINTENANCE"
	ConnectionMongoStatusQuota       ConnectionMongoStatus = "QUOTA"
	ConnectionMongoStatusCreating    ConnectionMongoStatus = "CREATING"
)

func (e ConnectionMongoStatus) ToPointer() *ConnectionMongoStatus {
	return &e
}

func (e *ConnectionMongoStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionMongoStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionMongoStatus: %v", v)
	}
}

type ConnectionMongoDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionMongoDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionMongoDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionMongoDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionMongoDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionMongoDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionMongoDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionMongoDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

type ConnectionMongoReplicaSet struct {
	Address string `json:"address"`
	Port    int64  `json:"port"`
}

func (o *ConnectionMongoReplicaSet) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionMongoReplicaSet) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

type ConnectionMongo struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string              `json:"name"`
	Type ConnectionMongoType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionMongoStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionMongoDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	SSHConfig             *SSHConfig                             `json:"sshConfig,omitempty"`
	ReplicaSet            []ConnectionMongoReplicaSet            `json:"replicaSet"`
	// The name of the database, e.g. 'etleap'
	DatabaseName string `json:"databaseName"`
	// Whether Etleap should connect over SSL.
	UseSsl   *bool  `default:"false" json:"useSsl"`
	Username string `json:"username"`
	// The database used for authentication. Omit to use the connection database.
	AuthDatabaseName *string `json:"authDatabaseName,omitempty"`
}

func (c ConnectionMongo) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionMongo) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionMongo) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionMongo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionMongo) GetType() ConnectionMongoType {
	if o == nil {
		return ConnectionMongoType("")
	}
	return o.Type
}

func (o *ConnectionMongo) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionMongo) GetStatus() ConnectionMongoStatus {
	if o == nil {
		return ConnectionMongoStatus("")
	}
	return o.Status
}

func (o *ConnectionMongo) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionMongo) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionMongo) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionMongo) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionMongo) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionMongo) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionMongo) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionMongo) GetDefaultUpdateSchedule() []ConnectionMongoDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionMongoDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionMongo) GetSSHConfig() *SSHConfig {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}

func (o *ConnectionMongo) GetReplicaSet() []ConnectionMongoReplicaSet {
	if o == nil {
		return []ConnectionMongoReplicaSet{}
	}
	return o.ReplicaSet
}

func (o *ConnectionMongo) GetDatabaseName() string {
	if o == nil {
		return ""
	}
	return o.DatabaseName
}

func (o *ConnectionMongo) GetUseSsl() *bool {
	if o == nil {
		return nil
	}
	return o.UseSsl
}

func (o *ConnectionMongo) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionMongo) GetAuthDatabaseName() *string {
	if o == nil {
		return nil
	}
	return o.AuthDatabaseName
}

type ConnectionMongoInput struct {
	// The unique name of this connection.
	Name string              `json:"name"`
	Type ConnectionMongoType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes        `json:"updateSchedule,omitempty"`
	SSHConfig      *SSHConfig                  `json:"sshConfig,omitempty"`
	ReplicaSet     []ConnectionMongoReplicaSet `json:"replicaSet"`
	// The name of the database, e.g. 'etleap'
	DatabaseName string `json:"databaseName"`
	// Whether Etleap should connect over SSL.
	UseSsl   *bool  `default:"false" json:"useSsl"`
	Username string `json:"username"`
	Password string `json:"password"`
	// The database used for authentication. Omit to use the connection database.
	AuthDatabaseName *string `json:"authDatabaseName,omitempty"`
}

func (c ConnectionMongoInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionMongoInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionMongoInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionMongoInput) GetType() ConnectionMongoType {
	if o == nil {
		return ConnectionMongoType("")
	}
	return o.Type
}

func (o *ConnectionMongoInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionMongoInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionMongoInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionMongoInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionMongoInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionMongoInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionMongoInput) GetSSHConfig() *SSHConfig {
	if o == nil {
		return nil
	}
	return o.SSHConfig
}

func (o *ConnectionMongoInput) GetReplicaSet() []ConnectionMongoReplicaSet {
	if o == nil {
		return []ConnectionMongoReplicaSet{}
	}
	return o.ReplicaSet
}

func (o *ConnectionMongoInput) GetDatabaseName() string {
	if o == nil {
		return ""
	}
	return o.DatabaseName
}

func (o *ConnectionMongoInput) GetUseSsl() *bool {
	if o == nil {
		return nil
	}
	return o.UseSsl
}

func (o *ConnectionMongoInput) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionMongoInput) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *ConnectionMongoInput) GetAuthDatabaseName() *string {
	if o == nil {
		return nil
	}
	return o.AuthDatabaseName
}
