// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WarehouseSnowflakeType string

const (
	WarehouseSnowflakeTypeSnowflake WarehouseSnowflakeType = "SNOWFLAKE"
)

func (e WarehouseSnowflakeType) ToPointer() *WarehouseSnowflakeType {
	return &e
}

func (e *WarehouseSnowflakeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SNOWFLAKE":
		*e = WarehouseSnowflakeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WarehouseSnowflakeType: %v", v)
	}
}

type WarehouseSnowflake struct {
	// Only set when a table rename was triggered but is not complete yet.
	PendingRenamedTable      *string                `json:"pendingRenamedTable,omitempty"`
	ConnectionID             string                 `json:"connectionId"`
	MaterializedView         bool                   `json:"materializedView"`
	WaitForUpdatePreparation bool                   `json:"waitForUpdatePreparation"`
	Table                    string                 `json:"table"`
	Type                     WarehouseSnowflakeType `json:"type"`
	Schema                   *string                `json:"schema,omitempty"`
}

func (o *WarehouseSnowflake) GetPendingRenamedTable() *string {
	if o == nil {
		return nil
	}
	return o.PendingRenamedTable
}

func (o *WarehouseSnowflake) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *WarehouseSnowflake) GetMaterializedView() bool {
	if o == nil {
		return false
	}
	return o.MaterializedView
}

func (o *WarehouseSnowflake) GetWaitForUpdatePreparation() bool {
	if o == nil {
		return false
	}
	return o.WaitForUpdatePreparation
}

func (o *WarehouseSnowflake) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

func (o *WarehouseSnowflake) GetType() WarehouseSnowflakeType {
	if o == nil {
		return WarehouseSnowflakeType("")
	}
	return o.Type
}

func (o *WarehouseSnowflake) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

type WarehouseSnowflakeInput struct {
	ConnectionID             string                 `json:"connectionId"`
	MaterializedView         bool                   `json:"materializedView"`
	WaitForUpdatePreparation bool                   `json:"waitForUpdatePreparation"`
	Table                    string                 `json:"table"`
	Type                     WarehouseSnowflakeType `json:"type"`
	Schema                   *string                `json:"schema,omitempty"`
}

func (o *WarehouseSnowflakeInput) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *WarehouseSnowflakeInput) GetMaterializedView() bool {
	if o == nil {
		return false
	}
	return o.MaterializedView
}

func (o *WarehouseSnowflakeInput) GetWaitForUpdatePreparation() bool {
	if o == nil {
		return false
	}
	return o.WaitForUpdatePreparation
}

func (o *WarehouseSnowflakeInput) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

func (o *WarehouseSnowflakeInput) GetType() WarehouseSnowflakeType {
	if o == nil {
		return WarehouseSnowflakeType("")
	}
	return o.Type
}

func (o *WarehouseSnowflakeInput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}
