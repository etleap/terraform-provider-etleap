// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionEgnyteStatus - The current status of the connection.
type ConnectionEgnyteStatus string

const (
	ConnectionEgnyteStatusUnknown     ConnectionEgnyteStatus = "UNKNOWN"
	ConnectionEgnyteStatusUp          ConnectionEgnyteStatus = "UP"
	ConnectionEgnyteStatusDown        ConnectionEgnyteStatus = "DOWN"
	ConnectionEgnyteStatusResize      ConnectionEgnyteStatus = "RESIZE"
	ConnectionEgnyteStatusMaintenance ConnectionEgnyteStatus = "MAINTENANCE"
	ConnectionEgnyteStatusQuota       ConnectionEgnyteStatus = "QUOTA"
	ConnectionEgnyteStatusCreating    ConnectionEgnyteStatus = "CREATING"
)

func (e ConnectionEgnyteStatus) ToPointer() *ConnectionEgnyteStatus {
	return &e
}

func (e *ConnectionEgnyteStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionEgnyteStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionEgnyteStatus: %v", v)
	}
}

type ConnectionEgnyteDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionEgnyteDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionEgnyteDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionEgnyteDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionEgnyteDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionEgnyteDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionEgnyteDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionEgnyteDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionEgnyteType string

const (
	ConnectionEgnyteTypeEgnyte ConnectionEgnyteType = "EGNYTE"
)

func (e ConnectionEgnyteType) ToPointer() *ConnectionEgnyteType {
	return &e
}

func (e *ConnectionEgnyteType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EGNYTE":
		*e = ConnectionEgnyteType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionEgnyteType: %v", v)
	}
}

type ConnectionEgnyte struct {
	// The current status of the connection.
	Status ConnectionEgnyteStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionEgnyteDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool                 `json:"active"`
	Type   ConnectionEgnyteType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// The path for your base directory. Use "/" for the whole file system.
	BaseDirectory string `json:"baseDirectory"`
	// The name of your Egnyte domain.
	DomainName string `json:"domainName"`
}

func (c ConnectionEgnyte) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionEgnyte) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionEgnyte) GetStatus() ConnectionEgnyteStatus {
	if o == nil {
		return ConnectionEgnyteStatus("")
	}
	return o.Status
}

func (o *ConnectionEgnyte) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionEgnyte) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionEgnyte) GetDefaultUpdateSchedule() []ConnectionEgnyteDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionEgnyteDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionEgnyte) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionEgnyte) GetType() ConnectionEgnyteType {
	if o == nil {
		return ConnectionEgnyteType("")
	}
	return o.Type
}

func (o *ConnectionEgnyte) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionEgnyte) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionEgnyte) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionEgnyte) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionEgnyte) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionEgnyte) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionEgnyte) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionEgnyte) GetBaseDirectory() string {
	if o == nil {
		return ""
	}
	return o.BaseDirectory
}

func (o *ConnectionEgnyte) GetDomainName() string {
	if o == nil {
		return ""
	}
	return o.DomainName
}

type ConnectionEgnyteInput struct {
	// The unique name of this connection.
	Name string               `json:"name"`
	Type ConnectionEgnyteType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Code retrieved from `/connections/oauth2-initiation`. **Note:** it is short-lived, therefore the connection creation should be done as soon as code is returned.
	Code string `json:"code"`
	// The path for your base directory. Use "/" for the whole file system.
	BaseDirectory string `json:"baseDirectory"`
	// The name of your Egnyte domain.
	DomainName string `json:"domainName"`
}

func (o *ConnectionEgnyteInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionEgnyteInput) GetType() ConnectionEgnyteType {
	if o == nil {
		return ConnectionEgnyteType("")
	}
	return o.Type
}

func (o *ConnectionEgnyteInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionEgnyteInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionEgnyteInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionEgnyteInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionEgnyteInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionEgnyteInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionEgnyteInput) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *ConnectionEgnyteInput) GetBaseDirectory() string {
	if o == nil {
		return ""
	}
	return o.BaseDirectory
}

func (o *ConnectionEgnyteInput) GetDomainName() string {
	if o == nil {
		return ""
	}
	return o.DomainName
}
