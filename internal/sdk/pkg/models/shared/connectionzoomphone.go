// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionZoomPhoneType string

const (
	ConnectionZoomPhoneTypeZoomPhone ConnectionZoomPhoneType = "ZOOM_PHONE"
)

func (e ConnectionZoomPhoneType) ToPointer() *ConnectionZoomPhoneType {
	return &e
}

func (e *ConnectionZoomPhoneType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ZOOM_PHONE":
		*e = ConnectionZoomPhoneType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionZoomPhoneType: %v", v)
	}
}

// ConnectionZoomPhoneStatus - The current status of the connection.
type ConnectionZoomPhoneStatus string

const (
	ConnectionZoomPhoneStatusUnknown     ConnectionZoomPhoneStatus = "UNKNOWN"
	ConnectionZoomPhoneStatusUp          ConnectionZoomPhoneStatus = "UP"
	ConnectionZoomPhoneStatusDown        ConnectionZoomPhoneStatus = "DOWN"
	ConnectionZoomPhoneStatusResize      ConnectionZoomPhoneStatus = "RESIZE"
	ConnectionZoomPhoneStatusMaintenance ConnectionZoomPhoneStatus = "MAINTENANCE"
	ConnectionZoomPhoneStatusQuota       ConnectionZoomPhoneStatus = "QUOTA"
	ConnectionZoomPhoneStatusCreating    ConnectionZoomPhoneStatus = "CREATING"
)

func (e ConnectionZoomPhoneStatus) ToPointer() *ConnectionZoomPhoneStatus {
	return &e
}

func (e *ConnectionZoomPhoneStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionZoomPhoneStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionZoomPhoneStatus: %v", v)
	}
}

type ConnectionZoomPhone struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionZoomPhoneType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionZoomPhoneStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// Under Admin Dashboard > Created App > App credentials
	ClientID string `json:"clientId"`
}

func (c ConnectionZoomPhone) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionZoomPhone) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionZoomPhone) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionZoomPhone) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionZoomPhone) GetType() ConnectionZoomPhoneType {
	if o == nil {
		return ConnectionZoomPhoneType("")
	}
	return o.Type
}

func (o *ConnectionZoomPhone) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionZoomPhone) GetStatus() ConnectionZoomPhoneStatus {
	if o == nil {
		return ConnectionZoomPhoneStatus("")
	}
	return o.Status
}

func (o *ConnectionZoomPhone) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionZoomPhone) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

type ConnectionZoomPhoneInput struct {
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionZoomPhoneType `json:"type"`
	// Code retrieved from `/connections/oauth2-initiation`. **Note:** it is short-lived, therefore the connection creation should be done as soon as code is returned.
	Code string `json:"code"`
	// Under Admin Dashboard > Created App > App credentials
	ClientID string `json:"clientId"`
	// Under Admin Dashboard > Created App > App credentials
	ClientSecret string `json:"clientSecret"`
}

func (o *ConnectionZoomPhoneInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionZoomPhoneInput) GetType() ConnectionZoomPhoneType {
	if o == nil {
		return ConnectionZoomPhoneType("")
	}
	return o.Type
}

func (o *ConnectionZoomPhoneInput) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *ConnectionZoomPhoneInput) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ConnectionZoomPhoneInput) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}
