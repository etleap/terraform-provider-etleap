// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceOutlookUpdateType string

const (
	SourceOutlookUpdateTypeOutlook SourceOutlookUpdateType = "OUTLOOK"
)

func (e SourceOutlookUpdateType) ToPointer() *SourceOutlookUpdateType {
	return &e
}

func (e *SourceOutlookUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OUTLOOK":
		*e = SourceOutlookUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOutlookUpdateType: %v", v)
	}
}

type SourceOutlookUpdate struct {
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64                   `json:"latencyThreshold,omitempty"`
	Type             *SourceOutlookUpdateType `json:"type,omitempty"`
}

func (o *SourceOutlookUpdate) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceOutlookUpdate) GetType() *SourceOutlookUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}
