// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionBraintreeType string

const (
	ConnectionBraintreeTypeBraintree ConnectionBraintreeType = "BRAINTREE"
)

func (e ConnectionBraintreeType) ToPointer() *ConnectionBraintreeType {
	return &e
}

func (e *ConnectionBraintreeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BRAINTREE":
		*e = ConnectionBraintreeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionBraintreeType: %v", v)
	}
}

// ConnectionBraintreeStatus - The current status of the connection.
type ConnectionBraintreeStatus string

const (
	ConnectionBraintreeStatusUnknown     ConnectionBraintreeStatus = "UNKNOWN"
	ConnectionBraintreeStatusUp          ConnectionBraintreeStatus = "UP"
	ConnectionBraintreeStatusDown        ConnectionBraintreeStatus = "DOWN"
	ConnectionBraintreeStatusResize      ConnectionBraintreeStatus = "RESIZE"
	ConnectionBraintreeStatusMaintenance ConnectionBraintreeStatus = "MAINTENANCE"
	ConnectionBraintreeStatusQuota       ConnectionBraintreeStatus = "QUOTA"
	ConnectionBraintreeStatusCreating    ConnectionBraintreeStatus = "CREATING"
)

func (e ConnectionBraintreeStatus) ToPointer() *ConnectionBraintreeStatus {
	return &e
}

func (e *ConnectionBraintreeStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionBraintreeStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionBraintreeStatus: %v", v)
	}
}

type ConnectionBraintreeDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionBraintreeDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionBraintreeDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionBraintreeDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionBraintreeDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionBraintreeDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionBraintreeDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionBraintreeDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

type ConnectionBraintree struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionBraintreeType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionBraintreeStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionBraintreeDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Your Braintree tenant Merchant ID.
	MerchantID string `json:"merchantId"`
	// The public API key.
	PublicKey string `json:"publicKey"`
	// Check this box if this is a sandbox account.
	Sandbox bool `json:"sandbox"`
}

func (c ConnectionBraintree) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionBraintree) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionBraintree) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionBraintree) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionBraintree) GetType() ConnectionBraintreeType {
	if o == nil {
		return ConnectionBraintreeType("")
	}
	return o.Type
}

func (o *ConnectionBraintree) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionBraintree) GetStatus() ConnectionBraintreeStatus {
	if o == nil {
		return ConnectionBraintreeStatus("")
	}
	return o.Status
}

func (o *ConnectionBraintree) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionBraintree) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionBraintree) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionBraintree) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionBraintree) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionBraintree) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionBraintree) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionBraintree) GetDefaultUpdateSchedule() []ConnectionBraintreeDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionBraintreeDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionBraintree) GetMerchantID() string {
	if o == nil {
		return ""
	}
	return o.MerchantID
}

func (o *ConnectionBraintree) GetPublicKey() string {
	if o == nil {
		return ""
	}
	return o.PublicKey
}

func (o *ConnectionBraintree) GetSandbox() bool {
	if o == nil {
		return false
	}
	return o.Sandbox
}

type ConnectionBraintreeInput struct {
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionBraintreeType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Your Braintree tenant Merchant ID.
	MerchantID string `json:"merchantId"`
	// The public API key.
	PublicKey string `json:"publicKey"`
	// The private API key.
	PrivateKey string `json:"privateKey"`
	// Check this box if this is a sandbox account.
	Sandbox bool `json:"sandbox"`
}

func (o *ConnectionBraintreeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionBraintreeInput) GetType() ConnectionBraintreeType {
	if o == nil {
		return ConnectionBraintreeType("")
	}
	return o.Type
}

func (o *ConnectionBraintreeInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionBraintreeInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionBraintreeInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionBraintreeInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionBraintreeInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionBraintreeInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionBraintreeInput) GetMerchantID() string {
	if o == nil {
		return ""
	}
	return o.MerchantID
}

func (o *ConnectionBraintreeInput) GetPublicKey() string {
	if o == nil {
		return ""
	}
	return o.PublicKey
}

func (o *ConnectionBraintreeInput) GetPrivateKey() string {
	if o == nil {
		return ""
	}
	return o.PrivateKey
}

func (o *ConnectionBraintreeInput) GetSandbox() bool {
	if o == nil {
		return false
	}
	return o.Sandbox
}
