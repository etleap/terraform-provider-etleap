// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionElasticSearchStatus - The current status of the connection.
type ConnectionElasticSearchStatus string

const (
	ConnectionElasticSearchStatusUnknown     ConnectionElasticSearchStatus = "UNKNOWN"
	ConnectionElasticSearchStatusUp          ConnectionElasticSearchStatus = "UP"
	ConnectionElasticSearchStatusDown        ConnectionElasticSearchStatus = "DOWN"
	ConnectionElasticSearchStatusResize      ConnectionElasticSearchStatus = "RESIZE"
	ConnectionElasticSearchStatusMaintenance ConnectionElasticSearchStatus = "MAINTENANCE"
	ConnectionElasticSearchStatusQuota       ConnectionElasticSearchStatus = "QUOTA"
	ConnectionElasticSearchStatusCreating    ConnectionElasticSearchStatus = "CREATING"
)

func (e ConnectionElasticSearchStatus) ToPointer() *ConnectionElasticSearchStatus {
	return &e
}

func (e *ConnectionElasticSearchStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionElasticSearchStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionElasticSearchStatus: %v", v)
	}
}

type ConnectionElasticSearchDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionElasticSearchDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionElasticSearchDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionElasticSearchDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionElasticSearchDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionElasticSearchDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionElasticSearchDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionElasticSearchDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionElasticSearchType string

const (
	ConnectionElasticSearchTypeElasticsearch ConnectionElasticSearchType = "ELASTICSEARCH"
)

func (e ConnectionElasticSearchType) ToPointer() *ConnectionElasticSearchType {
	return &e
}

func (e *ConnectionElasticSearchType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ELASTICSEARCH":
		*e = ConnectionElasticSearchType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionElasticSearchType: %v", v)
	}
}

type ConnectionElasticSearch struct {
	// The current status of the connection.
	Status ConnectionElasticSearchStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionElasticSearchDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool                        `json:"active"`
	Type   ConnectionElasticSearchType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// An account must be setup in your Elastic cluster with at least the following permissions:
	//
	// Cluster privileges: <ul><li>monitor</li></ul>
	//  Index privileges: <ul><li>read</li><li>monitor</li><li>view_index_metadata</li></ul>
	//  Index privileges must be enabled for all indices you want Etleap to access. These permissions can be set up in Kibana or by consulting <a target="blank" href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/authorization.html">the Elastic documentation</a> for the version of your cluster.
	Username *string `json:"username,omitempty"`
	// Enable this if your Elastic endpoint URL starts with 'https'. Usually this should be enabled if you are connecting via port 9243.
	SslEnabled bool `json:"sslEnabled"`
	// E.g. 'etleap.com' or '10.0.0.2'.
	Address string `json:"address"`
	Port    int64  `json:"port"`
}

func (c ConnectionElasticSearch) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionElasticSearch) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionElasticSearch) GetStatus() ConnectionElasticSearchStatus {
	if o == nil {
		return ConnectionElasticSearchStatus("")
	}
	return o.Status
}

func (o *ConnectionElasticSearch) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionElasticSearch) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionElasticSearch) GetDefaultUpdateSchedule() []ConnectionElasticSearchDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionElasticSearchDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionElasticSearch) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionElasticSearch) GetType() ConnectionElasticSearchType {
	if o == nil {
		return ConnectionElasticSearchType("")
	}
	return o.Type
}

func (o *ConnectionElasticSearch) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionElasticSearch) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionElasticSearch) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionElasticSearch) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionElasticSearch) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionElasticSearch) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionElasticSearch) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionElasticSearch) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *ConnectionElasticSearch) GetSslEnabled() bool {
	if o == nil {
		return false
	}
	return o.SslEnabled
}

func (o *ConnectionElasticSearch) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionElasticSearch) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

type ConnectionElasticSearchInput struct {
	// The unique name of this connection.
	Name string                      `json:"name"`
	Type ConnectionElasticSearchType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// An account must be setup in your Elastic cluster with at least the following permissions:
	//
	// Cluster privileges: <ul><li>monitor</li></ul>
	//  Index privileges: <ul><li>read</li><li>monitor</li><li>view_index_metadata</li></ul>
	//  Index privileges must be enabled for all indices you want Etleap to access. These permissions can be set up in Kibana or by consulting <a target="blank" href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/authorization.html">the Elastic documentation</a> for the version of your cluster.
	Username *string `json:"username,omitempty"`
	// Enable this if your Elastic endpoint URL starts with 'https'. Usually this should be enabled if you are connecting via port 9243.
	SslEnabled bool `json:"sslEnabled"`
	// E.g. 'etleap.com' or '10.0.0.2'.
	Address  string  `json:"address"`
	Password *string `json:"password,omitempty"`
	Port     int64   `json:"port"`
}

func (o *ConnectionElasticSearchInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionElasticSearchInput) GetType() ConnectionElasticSearchType {
	if o == nil {
		return ConnectionElasticSearchType("")
	}
	return o.Type
}

func (o *ConnectionElasticSearchInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionElasticSearchInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionElasticSearchInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionElasticSearchInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionElasticSearchInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionElasticSearchInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionElasticSearchInput) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *ConnectionElasticSearchInput) GetSslEnabled() bool {
	if o == nil {
		return false
	}
	return o.SslEnabled
}

func (o *ConnectionElasticSearchInput) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ConnectionElasticSearchInput) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *ConnectionElasticSearchInput) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}
