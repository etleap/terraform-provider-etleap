// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConnectionDeltaLakeUpdateType - <!-- theme: warning -->
// > Delta Lake connections are currently in Beta which means that they are subject to non-backwards-compatible and breaking changes.
type ConnectionDeltaLakeUpdateType string

const (
	ConnectionDeltaLakeUpdateTypeDeltaLake ConnectionDeltaLakeUpdateType = "DELTA_LAKE"
)

func (e ConnectionDeltaLakeUpdateType) ToPointer() *ConnectionDeltaLakeUpdateType {
	return &e
}

func (e *ConnectionDeltaLakeUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DELTA_LAKE":
		*e = ConnectionDeltaLakeUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionDeltaLakeUpdateType: %v", v)
	}
}

type ConnectionDeltaLakeUpdate struct {
	// The unique name of this connection.
	Name *string `json:"name,omitempty"`
	// <!-- theme: warning -->
	// > Delta Lake connections are currently in Beta which means that they are subject to non-backwards-compatible and breaking changes.
	Type *ConnectionDeltaLakeUpdateType `json:"type"`
	// Whether this connection should be marked as active.
	Active *bool `json:"active,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	Hostname       *string              `json:"hostname,omitempty"`
	// HTTP path for your Databricks compute cluster or SQL Warehouse.
	HTTPPath *string `json:"httpPath,omitempty"`
	// Authenticates the user that you want to connect to Databricks with. Instructions on generating a personal access token can be found <a href='https://docs.databricks.com/dev-tools/api/latest/authentication.html#token-management' target="_blank">here</a>.
	PersonalAccessToken *string `json:"personalAccessToken,omitempty"`
	// The schema to use when this connection is used as a source. When the connection is used as a destination the schema can be set to a different one for each pipeline.
	Schema *string `json:"schema,omitempty"`
}

func (o *ConnectionDeltaLakeUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionDeltaLakeUpdate) GetType() *ConnectionDeltaLakeUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConnectionDeltaLakeUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionDeltaLakeUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionDeltaLakeUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionDeltaLakeUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionDeltaLakeUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionDeltaLakeUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionDeltaLakeUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionDeltaLakeUpdate) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *ConnectionDeltaLakeUpdate) GetHTTPPath() *string {
	if o == nil {
		return nil
	}
	return o.HTTPPath
}

func (o *ConnectionDeltaLakeUpdate) GetPersonalAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.PersonalAccessToken
}

func (o *ConnectionDeltaLakeUpdate) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}
