// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type DestinationS3DataLakeType string

const (
	DestinationS3DataLakeTypeS3DataLake DestinationS3DataLakeType = "S3_DATA_LAKE"
)

func (e DestinationS3DataLakeType) ToPointer() *DestinationS3DataLakeType {
	return &e
}

func (e *DestinationS3DataLakeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_DATA_LAKE":
		*e = DestinationS3DataLakeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationS3DataLakeType: %v", v)
	}
}

// OutputFormat - Format for output files. Defaults to `PARQUET`. For Glue-enabled destinations, only `PARQUET` is a valid format.
type OutputFormat string

const (
	OutputFormatParquet OutputFormat = "PARQUET"
	OutputFormatCsv     OutputFormat = "CSV"
)

func (e OutputFormat) ToPointer() *OutputFormat {
	return &e
}

func (e *OutputFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARQUET":
		fallthrough
	case "CSV":
		*e = OutputFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputFormat: %v", v)
	}
}

type DestinationS3DataLake struct {
	Type DestinationS3DataLakeType `json:"type"`
	// The universally unique identifier of the destination connection.
	ConnectionID string `json:"connectionId"`
	// If set to `true`, a `Transformation Complete` event is published once a transformation completes, and the pipeline waits for a `Quality Check Complete` event before loading to the destination. Defaults to `false`.
	WaitForQualityCheck *bool `json:"waitForQualityCheck,omitempty"`
	// The destination column names that constitute the primary key. <br> If the pipline has a sharded source include a column that specifies the shard identifier.
	PrimaryKey []string `json:"primaryKey,omitempty"`
	// Whether schema changes detected during transformation should be handled automatically or not. Defaults to `true`.
	AutomaticSchemaChanges *bool `json:"automaticSchemaChanges,omitempty"`
	// The S3 path prefix to use for this pipeline. The data key in the destination bucket starts with `{connection.pathPrefix}/{pathPrefix}/v{version.pipeline}/`.
	PathPrefix string `json:"pathPrefix"`
	// Format for output files. Defaults to `PARQUET`. For Glue-enabled destinations, only `PARQUET` is a valid format.
	OutputFormat *OutputFormat `default:"PARQUET" json:"outputFormat"`
	// Defaults to 'false'.
	GenerateSnapshots *bool `json:"generateSnapshots,omitempty"`
}

func (d DestinationS3DataLake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationS3DataLake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationS3DataLake) GetType() DestinationS3DataLakeType {
	if o == nil {
		return DestinationS3DataLakeType("")
	}
	return o.Type
}

func (o *DestinationS3DataLake) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *DestinationS3DataLake) GetWaitForQualityCheck() *bool {
	if o == nil {
		return nil
	}
	return o.WaitForQualityCheck
}

func (o *DestinationS3DataLake) GetPrimaryKey() []string {
	if o == nil {
		return nil
	}
	return o.PrimaryKey
}

func (o *DestinationS3DataLake) GetAutomaticSchemaChanges() *bool {
	if o == nil {
		return nil
	}
	return o.AutomaticSchemaChanges
}

func (o *DestinationS3DataLake) GetPathPrefix() string {
	if o == nil {
		return ""
	}
	return o.PathPrefix
}

func (o *DestinationS3DataLake) GetOutputFormat() *OutputFormat {
	if o == nil {
		return nil
	}
	return o.OutputFormat
}

func (o *DestinationS3DataLake) GetGenerateSnapshots() *bool {
	if o == nil {
		return nil
	}
	return o.GenerateSnapshots
}
