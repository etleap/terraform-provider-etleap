// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionActiveCampaignType string

const (
	ConnectionActiveCampaignTypeActiveCampaign ConnectionActiveCampaignType = "ACTIVE_CAMPAIGN"
)

func (e ConnectionActiveCampaignType) ToPointer() *ConnectionActiveCampaignType {
	return &e
}

func (e *ConnectionActiveCampaignType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE_CAMPAIGN":
		*e = ConnectionActiveCampaignType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionActiveCampaignType: %v", v)
	}
}

// Status - The current status of the connection.
type Status string

const (
	StatusUnknown     Status = "UNKNOWN"
	StatusUp          Status = "UP"
	StatusDown        Status = "DOWN"
	StatusResize      Status = "RESIZE"
	StatusMaintenance Status = "MAINTENANCE"
	StatusQuota       Status = "QUOTA"
	StatusCreating    Status = "CREATING"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type ConnectionActiveCampaign struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                       `json:"name"`
	Type ConnectionActiveCampaignType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status Status `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The base URL is specific to your account. Your API URL can be found in your account on the My Settings page under the "Developer" tab.
	BaseURL string `json:"baseUrl"`
}

func (c ConnectionActiveCampaign) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionActiveCampaign) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionActiveCampaign) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionActiveCampaign) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionActiveCampaign) GetType() ConnectionActiveCampaignType {
	if o == nil {
		return ConnectionActiveCampaignType("")
	}
	return o.Type
}

func (o *ConnectionActiveCampaign) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionActiveCampaign) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

func (o *ConnectionActiveCampaign) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionActiveCampaign) GetBaseURL() string {
	if o == nil {
		return ""
	}
	return o.BaseURL
}

type ConnectionActiveCampaignInput struct {
	// The unique name of this connection.
	Name string                       `json:"name"`
	Type ConnectionActiveCampaignType `json:"type"`
	// The base URL is specific to your account. Your API URL can be found in your account on the My Settings page under the "Developer" tab.
	BaseURL string `json:"baseUrl"`
	// Your API key can be found in your account on the Settings page under the "Developer" tab. Each user in your ActiveCampaign account has their own unique API key.
	APIKey string `json:"apiKey"`
}

func (o *ConnectionActiveCampaignInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionActiveCampaignInput) GetType() ConnectionActiveCampaignType {
	if o == nil {
		return ConnectionActiveCampaignType("")
	}
	return o.Type
}

func (o *ConnectionActiveCampaignInput) GetBaseURL() string {
	if o == nil {
		return ""
	}
	return o.BaseURL
}

func (o *ConnectionActiveCampaignInput) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}
