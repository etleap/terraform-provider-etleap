// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionActiveCampaignUpdateType string

const (
	ConnectionActiveCampaignUpdateTypeActiveCampaign ConnectionActiveCampaignUpdateType = "ACTIVE_CAMPAIGN"
)

func (e ConnectionActiveCampaignUpdateType) ToPointer() *ConnectionActiveCampaignUpdateType {
	return &e
}

func (e *ConnectionActiveCampaignUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE_CAMPAIGN":
		*e = ConnectionActiveCampaignUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionActiveCampaignUpdateType: %v", v)
	}
}

type ConnectionActiveCampaignUpdate struct {
	// The unique name of this connection.
	Name *string                            `json:"name,omitempty"`
	Type ConnectionActiveCampaignUpdateType `json:"type"`
	// Whether this connection should be marked as active.
	Active *bool `json:"active,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// The base URL is specific to your account. Your API URL can be found in your account on the My Settings page under the "Developer" tab.
	BaseURL *string `json:"baseUrl,omitempty"`
	// Your API key can be found in your account on the Settings page under the "Developer" tab. Each user in your ActiveCampaign account has their own unique API key.
	APIKey *string `json:"apiKey,omitempty"`
}

func (o *ConnectionActiveCampaignUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionActiveCampaignUpdate) GetType() ConnectionActiveCampaignUpdateType {
	if o == nil {
		return ConnectionActiveCampaignUpdateType("")
	}
	return o.Type
}

func (o *ConnectionActiveCampaignUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionActiveCampaignUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionActiveCampaignUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionActiveCampaignUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionActiveCampaignUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionActiveCampaignUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionActiveCampaignUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionActiveCampaignUpdate) GetBaseURL() *string {
	if o == nil {
		return nil
	}
	return o.BaseURL
}

func (o *ConnectionActiveCampaignUpdate) GetAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.APIKey
}
