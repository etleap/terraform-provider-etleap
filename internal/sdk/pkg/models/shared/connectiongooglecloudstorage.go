// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionGoogleCloudStorageType string

const (
	ConnectionGoogleCloudStorageTypeGoogleCloudStorage ConnectionGoogleCloudStorageType = "GOOGLE_CLOUD_STORAGE"
)

func (e ConnectionGoogleCloudStorageType) ToPointer() *ConnectionGoogleCloudStorageType {
	return &e
}

func (e *ConnectionGoogleCloudStorageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GOOGLE_CLOUD_STORAGE":
		*e = ConnectionGoogleCloudStorageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionGoogleCloudStorageType: %v", v)
	}
}

// ConnectionGoogleCloudStorageStatus - The current status of the connection.
type ConnectionGoogleCloudStorageStatus string

const (
	ConnectionGoogleCloudStorageStatusUnknown     ConnectionGoogleCloudStorageStatus = "UNKNOWN"
	ConnectionGoogleCloudStorageStatusUp          ConnectionGoogleCloudStorageStatus = "UP"
	ConnectionGoogleCloudStorageStatusDown        ConnectionGoogleCloudStorageStatus = "DOWN"
	ConnectionGoogleCloudStorageStatusResize      ConnectionGoogleCloudStorageStatus = "RESIZE"
	ConnectionGoogleCloudStorageStatusMaintenance ConnectionGoogleCloudStorageStatus = "MAINTENANCE"
	ConnectionGoogleCloudStorageStatusQuota       ConnectionGoogleCloudStorageStatus = "QUOTA"
	ConnectionGoogleCloudStorageStatusCreating    ConnectionGoogleCloudStorageStatus = "CREATING"
)

func (e ConnectionGoogleCloudStorageStatus) ToPointer() *ConnectionGoogleCloudStorageStatus {
	return &e
}

func (e *ConnectionGoogleCloudStorageStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionGoogleCloudStorageStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionGoogleCloudStorageStatus: %v", v)
	}
}

type ConnectionGoogleCloudStorage struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                           `json:"name"`
	Type ConnectionGoogleCloudStorageType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionGoogleCloudStorageStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// A bucket you want to extract from. E.g. 'mybucket'
	Bucket string `json:"bucket"`
}

func (c ConnectionGoogleCloudStorage) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionGoogleCloudStorage) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionGoogleCloudStorage) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionGoogleCloudStorage) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionGoogleCloudStorage) GetType() ConnectionGoogleCloudStorageType {
	if o == nil {
		return ConnectionGoogleCloudStorageType("")
	}
	return o.Type
}

func (o *ConnectionGoogleCloudStorage) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionGoogleCloudStorage) GetStatus() ConnectionGoogleCloudStorageStatus {
	if o == nil {
		return ConnectionGoogleCloudStorageStatus("")
	}
	return o.Status
}

func (o *ConnectionGoogleCloudStorage) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionGoogleCloudStorage) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

type ConnectionGoogleCloudStorageInput struct {
	// The unique name of this connection.
	Name string                           `json:"name"`
	Type ConnectionGoogleCloudStorageType `json:"type"`
	// A bucket you want to extract from. E.g. 'mybucket'
	Bucket string `json:"bucket"`
	// To generate new JSON Credentials, go to the [Google Cloud Console](https://console.cloud.google.com/apis/credentials/), make sure you are on the correct project, and create or select an existing service account. Select the service account, and under "Keys" create a new key in JSON format. Paste the JSON object into the "JSON Credentials" fields.
	JSONCredentials string `json:"jsonCredentials"`
}

func (o *ConnectionGoogleCloudStorageInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionGoogleCloudStorageInput) GetType() ConnectionGoogleCloudStorageType {
	if o == nil {
		return ConnectionGoogleCloudStorageType("")
	}
	return o.Type
}

func (o *ConnectionGoogleCloudStorageInput) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *ConnectionGoogleCloudStorageInput) GetJSONCredentials() string {
	if o == nil {
		return ""
	}
	return o.JSONCredentials
}
