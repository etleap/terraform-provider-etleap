// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type ScriptOrLegacyScriptInputType string

const (
	ScriptOrLegacyScriptInputTypeScriptInput       ScriptOrLegacyScriptInputType = "script_input"
	ScriptOrLegacyScriptInputTypeLegacyScriptInput ScriptOrLegacyScriptInputType = "legacy_script_input"
)

// ScriptOrLegacyScriptInput - Whenever a script is required, we accept and/or return two types of scripts: a Script or Legacy Script. We return a Script object if all transforms specified in that script are supported by this API. Otherwise it will return a Legacy Script. Either Script or Legacy Script can be used when adding a script to a pipeline.
type ScriptOrLegacyScriptInput struct {
	ScriptInput       *ScriptInput
	LegacyScriptInput *LegacyScriptInput

	Type ScriptOrLegacyScriptInputType
}

func CreateScriptOrLegacyScriptInputScriptInput(scriptInput ScriptInput) ScriptOrLegacyScriptInput {
	typ := ScriptOrLegacyScriptInputTypeScriptInput

	return ScriptOrLegacyScriptInput{
		ScriptInput: &scriptInput,
		Type:        typ,
	}
}

func CreateScriptOrLegacyScriptInputLegacyScriptInput(legacyScriptInput LegacyScriptInput) ScriptOrLegacyScriptInput {
	typ := ScriptOrLegacyScriptInputTypeLegacyScriptInput

	return ScriptOrLegacyScriptInput{
		LegacyScriptInput: &legacyScriptInput,
		Type:              typ,
	}
}

func (u *ScriptOrLegacyScriptInput) UnmarshalJSON(data []byte) error {

	legacyScriptInput := new(LegacyScriptInput)
	if err := utils.UnmarshalJSON(data, &legacyScriptInput, "", true, true); err == nil {
		u.LegacyScriptInput = legacyScriptInput
		u.Type = ScriptOrLegacyScriptInputTypeLegacyScriptInput
		return nil
	}

	scriptInput := new(ScriptInput)
	if err := utils.UnmarshalJSON(data, &scriptInput, "", true, true); err == nil {
		u.ScriptInput = scriptInput
		u.Type = ScriptOrLegacyScriptInputTypeScriptInput
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ScriptOrLegacyScriptInput) MarshalJSON() ([]byte, error) {
	if u.ScriptInput != nil {
		return utils.MarshalJSON(u.ScriptInput, "", true)
	}

	if u.LegacyScriptInput != nil {
		return utils.MarshalJSON(u.LegacyScriptInput, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
