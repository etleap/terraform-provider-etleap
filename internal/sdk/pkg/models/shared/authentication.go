// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type AuthenticationType string

const (
	AuthenticationTypeBasic  AuthenticationType = "BASIC"
	AuthenticationTypeBearer AuthenticationType = "BEARER"
	AuthenticationTypeHeader AuthenticationType = "HEADER"
)

type Authentication struct {
	BasicAuthentication  *BasicAuthentication
	BearerAuthentication *BearerAuthentication
	HeaderAuthentication *HeaderAuthentication

	Type AuthenticationType
}

func CreateAuthenticationBasic(basic BasicAuthentication) Authentication {
	typ := AuthenticationTypeBasic
	typStr := BasicAuthenticationType(typ)
	basic.Type = &typStr

	return Authentication{
		BasicAuthentication: &basic,
		Type:                typ,
	}
}

func CreateAuthenticationBearer(bearer BearerAuthentication) Authentication {
	typ := AuthenticationTypeBearer
	typStr := BearerAuthenticationType(typ)
	bearer.Type = &typStr

	return Authentication{
		BearerAuthentication: &bearer,
		Type:                 typ,
	}
}

func CreateAuthenticationHeader(header HeaderAuthentication) Authentication {
	typ := AuthenticationTypeHeader
	typStr := HeaderAuthenticationType(typ)
	header.Type = &typStr

	return Authentication{
		HeaderAuthentication: &header,
		Type:                 typ,
	}
}

func (u *Authentication) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "BASIC":
		basicAuthentication := new(BasicAuthentication)
		if err := utils.UnmarshalJSON(data, &basicAuthentication, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.BasicAuthentication = basicAuthentication
		u.Type = AuthenticationTypeBasic
		return nil
	case "BEARER":
		bearerAuthentication := new(BearerAuthentication)
		if err := utils.UnmarshalJSON(data, &bearerAuthentication, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.BearerAuthentication = bearerAuthentication
		u.Type = AuthenticationTypeBearer
		return nil
	case "HEADER":
		headerAuthentication := new(HeaderAuthentication)
		if err := utils.UnmarshalJSON(data, &headerAuthentication, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.HeaderAuthentication = headerAuthentication
		u.Type = AuthenticationTypeHeader
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Authentication) MarshalJSON() ([]byte, error) {
	if u.BasicAuthentication != nil {
		return utils.MarshalJSON(u.BasicAuthentication, "", true)
	}

	if u.BearerAuthentication != nil {
		return utils.MarshalJSON(u.BearerAuthentication, "", true)
	}

	if u.HeaderAuthentication != nil {
		return utils.MarshalJSON(u.HeaderAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
