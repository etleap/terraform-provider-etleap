// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionBigQueryType string

const (
	ConnectionBigQueryTypeBigquery ConnectionBigQueryType = "BIGQUERY"
)

func (e ConnectionBigQueryType) ToPointer() *ConnectionBigQueryType {
	return &e
}

func (e *ConnectionBigQueryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BIGQUERY":
		*e = ConnectionBigQueryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionBigQueryType: %v", v)
	}
}

// ConnectionBigQueryStatus - The current status of the connection.
type ConnectionBigQueryStatus string

const (
	ConnectionBigQueryStatusUnknown     ConnectionBigQueryStatus = "UNKNOWN"
	ConnectionBigQueryStatusUp          ConnectionBigQueryStatus = "UP"
	ConnectionBigQueryStatusDown        ConnectionBigQueryStatus = "DOWN"
	ConnectionBigQueryStatusResize      ConnectionBigQueryStatus = "RESIZE"
	ConnectionBigQueryStatusMaintenance ConnectionBigQueryStatus = "MAINTENANCE"
	ConnectionBigQueryStatusQuota       ConnectionBigQueryStatus = "QUOTA"
	ConnectionBigQueryStatusCreating    ConnectionBigQueryStatus = "CREATING"
)

func (e ConnectionBigQueryStatus) ToPointer() *ConnectionBigQueryStatus {
	return &e
}

func (e *ConnectionBigQueryStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionBigQueryStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionBigQueryStatus: %v", v)
	}
}

type ConnectionBigQuery struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionBigQueryType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionBigQueryStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	Dataset    string    `json:"dataset"`
}

func (c ConnectionBigQuery) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionBigQuery) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionBigQuery) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionBigQuery) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionBigQuery) GetType() ConnectionBigQueryType {
	if o == nil {
		return ConnectionBigQueryType("")
	}
	return o.Type
}

func (o *ConnectionBigQuery) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionBigQuery) GetStatus() ConnectionBigQueryStatus {
	if o == nil {
		return ConnectionBigQueryStatus("")
	}
	return o.Status
}

func (o *ConnectionBigQuery) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionBigQuery) GetDataset() string {
	if o == nil {
		return ""
	}
	return o.Dataset
}

type ConnectionBigQueryInput struct {
	// The unique name of this connection.
	Name    string                 `json:"name"`
	Type    ConnectionBigQueryType `json:"type"`
	Dataset string                 `json:"dataset"`
	// To generate new JSON Credentials, go to the [Google Cloud Console](https://console.cloud.google.com/apis/credentials/), make sure you are on the correct project, and create or select an existing service account. Select the service account, and under "Keys" create a new key in JSON format. Paste the JSON object into the "JSON Credentials" fields.
	JSONCredentials string `json:"jsonCredentials"`
}

func (o *ConnectionBigQueryInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionBigQueryInput) GetType() ConnectionBigQueryType {
	if o == nil {
		return ConnectionBigQueryType("")
	}
	return o.Type
}

func (o *ConnectionBigQueryInput) GetDataset() string {
	if o == nil {
		return ""
	}
	return o.Dataset
}

func (o *ConnectionBigQueryInput) GetJSONCredentials() string {
	if o == nil {
		return ""
	}
	return o.JSONCredentials
}
