// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionPostgresShardedType string

const (
	ConnectionPostgresShardedTypePostgresSharded ConnectionPostgresShardedType = "POSTGRES_SHARDED"
)

func (e ConnectionPostgresShardedType) ToPointer() *ConnectionPostgresShardedType {
	return &e
}

func (e *ConnectionPostgresShardedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTGRES_SHARDED":
		*e = ConnectionPostgresShardedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionPostgresShardedType: %v", v)
	}
}

// ConnectionPostgresShardedStatus - The current status of the connection.
type ConnectionPostgresShardedStatus string

const (
	ConnectionPostgresShardedStatusUnknown     ConnectionPostgresShardedStatus = "UNKNOWN"
	ConnectionPostgresShardedStatusUp          ConnectionPostgresShardedStatus = "UP"
	ConnectionPostgresShardedStatusDown        ConnectionPostgresShardedStatus = "DOWN"
	ConnectionPostgresShardedStatusResize      ConnectionPostgresShardedStatus = "RESIZE"
	ConnectionPostgresShardedStatusMaintenance ConnectionPostgresShardedStatus = "MAINTENANCE"
	ConnectionPostgresShardedStatusQuota       ConnectionPostgresShardedStatus = "QUOTA"
	ConnectionPostgresShardedStatusCreating    ConnectionPostgresShardedStatus = "CREATING"
)

func (e ConnectionPostgresShardedStatus) ToPointer() *ConnectionPostgresShardedStatus {
	return &e
}

func (e *ConnectionPostgresShardedStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionPostgresShardedStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionPostgresShardedStatus: %v", v)
	}
}

type ConnectionPostgresSharded struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                        `json:"name"`
	Type ConnectionPostgresShardedType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionPostgresShardedStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// If not specified, the default schema will be used.
	Schema *string `json:"schema,omitempty"`
	// If you want Etleap to create pipelines for each source table automatically, specify the id of an Etleap destination connection here. If you want to create pipelines manually, omit this property. Note that only the connection owner can change this setting.
	AutoReplicate *string `json:"autoReplicate,omitempty"`
	// Should Etleap use PostgreSQL replication to capture changes from this database? This setting cannot be changed once the connection has been created. Follow [the setup instructions here](https://docs.etleap.com/docs/documentation/ZG9jOjM3MjY3NzM5-postgres) and ensure that all requirements are met.
	CdcEnabled *bool                 `default:"false" json:"cdcEnabled"`
	Shards     []DatabaseShardOutput `json:"shards"`
}

func (c ConnectionPostgresSharded) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionPostgresSharded) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionPostgresSharded) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionPostgresSharded) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionPostgresSharded) GetType() ConnectionPostgresShardedType {
	if o == nil {
		return ConnectionPostgresShardedType("")
	}
	return o.Type
}

func (o *ConnectionPostgresSharded) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionPostgresSharded) GetStatus() ConnectionPostgresShardedStatus {
	if o == nil {
		return ConnectionPostgresShardedStatus("")
	}
	return o.Status
}

func (o *ConnectionPostgresSharded) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionPostgresSharded) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionPostgresSharded) GetAutoReplicate() *string {
	if o == nil {
		return nil
	}
	return o.AutoReplicate
}

func (o *ConnectionPostgresSharded) GetCdcEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CdcEnabled
}

func (o *ConnectionPostgresSharded) GetShards() []DatabaseShardOutput {
	if o == nil {
		return []DatabaseShardOutput{}
	}
	return o.Shards
}

type ConnectionPostgresShardedInput struct {
	// The unique name of this connection.
	Name string                        `json:"name"`
	Type ConnectionPostgresShardedType `json:"type"`
	// If not specified, the default schema will be used.
	Schema *string `json:"schema,omitempty"`
	// If you want Etleap to create pipelines for each source table automatically, specify the id of an Etleap destination connection here. If you want to create pipelines manually, omit this property. Note that only the connection owner can change this setting.
	AutoReplicate *string `json:"autoReplicate,omitempty"`
	// Should Etleap use PostgreSQL replication to capture changes from this database? This setting cannot be changed once the connection has been created. Follow [the setup instructions here](https://docs.etleap.com/docs/documentation/ZG9jOjM3MjY3NzM5-postgres) and ensure that all requirements are met.
	CdcEnabled *bool           `default:"false" json:"cdcEnabled"`
	Shards     []DatabaseShard `json:"shards"`
}

func (c ConnectionPostgresShardedInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionPostgresShardedInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionPostgresShardedInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionPostgresShardedInput) GetType() ConnectionPostgresShardedType {
	if o == nil {
		return ConnectionPostgresShardedType("")
	}
	return o.Type
}

func (o *ConnectionPostgresShardedInput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionPostgresShardedInput) GetAutoReplicate() *string {
	if o == nil {
		return nil
	}
	return o.AutoReplicate
}

func (o *ConnectionPostgresShardedInput) GetCdcEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CdcEnabled
}

func (o *ConnectionPostgresShardedInput) GetShards() []DatabaseShard {
	if o == nil {
		return []DatabaseShard{}
	}
	return o.Shards
}
