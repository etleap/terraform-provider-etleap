// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type WarehouseTypesType string

const (
	WarehouseTypesTypeRedshift  WarehouseTypesType = "REDSHIFT"
	WarehouseTypesTypeSnowflake WarehouseTypesType = "SNOWFLAKE"
)

type WarehouseTypes struct {
	WarehouseRedshift  *WarehouseRedshift
	WarehouseSnowflake *WarehouseSnowflake

	Type WarehouseTypesType
}

func CreateWarehouseTypesRedshift(redshift WarehouseRedshift) WarehouseTypes {
	typ := WarehouseTypesTypeRedshift
	typStr := WarehouseRedshiftType(typ)
	redshift.Type = typStr

	return WarehouseTypes{
		WarehouseRedshift: &redshift,
		Type:              typ,
	}
}

func CreateWarehouseTypesSnowflake(snowflake WarehouseSnowflake) WarehouseTypes {
	typ := WarehouseTypesTypeSnowflake
	typStr := WarehouseSnowflakeType(typ)
	snowflake.Type = typStr

	return WarehouseTypes{
		WarehouseSnowflake: &snowflake,
		Type:               typ,
	}
}

func (u *WarehouseTypes) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "REDSHIFT":
		warehouseRedshift := new(WarehouseRedshift)
		if err := utils.UnmarshalJSON(data, &warehouseRedshift, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.WarehouseRedshift = warehouseRedshift
		u.Type = WarehouseTypesTypeRedshift
		return nil
	case "SNOWFLAKE":
		warehouseSnowflake := new(WarehouseSnowflake)
		if err := utils.UnmarshalJSON(data, &warehouseSnowflake, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.WarehouseSnowflake = warehouseSnowflake
		u.Type = WarehouseTypesTypeSnowflake
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WarehouseTypes) MarshalJSON() ([]byte, error) {
	if u.WarehouseRedshift != nil {
		return utils.MarshalJSON(u.WarehouseRedshift, "", true)
	}

	if u.WarehouseSnowflake != nil {
		return utils.MarshalJSON(u.WarehouseSnowflake, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
