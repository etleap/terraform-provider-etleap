// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionSapConcurStatus - The current status of the connection.
type ConnectionSapConcurStatus string

const (
	ConnectionSapConcurStatusUnknown     ConnectionSapConcurStatus = "UNKNOWN"
	ConnectionSapConcurStatusUp          ConnectionSapConcurStatus = "UP"
	ConnectionSapConcurStatusDown        ConnectionSapConcurStatus = "DOWN"
	ConnectionSapConcurStatusResize      ConnectionSapConcurStatus = "RESIZE"
	ConnectionSapConcurStatusMaintenance ConnectionSapConcurStatus = "MAINTENANCE"
	ConnectionSapConcurStatusQuota       ConnectionSapConcurStatus = "QUOTA"
	ConnectionSapConcurStatusCreating    ConnectionSapConcurStatus = "CREATING"
)

func (e ConnectionSapConcurStatus) ToPointer() *ConnectionSapConcurStatus {
	return &e
}

func (e *ConnectionSapConcurStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionSapConcurStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSapConcurStatus: %v", v)
	}
}

type ConnectionSapConcurDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionSapConcurDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionSapConcurDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSapConcurDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSapConcurDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSapConcurDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSapConcurDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSapConcurDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionSapConcurType string

const (
	ConnectionSapConcurTypeSapConcur ConnectionSapConcurType = "SAP_CONCUR"
)

func (e ConnectionSapConcurType) ToPointer() *ConnectionSapConcurType {
	return &e
}

func (e *ConnectionSapConcurType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SAP_CONCUR":
		*e = ConnectionSapConcurType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSapConcurType: %v", v)
	}
}

type ConnectionSapConcurOutput struct {
	// The current status of the connection.
	Status ConnectionSapConcurStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionSapConcurDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool                    `json:"active"`
	Type   ConnectionSapConcurType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Your company ID.
	CompanyID string `json:"companyId"`
	// Your SAP Concur region, e.g. us, eu, eu2.
	Region string `json:"region"`
	// Your application client ID.
	ClientID string `json:"clientId"`
}

func (c ConnectionSapConcurOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSapConcurOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSapConcurOutput) GetStatus() ConnectionSapConcurStatus {
	if o == nil {
		return ConnectionSapConcurStatus("")
	}
	return o.Status
}

func (o *ConnectionSapConcurOutput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSapConcurOutput) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionSapConcurOutput) GetDefaultUpdateSchedule() []ConnectionSapConcurDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionSapConcurDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionSapConcurOutput) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionSapConcurOutput) GetType() ConnectionSapConcurType {
	if o == nil {
		return ConnectionSapConcurType("")
	}
	return o.Type
}

func (o *ConnectionSapConcurOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionSapConcurOutput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSapConcurOutput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSapConcurOutput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSapConcurOutput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSapConcurOutput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSapConcurOutput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSapConcurOutput) GetCompanyID() string {
	if o == nil {
		return ""
	}
	return o.CompanyID
}

func (o *ConnectionSapConcurOutput) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *ConnectionSapConcurOutput) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

type ConnectionSapConcur struct {
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionSapConcurType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Your application client secret.
	ClientSecret string `json:"clientSecret"`
	// Your company ID.
	CompanyID string `json:"companyId"`
	// Your SAP Concur region, e.g. us, eu, eu2.
	Region string `json:"region"`
	// Your application client ID.
	ClientID string `json:"clientId"`
	// Your Company Request Token.
	RequestToken string `json:"requestToken"`
}

func (o *ConnectionSapConcur) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSapConcur) GetType() ConnectionSapConcurType {
	if o == nil {
		return ConnectionSapConcurType("")
	}
	return o.Type
}

func (o *ConnectionSapConcur) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSapConcur) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSapConcur) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSapConcur) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSapConcur) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSapConcur) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSapConcur) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *ConnectionSapConcur) GetCompanyID() string {
	if o == nil {
		return ""
	}
	return o.CompanyID
}

func (o *ConnectionSapConcur) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *ConnectionSapConcur) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ConnectionSapConcur) GetRequestToken() string {
	if o == nil {
		return ""
	}
	return o.RequestToken
}
