// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionRecurlyType string

const (
	ConnectionRecurlyTypeRecurly ConnectionRecurlyType = "RECURLY"
)

func (e ConnectionRecurlyType) ToPointer() *ConnectionRecurlyType {
	return &e
}

func (e *ConnectionRecurlyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RECURLY":
		*e = ConnectionRecurlyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionRecurlyType: %v", v)
	}
}

// ConnectionRecurlyStatus - The current status of the connection.
type ConnectionRecurlyStatus string

const (
	ConnectionRecurlyStatusUnknown     ConnectionRecurlyStatus = "UNKNOWN"
	ConnectionRecurlyStatusUp          ConnectionRecurlyStatus = "UP"
	ConnectionRecurlyStatusDown        ConnectionRecurlyStatus = "DOWN"
	ConnectionRecurlyStatusResize      ConnectionRecurlyStatus = "RESIZE"
	ConnectionRecurlyStatusMaintenance ConnectionRecurlyStatus = "MAINTENANCE"
	ConnectionRecurlyStatusQuota       ConnectionRecurlyStatus = "QUOTA"
	ConnectionRecurlyStatusCreating    ConnectionRecurlyStatus = "CREATING"
)

func (e ConnectionRecurlyStatus) ToPointer() *ConnectionRecurlyStatus {
	return &e
}

func (e *ConnectionRecurlyStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionRecurlyStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionRecurlyStatus: %v", v)
	}
}

type ConnectionRecurly struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                `json:"name"`
	Type ConnectionRecurlyType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionRecurlyStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// Your site subdomain at Recurly.
	Subdomain string `json:"subdomain"`
}

func (c ConnectionRecurly) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionRecurly) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionRecurly) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionRecurly) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionRecurly) GetType() ConnectionRecurlyType {
	if o == nil {
		return ConnectionRecurlyType("")
	}
	return o.Type
}

func (o *ConnectionRecurly) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionRecurly) GetStatus() ConnectionRecurlyStatus {
	if o == nil {
		return ConnectionRecurlyStatus("")
	}
	return o.Status
}

func (o *ConnectionRecurly) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionRecurly) GetSubdomain() string {
	if o == nil {
		return ""
	}
	return o.Subdomain
}

type ConnectionRecurlyInput struct {
	// The unique name of this connection.
	Name string                `json:"name"`
	Type ConnectionRecurlyType `json:"type"`
	// Your site subdomain at Recurly.
	Subdomain string `json:"subdomain"`
	APIKey    string `json:"apiKey"`
}

func (o *ConnectionRecurlyInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionRecurlyInput) GetType() ConnectionRecurlyType {
	if o == nil {
		return ConnectionRecurlyType("")
	}
	return o.Type
}

func (o *ConnectionRecurlyInput) GetSubdomain() string {
	if o == nil {
		return ""
	}
	return o.Subdomain
}

func (o *ConnectionRecurlyInput) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}
