// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type GrantWithoutPrivilegeInputType string

const (
	GrantWithoutPrivilegeInputTypeUser GrantWithoutPrivilegeInputType = "USER"
	GrantWithoutPrivilegeInputTypeTeam GrantWithoutPrivilegeInputType = "TEAM"
)

// GrantWithoutPrivilegeInput - An access grant to an object in Etleap. A grant can provide access for a user or a team.
type GrantWithoutPrivilegeInput struct {
	GrantUserInput *GrantUserInput
	GrantTeamInput *GrantTeamInput

	Type GrantWithoutPrivilegeInputType
}

func CreateGrantWithoutPrivilegeInputUser(user GrantUserInput) GrantWithoutPrivilegeInput {
	typ := GrantWithoutPrivilegeInputTypeUser
	typStr := GrantUserType(typ)
	user.Type = typStr

	return GrantWithoutPrivilegeInput{
		GrantUserInput: &user,
		Type:           typ,
	}
}

func CreateGrantWithoutPrivilegeInputTeam(team GrantTeamInput) GrantWithoutPrivilegeInput {
	typ := GrantWithoutPrivilegeInputTypeTeam
	typStr := GrantTeamType(typ)
	team.Type = typStr

	return GrantWithoutPrivilegeInput{
		GrantTeamInput: &team,
		Type:           typ,
	}
}

func (u *GrantWithoutPrivilegeInput) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "USER":
		grantUserInput := new(GrantUserInput)
		if err := utils.UnmarshalJSON(data, &grantUserInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GrantUserInput = grantUserInput
		u.Type = GrantWithoutPrivilegeInputTypeUser
		return nil
	case "TEAM":
		grantTeamInput := new(GrantTeamInput)
		if err := utils.UnmarshalJSON(data, &grantTeamInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GrantTeamInput = grantTeamInput
		u.Type = GrantWithoutPrivilegeInputTypeTeam
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GrantWithoutPrivilegeInput) MarshalJSON() ([]byte, error) {
	if u.GrantUserInput != nil {
		return utils.MarshalJSON(u.GrantUserInput, "", true)
	}

	if u.GrantTeamInput != nil {
		return utils.MarshalJSON(u.GrantTeamInput, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
