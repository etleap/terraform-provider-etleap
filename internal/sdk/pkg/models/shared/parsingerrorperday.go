// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/types"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type ErrorType string

const (
	ErrorTypeType      ErrorType = "TYPE"
	ErrorTypeOperation ErrorType = "OPERATION"
)

func (e ErrorType) ToPointer() *ErrorType {
	return &e
}

func (e *ErrorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE":
		fallthrough
	case "OPERATION":
		*e = ErrorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorType: %v", v)
	}
}

type ParsingErrorPerDay struct {
	RowCount  int64     `json:"rowCount"`
	ErrorType ErrorType `json:"errorType"`
	// Format of the timestamp: 'yyyy-MM-dd'
	Day types.Date `json:"day"`
}

func (p ParsingErrorPerDay) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ParsingErrorPerDay) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ParsingErrorPerDay) GetRowCount() int64 {
	if o == nil {
		return 0
	}
	return o.RowCount
}

func (o *ParsingErrorPerDay) GetErrorType() ErrorType {
	if o == nil {
		return ErrorType("")
	}
	return o.ErrorType
}

func (o *ParsingErrorPerDay) GetDay() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.Day
}
