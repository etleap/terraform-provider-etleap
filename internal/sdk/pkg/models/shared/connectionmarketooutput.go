// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionMarketoStatus - The current status of the connection.
type ConnectionMarketoStatus string

const (
	ConnectionMarketoStatusUnknown     ConnectionMarketoStatus = "UNKNOWN"
	ConnectionMarketoStatusUp          ConnectionMarketoStatus = "UP"
	ConnectionMarketoStatusDown        ConnectionMarketoStatus = "DOWN"
	ConnectionMarketoStatusResize      ConnectionMarketoStatus = "RESIZE"
	ConnectionMarketoStatusMaintenance ConnectionMarketoStatus = "MAINTENANCE"
	ConnectionMarketoStatusQuota       ConnectionMarketoStatus = "QUOTA"
	ConnectionMarketoStatusCreating    ConnectionMarketoStatus = "CREATING"
)

func (e ConnectionMarketoStatus) ToPointer() *ConnectionMarketoStatus {
	return &e
}

func (e *ConnectionMarketoStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionMarketoStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionMarketoStatus: %v", v)
	}
}

type ConnectionMarketoDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionMarketoDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionMarketoDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionMarketoDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionMarketoDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionMarketoDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionMarketoDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionMarketoDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionMarketoType string

const (
	ConnectionMarketoTypeMarketo ConnectionMarketoType = "MARKETO"
)

func (e ConnectionMarketoType) ToPointer() *ConnectionMarketoType {
	return &e
}

func (e *ConnectionMarketoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MARKETO":
		*e = ConnectionMarketoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionMarketoType: %v", v)
	}
}

type ConnectionMarketoOutput struct {
	// The current status of the connection.
	Status ConnectionMarketoStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionMarketoDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool                  `json:"active"`
	Type   ConnectionMarketoType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// The maximum number of requests Etleap will use per day. Your Marketo account's daily quota is the 'Daily Request Limit' number under Admin -> Integration -> Web Services. We recommend setting this to 75% of your Marketo limit.
	QuotaLimit int64 `json:"quotaLimit"`
	// Under Admin -> Integration -> LaunchPoint, you can find this value by clicking 'View Details'.
	RestClientID string `json:"restClientId"`
	// E.g. 'https://259-ZDK-675.mktoapi.com/soap/mktows/2_9'. In the Marketo UI this is the 'Endpoint' value in the 'SOAP API' section.
	SoapEndpoint string `json:"soapEndpoint"`
	// E.g. 'https://259-ZDK-675.mktorest.com/rest'. In the Marketo UI this is the 'Endpoint' value in the 'REST API' section.
	RestEndpoint string `json:"restEndpoint"`
	// E.g. 'MKTOWS_259-ZDK-675_1'. In the Marketo UI this is the 'User ID' value in the 'SOAP API' section.
	SoapUserID string `json:"soapUserId"`
}

func (c ConnectionMarketoOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionMarketoOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionMarketoOutput) GetStatus() ConnectionMarketoStatus {
	if o == nil {
		return ConnectionMarketoStatus("")
	}
	return o.Status
}

func (o *ConnectionMarketoOutput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionMarketoOutput) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionMarketoOutput) GetDefaultUpdateSchedule() []ConnectionMarketoDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionMarketoDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionMarketoOutput) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionMarketoOutput) GetType() ConnectionMarketoType {
	if o == nil {
		return ConnectionMarketoType("")
	}
	return o.Type
}

func (o *ConnectionMarketoOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionMarketoOutput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionMarketoOutput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionMarketoOutput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionMarketoOutput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionMarketoOutput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionMarketoOutput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionMarketoOutput) GetQuotaLimit() int64 {
	if o == nil {
		return 0
	}
	return o.QuotaLimit
}

func (o *ConnectionMarketoOutput) GetRestClientID() string {
	if o == nil {
		return ""
	}
	return o.RestClientID
}

func (o *ConnectionMarketoOutput) GetSoapEndpoint() string {
	if o == nil {
		return ""
	}
	return o.SoapEndpoint
}

func (o *ConnectionMarketoOutput) GetRestEndpoint() string {
	if o == nil {
		return ""
	}
	return o.RestEndpoint
}

func (o *ConnectionMarketoOutput) GetSoapUserID() string {
	if o == nil {
		return ""
	}
	return o.SoapUserID
}

type ConnectionMarketo struct {
	// The unique name of this connection.
	Name string                `json:"name"`
	Type ConnectionMarketoType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// The maximum number of requests Etleap will use per day. Your Marketo account's daily quota is the 'Daily Request Limit' number under Admin -> Integration -> Web Services. We recommend setting this to 75% of your Marketo limit.
	QuotaLimit int64 `json:"quotaLimit"`
	// Under Admin -> Integration -> LaunchPoint, you can find this value by clicking 'View Details'.
	RestClientID string `json:"restClientId"`
	// E.g. 'https://259-ZDK-675.mktoapi.com/soap/mktows/2_9'. In the Marketo UI this is the 'Endpoint' value in the 'SOAP API' section.
	SoapEndpoint string `json:"soapEndpoint"`
	// E.g. 'https://259-ZDK-675.mktorest.com/rest'. In the Marketo UI this is the 'Endpoint' value in the 'REST API' section.
	RestEndpoint string `json:"restEndpoint"`
	// Under Admin -> Integration -> LaunchPoint, you can find this value by clicking 'View Details'.
	RestClientSecret string `json:"restClientSecret"`
	// E.g. 'MKTOWS_259-ZDK-675_1'. In the Marketo UI this is the 'User ID' value in the 'SOAP API' section.
	SoapUserID string `json:"soapUserId"`
	// In the Marketo UI this is the 'Encryption Key' value in the 'SOAP API' section.
	SoapEncryptionKey string `json:"soapEncryptionKey"`
}

func (o *ConnectionMarketo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionMarketo) GetType() ConnectionMarketoType {
	if o == nil {
		return ConnectionMarketoType("")
	}
	return o.Type
}

func (o *ConnectionMarketo) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionMarketo) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionMarketo) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionMarketo) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionMarketo) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionMarketo) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionMarketo) GetQuotaLimit() int64 {
	if o == nil {
		return 0
	}
	return o.QuotaLimit
}

func (o *ConnectionMarketo) GetRestClientID() string {
	if o == nil {
		return ""
	}
	return o.RestClientID
}

func (o *ConnectionMarketo) GetSoapEndpoint() string {
	if o == nil {
		return ""
	}
	return o.SoapEndpoint
}

func (o *ConnectionMarketo) GetRestEndpoint() string {
	if o == nil {
		return ""
	}
	return o.RestEndpoint
}

func (o *ConnectionMarketo) GetRestClientSecret() string {
	if o == nil {
		return ""
	}
	return o.RestClientSecret
}

func (o *ConnectionMarketo) GetSoapUserID() string {
	if o == nil {
		return ""
	}
	return o.SoapUserID
}

func (o *ConnectionMarketo) GetSoapEncryptionKey() string {
	if o == nil {
		return ""
	}
	return o.SoapEncryptionKey
}
