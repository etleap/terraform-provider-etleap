// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceJiraAlignType string

const (
	SourceJiraAlignTypeJiraAlign SourceJiraAlignType = "JIRA_ALIGN"
)

func (e SourceJiraAlignType) ToPointer() *SourceJiraAlignType {
	return &e
}

func (e *SourceJiraAlignType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JIRA_ALIGN":
		*e = SourceJiraAlignType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceJiraAlignType: %v", v)
	}
}

type SourceJiraAlign struct {
	// The universally unique identifier for the source.
	ConnectionID string              `json:"connectionId"`
	Type         SourceJiraAlignType `json:"type"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// The JIRA Align entity. Spelled without spaces except for the Audit Logs. Example values: [Capabilities, Cities, Customers, Defects, Epics, Epics Audit Logs, Features, Features Audit Logs, Goals, Ideas, Iterations, KeyResults, Milestones, Milestones Audit Logs, Objectives, Objectives Audit Logs, Portfolios, Products, Programs, Regions, ReleaseVehicles, Releases, Snapshots, Stories, Tasks, Teams, Themes, Users, ValueStreams]
	Entity string `json:"entity"`
}

func (o *SourceJiraAlign) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceJiraAlign) GetType() SourceJiraAlignType {
	if o == nil {
		return SourceJiraAlignType("")
	}
	return o.Type
}

func (o *SourceJiraAlign) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceJiraAlign) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}
