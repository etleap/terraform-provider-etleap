// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionSnapchatAdsStatus - The current status of the connection.
type ConnectionSnapchatAdsStatus string

const (
	ConnectionSnapchatAdsStatusUnknown     ConnectionSnapchatAdsStatus = "UNKNOWN"
	ConnectionSnapchatAdsStatusUp          ConnectionSnapchatAdsStatus = "UP"
	ConnectionSnapchatAdsStatusDown        ConnectionSnapchatAdsStatus = "DOWN"
	ConnectionSnapchatAdsStatusResize      ConnectionSnapchatAdsStatus = "RESIZE"
	ConnectionSnapchatAdsStatusMaintenance ConnectionSnapchatAdsStatus = "MAINTENANCE"
	ConnectionSnapchatAdsStatusQuota       ConnectionSnapchatAdsStatus = "QUOTA"
	ConnectionSnapchatAdsStatusCreating    ConnectionSnapchatAdsStatus = "CREATING"
)

func (e ConnectionSnapchatAdsStatus) ToPointer() *ConnectionSnapchatAdsStatus {
	return &e
}

func (e *ConnectionSnapchatAdsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionSnapchatAdsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSnapchatAdsStatus: %v", v)
	}
}

type ConnectionSnapchatAdsDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionSnapchatAdsDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionSnapchatAdsDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSnapchatAdsDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSnapchatAdsDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSnapchatAdsDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSnapchatAdsDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSnapchatAdsDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionSnapchatAdsType string

const (
	ConnectionSnapchatAdsTypeSnapchatAds ConnectionSnapchatAdsType = "SNAPCHAT_ADS"
)

func (e ConnectionSnapchatAdsType) ToPointer() *ConnectionSnapchatAdsType {
	return &e
}

func (e *ConnectionSnapchatAdsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SNAPCHAT_ADS":
		*e = ConnectionSnapchatAdsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSnapchatAdsType: %v", v)
	}
}

type ConnectionSnapchatAds struct {
	// The current status of the connection.
	Status ConnectionSnapchatAdsStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionSnapchatAdsDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool                      `json:"active"`
	Type   ConnectionSnapchatAdsType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	Username       *string              `json:"username,omitempty"`
}

func (c ConnectionSnapchatAds) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSnapchatAds) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSnapchatAds) GetStatus() ConnectionSnapchatAdsStatus {
	if o == nil {
		return ConnectionSnapchatAdsStatus("")
	}
	return o.Status
}

func (o *ConnectionSnapchatAds) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSnapchatAds) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionSnapchatAds) GetDefaultUpdateSchedule() []ConnectionSnapchatAdsDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionSnapchatAdsDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionSnapchatAds) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionSnapchatAds) GetType() ConnectionSnapchatAdsType {
	if o == nil {
		return ConnectionSnapchatAdsType("")
	}
	return o.Type
}

func (o *ConnectionSnapchatAds) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionSnapchatAds) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSnapchatAds) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSnapchatAds) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSnapchatAds) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSnapchatAds) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSnapchatAds) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSnapchatAds) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type ConnectionSnapchatAdsInput struct {
	// The unique name of this connection.
	Name string                    `json:"name"`
	Type ConnectionSnapchatAdsType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Code retrieved from `/connections/oauth2-initiation`. **Note:** it is short-lived, therefore the connection creation should be done as soon as code is returned.
	Code string `json:"code"`
}

func (o *ConnectionSnapchatAdsInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSnapchatAdsInput) GetType() ConnectionSnapchatAdsType {
	if o == nil {
		return ConnectionSnapchatAdsType("")
	}
	return o.Type
}

func (o *ConnectionSnapchatAdsInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSnapchatAdsInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSnapchatAdsInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSnapchatAdsInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSnapchatAdsInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSnapchatAdsInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSnapchatAdsInput) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}
