// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceVerizonMediaDspType string

const (
	SourceVerizonMediaDspTypeVerizonMediaDsp SourceVerizonMediaDspType = "VERIZON_MEDIA_DSP"
)

func (e SourceVerizonMediaDspType) ToPointer() *SourceVerizonMediaDspType {
	return &e
}

func (e *SourceVerizonMediaDspType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VERIZON_MEDIA_DSP":
		*e = SourceVerizonMediaDspType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceVerizonMediaDspType: %v", v)
	}
}

type SourceVerizonMediaDsp struct {
	Type SourceVerizonMediaDspType `json:"type"`
	// The universally unique identifier for the source.
	ConnectionID string `json:"connectionId"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64   `json:"latencyThreshold,omitempty"`
	Entity           string   `json:"entity"`
	Dimensions       []string `json:"dimensions"`
	Metrics          []string `json:"metrics"`
}

func (o *SourceVerizonMediaDsp) GetType() SourceVerizonMediaDspType {
	if o == nil {
		return SourceVerizonMediaDspType("")
	}
	return o.Type
}

func (o *SourceVerizonMediaDsp) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceVerizonMediaDsp) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceVerizonMediaDsp) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}

func (o *SourceVerizonMediaDsp) GetDimensions() []string {
	if o == nil {
		return []string{}
	}
	return o.Dimensions
}

func (o *SourceVerizonMediaDsp) GetMetrics() []string {
	if o == nil {
		return []string{}
	}
	return o.Metrics
}
