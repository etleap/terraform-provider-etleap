// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type DestinationTypesInputType string

const (
	DestinationTypesInputTypeRedshift   DestinationTypesInputType = "REDSHIFT"
	DestinationTypesInputTypeSnowflake  DestinationTypesInputType = "SNOWFLAKE"
	DestinationTypesInputTypeDeltaLake  DestinationTypesInputType = "DELTA_LAKE"
	DestinationTypesInputTypeS3DataLake DestinationTypesInputType = "S3_DATA_LAKE"
)

type DestinationTypesInput struct {
	DestinationRedshiftInput  *DestinationRedshiftInput
	DestinationSnowflakeInput *DestinationSnowflakeInput
	DestinationDeltaLakeInput *DestinationDeltaLakeInput
	DestinationS3DataLake     *DestinationS3DataLake

	Type DestinationTypesInputType
}

func CreateDestinationTypesInputRedshift(redshift DestinationRedshiftInput) DestinationTypesInput {
	typ := DestinationTypesInputTypeRedshift

	typStr := DestinationRedshiftType(typ)
	redshift.Type = typStr

	return DestinationTypesInput{
		DestinationRedshiftInput: &redshift,
		Type:                     typ,
	}
}

func CreateDestinationTypesInputSnowflake(snowflake DestinationSnowflakeInput) DestinationTypesInput {
	typ := DestinationTypesInputTypeSnowflake

	typStr := DestinationSnowflakeType(typ)
	snowflake.Type = typStr

	return DestinationTypesInput{
		DestinationSnowflakeInput: &snowflake,
		Type:                      typ,
	}
}

func CreateDestinationTypesInputDeltaLake(deltaLake DestinationDeltaLakeInput) DestinationTypesInput {
	typ := DestinationTypesInputTypeDeltaLake

	typStr := DestinationDeltaLakeType(typ)
	deltaLake.Type = typStr

	return DestinationTypesInput{
		DestinationDeltaLakeInput: &deltaLake,
		Type:                      typ,
	}
}

func CreateDestinationTypesInputS3DataLake(s3DataLake DestinationS3DataLake) DestinationTypesInput {
	typ := DestinationTypesInputTypeS3DataLake

	typStr := DestinationS3DataLakeType(typ)
	s3DataLake.Type = typStr

	return DestinationTypesInput{
		DestinationS3DataLake: &s3DataLake,
		Type:                  typ,
	}
}

func (u *DestinationTypesInput) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "REDSHIFT":
		destinationRedshiftInput := new(DestinationRedshiftInput)
		if err := utils.UnmarshalJSON(data, &destinationRedshiftInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DestinationRedshiftInput = destinationRedshiftInput
		u.Type = DestinationTypesInputTypeRedshift
		return nil
	case "SNOWFLAKE":
		destinationSnowflakeInput := new(DestinationSnowflakeInput)
		if err := utils.UnmarshalJSON(data, &destinationSnowflakeInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DestinationSnowflakeInput = destinationSnowflakeInput
		u.Type = DestinationTypesInputTypeSnowflake
		return nil
	case "DELTA_LAKE":
		destinationDeltaLakeInput := new(DestinationDeltaLakeInput)
		if err := utils.UnmarshalJSON(data, &destinationDeltaLakeInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DestinationDeltaLakeInput = destinationDeltaLakeInput
		u.Type = DestinationTypesInputTypeDeltaLake
		return nil
	case "S3_DATA_LAKE":
		destinationS3DataLake := new(DestinationS3DataLake)
		if err := utils.UnmarshalJSON(data, &destinationS3DataLake, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DestinationS3DataLake = destinationS3DataLake
		u.Type = DestinationTypesInputTypeS3DataLake
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationTypesInput) MarshalJSON() ([]byte, error) {
	if u.DestinationRedshiftInput != nil {
		return utils.MarshalJSON(u.DestinationRedshiftInput, "", true)
	}

	if u.DestinationSnowflakeInput != nil {
		return utils.MarshalJSON(u.DestinationSnowflakeInput, "", true)
	}

	if u.DestinationDeltaLakeInput != nil {
		return utils.MarshalJSON(u.DestinationDeltaLakeInput, "", true)
	}

	if u.DestinationS3DataLake != nil {
		return utils.MarshalJSON(u.DestinationS3DataLake, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
