// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionMixpanelType string

const (
	ConnectionMixpanelTypeMixpanel ConnectionMixpanelType = "MIXPANEL"
)

func (e ConnectionMixpanelType) ToPointer() *ConnectionMixpanelType {
	return &e
}

func (e *ConnectionMixpanelType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MIXPANEL":
		*e = ConnectionMixpanelType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionMixpanelType: %v", v)
	}
}

// ConnectionMixpanelStatus - The current status of the connection.
type ConnectionMixpanelStatus string

const (
	ConnectionMixpanelStatusUnknown     ConnectionMixpanelStatus = "UNKNOWN"
	ConnectionMixpanelStatusUp          ConnectionMixpanelStatus = "UP"
	ConnectionMixpanelStatusDown        ConnectionMixpanelStatus = "DOWN"
	ConnectionMixpanelStatusResize      ConnectionMixpanelStatus = "RESIZE"
	ConnectionMixpanelStatusMaintenance ConnectionMixpanelStatus = "MAINTENANCE"
	ConnectionMixpanelStatusQuota       ConnectionMixpanelStatus = "QUOTA"
	ConnectionMixpanelStatusCreating    ConnectionMixpanelStatus = "CREATING"
)

func (e ConnectionMixpanelStatus) ToPointer() *ConnectionMixpanelStatus {
	return &e
}

func (e *ConnectionMixpanelStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionMixpanelStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionMixpanelStatus: %v", v)
	}
}

type ConnectionMixpanel struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionMixpanelType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionMixpanelStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// Mixpanel project timezone. Default: 'US/Pacific'
	Timezone string `json:"timezone"`
}

func (c ConnectionMixpanel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionMixpanel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionMixpanel) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionMixpanel) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionMixpanel) GetType() ConnectionMixpanelType {
	if o == nil {
		return ConnectionMixpanelType("")
	}
	return o.Type
}

func (o *ConnectionMixpanel) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionMixpanel) GetStatus() ConnectionMixpanelStatus {
	if o == nil {
		return ConnectionMixpanelStatus("")
	}
	return o.Status
}

func (o *ConnectionMixpanel) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionMixpanel) GetTimezone() string {
	if o == nil {
		return ""
	}
	return o.Timezone
}

type ConnectionMixpanelInput struct {
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionMixpanelType `json:"type"`
	// Mixpanel project timezone. Default: 'US/Pacific'
	Timezone string `json:"timezone"`
	// 'API Secret' under Mixpanel 'Project Settings'
	APISecret string `json:"apiSecret"`
}

func (o *ConnectionMixpanelInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionMixpanelInput) GetType() ConnectionMixpanelType {
	if o == nil {
		return ConnectionMixpanelType("")
	}
	return o.Type
}

func (o *ConnectionMixpanelInput) GetTimezone() string {
	if o == nil {
		return ""
	}
	return o.Timezone
}

func (o *ConnectionMixpanelInput) GetAPISecret() string {
	if o == nil {
		return ""
	}
	return o.APISecret
}
