// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type PagingStrategyType string

const (
	PagingStrategyTypeCursorURI PagingStrategyType = "CURSOR_URI"
	PagingStrategyTypeOffset    PagingStrategyType = "OFFSET"
)

// PagingStrategy - The paging strategy.
type PagingStrategy struct {
	CursorURIPagingStrategy *CursorURIPagingStrategy
	OffsetPagingStrategy    *OffsetPagingStrategy

	Type PagingStrategyType
}

func CreatePagingStrategyCursorURI(cursorURI CursorURIPagingStrategy) PagingStrategy {
	typ := PagingStrategyTypeCursorURI
	typStr := CursorURIPagingStrategyType(typ)
	cursorURI.Type = &typStr

	return PagingStrategy{
		CursorURIPagingStrategy: &cursorURI,
		Type:                    typ,
	}
}

func CreatePagingStrategyOffset(offset OffsetPagingStrategy) PagingStrategy {
	typ := PagingStrategyTypeOffset
	typStr := OffsetPagingStrategyType(typ)
	offset.Type = &typStr

	return PagingStrategy{
		OffsetPagingStrategy: &offset,
		Type:                 typ,
	}
}

func (u *PagingStrategy) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "CURSOR_URI":
		cursorURIPagingStrategy := new(CursorURIPagingStrategy)
		if err := utils.UnmarshalJSON(data, &cursorURIPagingStrategy, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.CursorURIPagingStrategy = cursorURIPagingStrategy
		u.Type = PagingStrategyTypeCursorURI
		return nil
	case "OFFSET":
		offsetPagingStrategy := new(OffsetPagingStrategy)
		if err := utils.UnmarshalJSON(data, &offsetPagingStrategy, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.OffsetPagingStrategy = offsetPagingStrategy
		u.Type = PagingStrategyTypeOffset
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PagingStrategy) MarshalJSON() ([]byte, error) {
	if u.CursorURIPagingStrategy != nil {
		return utils.MarshalJSON(u.CursorURIPagingStrategy, "", true)
	}

	if u.OffsetPagingStrategy != nil {
		return utils.MarshalJSON(u.OffsetPagingStrategy, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
