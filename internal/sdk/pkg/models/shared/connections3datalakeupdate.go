// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionS3DataLakeUpdateType string

const (
	ConnectionS3DataLakeUpdateTypeS3DataLake ConnectionS3DataLakeUpdateType = "S3_DATA_LAKE"
)

func (e ConnectionS3DataLakeUpdateType) ToPointer() *ConnectionS3DataLakeUpdateType {
	return &e
}

func (e *ConnectionS3DataLakeUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_DATA_LAKE":
		*e = ConnectionS3DataLakeUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionS3DataLakeUpdateType: %v", v)
	}
}

type ConnectionS3DataLakeUpdate struct {
	// Whether this connection should be marked as active.
	Active *bool                           `json:"active,omitempty"`
	Type   *ConnectionS3DataLakeUpdateType `json:"type"`
	// The unique name of this connection.
	Name *string `json:"name,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// An IAM Role ARN looks like 'arn:aws:iam::account_id:role/role-name'. Etleap will assume this role to access this bucket.
	IamRole *string `json:"iamRole,omitempty"`
	// Customer KMS key used to encrypt all files written to the S3 bucket.
	KmsKey *string `json:"kmsKey,omitempty"`
	// If this is set to 'true', Etleap will write a manifest file containing the metadata along with each load. More info <a target="_blank" href="https://support.etleap.com/hc/en-us/articles/360007751614-Generating-load-manifests-for-data-loaded-into-S3">here</a>.
	WriteManifest *bool `json:"writeManifest,omitempty"`
	// The S3 bucket where your data will be stored.
	InputBucket  *string `json:"inputBucket,omitempty"`
	GlueDatabase *string `json:"glueDatabase,omitempty"`
	GlueRegion   *string `json:"glueRegion,omitempty"`
	// The base directory in the data bucket. Any data written by Etleap will be under this directory.
	BaseDirectory *string `json:"baseDirectory,omitempty"`
}

func (o *ConnectionS3DataLakeUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionS3DataLakeUpdate) GetType() *ConnectionS3DataLakeUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConnectionS3DataLakeUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionS3DataLakeUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionS3DataLakeUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionS3DataLakeUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionS3DataLakeUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionS3DataLakeUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionS3DataLakeUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionS3DataLakeUpdate) GetIamRole() *string {
	if o == nil {
		return nil
	}
	return o.IamRole
}

func (o *ConnectionS3DataLakeUpdate) GetKmsKey() *string {
	if o == nil {
		return nil
	}
	return o.KmsKey
}

func (o *ConnectionS3DataLakeUpdate) GetWriteManifest() *bool {
	if o == nil {
		return nil
	}
	return o.WriteManifest
}

func (o *ConnectionS3DataLakeUpdate) GetInputBucket() *string {
	if o == nil {
		return nil
	}
	return o.InputBucket
}

func (o *ConnectionS3DataLakeUpdate) GetGlueDatabase() *string {
	if o == nil {
		return nil
	}
	return o.GlueDatabase
}

func (o *ConnectionS3DataLakeUpdate) GetGlueRegion() *string {
	if o == nil {
		return nil
	}
	return o.GlueRegion
}

func (o *ConnectionS3DataLakeUpdate) GetBaseDirectory() *string {
	if o == nil {
		return nil
	}
	return o.BaseDirectory
}
