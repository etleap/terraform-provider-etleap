// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionSftpStatus - The current status of the connection.
type ConnectionSftpStatus string

const (
	ConnectionSftpStatusUnknown     ConnectionSftpStatus = "UNKNOWN"
	ConnectionSftpStatusUp          ConnectionSftpStatus = "UP"
	ConnectionSftpStatusDown        ConnectionSftpStatus = "DOWN"
	ConnectionSftpStatusResize      ConnectionSftpStatus = "RESIZE"
	ConnectionSftpStatusMaintenance ConnectionSftpStatus = "MAINTENANCE"
	ConnectionSftpStatusQuota       ConnectionSftpStatus = "QUOTA"
	ConnectionSftpStatusCreating    ConnectionSftpStatus = "CREATING"
)

func (e ConnectionSftpStatus) ToPointer() *ConnectionSftpStatus {
	return &e
}

func (e *ConnectionSftpStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionSftpStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSftpStatus: %v", v)
	}
}

type ConnectionSftpDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionSftpDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionSftpDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSftpDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSftpDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSftpDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSftpDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSftpDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionSftpType string

const (
	ConnectionSftpTypeSftp ConnectionSftpType = "SFTP"
)

func (e ConnectionSftpType) ToPointer() *ConnectionSftpType {
	return &e
}

func (e *ConnectionSftpType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SFTP":
		*e = ConnectionSftpType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionSftpType: %v", v)
	}
}

type ConnectionSftpOutput struct {
	// The current status of the connection.
	Status ConnectionSftpStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionSftpDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool               `json:"active"`
	Type   ConnectionSftpType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	Username       string               `json:"username"`
	// Set to `true` if this connection is using Public Key Authentication instead of password authentication.
	UsePublicKeyAuthentication *bool `json:"usePublicKeyAuthentication,omitempty"`
	// E.g. 'etleap.com' or '10.0.0.2'.
	Hostname string `json:"hostname"`
	// The start directory for the user. Etleap will read any file or folders under this directory.
	BaseDirectory string `json:"baseDirectory"`
	Port          int64  `json:"port"`
}

func (c ConnectionSftpOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionSftpOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionSftpOutput) GetStatus() ConnectionSftpStatus {
	if o == nil {
		return ConnectionSftpStatus("")
	}
	return o.Status
}

func (o *ConnectionSftpOutput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSftpOutput) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionSftpOutput) GetDefaultUpdateSchedule() []ConnectionSftpDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionSftpDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionSftpOutput) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionSftpOutput) GetType() ConnectionSftpType {
	if o == nil {
		return ConnectionSftpType("")
	}
	return o.Type
}

func (o *ConnectionSftpOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionSftpOutput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSftpOutput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSftpOutput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSftpOutput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSftpOutput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSftpOutput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSftpOutput) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionSftpOutput) GetUsePublicKeyAuthentication() *bool {
	if o == nil {
		return nil
	}
	return o.UsePublicKeyAuthentication
}

func (o *ConnectionSftpOutput) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *ConnectionSftpOutput) GetBaseDirectory() string {
	if o == nil {
		return ""
	}
	return o.BaseDirectory
}

func (o *ConnectionSftpOutput) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

type ConnectionSftp struct {
	// The unique name of this connection.
	Name string             `json:"name"`
	Type ConnectionSftpType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	Username       string               `json:"username"`
	// E.g. 'etleap.com' or '10.0.0.2'.
	Hostname string `json:"hostname"`
	// The start directory for the user. Etleap will read any file or folders under this directory.
	BaseDirectory string `json:"baseDirectory"`
	// If set to `null`, Public Key Authentication will be used.
	Password *string `json:"password,omitempty"`
	Port     int64   `json:"port"`
}

func (o *ConnectionSftp) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionSftp) GetType() ConnectionSftpType {
	if o == nil {
		return ConnectionSftpType("")
	}
	return o.Type
}

func (o *ConnectionSftp) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionSftp) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionSftp) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionSftp) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionSftp) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionSftp) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionSftp) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionSftp) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *ConnectionSftp) GetBaseDirectory() string {
	if o == nil {
		return ""
	}
	return o.BaseDirectory
}

func (o *ConnectionSftp) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *ConnectionSftp) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}
