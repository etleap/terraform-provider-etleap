// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type UpdateModeStrategyTypesType string

const (
	UpdateModeStrategyTypesTypeWallClock     UpdateModeStrategyTypesType = "WALL_CLOCK"
	UpdateModeStrategyTypesTypeExtractedData UpdateModeStrategyTypesType = "EXTRACTED_DATA"
)

type UpdateModeStrategyTypes struct {
	WallClockStrategy     *WallClockStrategy
	ExtractedDataStrategy *ExtractedDataStrategy

	Type UpdateModeStrategyTypesType
}

func CreateUpdateModeStrategyTypesWallClock(wallClock WallClockStrategy) UpdateModeStrategyTypes {
	typ := UpdateModeStrategyTypesTypeWallClock

	typStr := WallClockStrategyType(typ)
	wallClock.Type = typStr

	return UpdateModeStrategyTypes{
		WallClockStrategy: &wallClock,
		Type:              typ,
	}
}

func CreateUpdateModeStrategyTypesExtractedData(extractedData ExtractedDataStrategy) UpdateModeStrategyTypes {
	typ := UpdateModeStrategyTypesTypeExtractedData

	typStr := ExtractedDataStrategyType(typ)
	extractedData.Type = typStr

	return UpdateModeStrategyTypes{
		ExtractedDataStrategy: &extractedData,
		Type:                  typ,
	}
}

func (u *UpdateModeStrategyTypes) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "WALL_CLOCK":
		wallClockStrategy := new(WallClockStrategy)
		if err := utils.UnmarshalJSON(data, &wallClockStrategy, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.WallClockStrategy = wallClockStrategy
		u.Type = UpdateModeStrategyTypesTypeWallClock
		return nil
	case "EXTRACTED_DATA":
		extractedDataStrategy := new(ExtractedDataStrategy)
		if err := utils.UnmarshalJSON(data, &extractedDataStrategy, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ExtractedDataStrategy = extractedDataStrategy
		u.Type = UpdateModeStrategyTypesTypeExtractedData
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateModeStrategyTypes) MarshalJSON() ([]byte, error) {
	if u.WallClockStrategy != nil {
		return utils.MarshalJSON(u.WallClockStrategy, "", true)
	}

	if u.ExtractedDataStrategy != nil {
		return utils.MarshalJSON(u.ExtractedDataStrategy, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
