// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionUserVoiceStatus - The current status of the connection.
type ConnectionUserVoiceStatus string

const (
	ConnectionUserVoiceStatusUnknown     ConnectionUserVoiceStatus = "UNKNOWN"
	ConnectionUserVoiceStatusUp          ConnectionUserVoiceStatus = "UP"
	ConnectionUserVoiceStatusDown        ConnectionUserVoiceStatus = "DOWN"
	ConnectionUserVoiceStatusResize      ConnectionUserVoiceStatus = "RESIZE"
	ConnectionUserVoiceStatusMaintenance ConnectionUserVoiceStatus = "MAINTENANCE"
	ConnectionUserVoiceStatusQuota       ConnectionUserVoiceStatus = "QUOTA"
	ConnectionUserVoiceStatusCreating    ConnectionUserVoiceStatus = "CREATING"
)

func (e ConnectionUserVoiceStatus) ToPointer() *ConnectionUserVoiceStatus {
	return &e
}

func (e *ConnectionUserVoiceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionUserVoiceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionUserVoiceStatus: %v", v)
	}
}

type ConnectionUserVoiceDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionUserVoiceDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionUserVoiceDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionUserVoiceDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionUserVoiceDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionUserVoiceDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionUserVoiceDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionUserVoiceDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionUserVoiceType string

const (
	ConnectionUserVoiceTypeUservoice ConnectionUserVoiceType = "USERVOICE"
)

func (e ConnectionUserVoiceType) ToPointer() *ConnectionUserVoiceType {
	return &e
}

func (e *ConnectionUserVoiceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USERVOICE":
		*e = ConnectionUserVoiceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionUserVoiceType: %v", v)
	}
}

type ConnectionUserVoiceOutput struct {
	// The current status of the connection.
	Status ConnectionUserVoiceStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionUserVoiceDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool                    `json:"active"`
	Type   ConnectionUserVoiceType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Your current UserVoice subdomain (i.e. SUBDOMAIN.uservoice.com)
	Subdomain string `json:"subdomain"`
}

func (c ConnectionUserVoiceOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionUserVoiceOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionUserVoiceOutput) GetStatus() ConnectionUserVoiceStatus {
	if o == nil {
		return ConnectionUserVoiceStatus("")
	}
	return o.Status
}

func (o *ConnectionUserVoiceOutput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionUserVoiceOutput) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionUserVoiceOutput) GetDefaultUpdateSchedule() []ConnectionUserVoiceDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionUserVoiceDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionUserVoiceOutput) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionUserVoiceOutput) GetType() ConnectionUserVoiceType {
	if o == nil {
		return ConnectionUserVoiceType("")
	}
	return o.Type
}

func (o *ConnectionUserVoiceOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionUserVoiceOutput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionUserVoiceOutput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionUserVoiceOutput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionUserVoiceOutput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionUserVoiceOutput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionUserVoiceOutput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionUserVoiceOutput) GetSubdomain() string {
	if o == nil {
		return ""
	}
	return o.Subdomain
}

type ConnectionUserVoice struct {
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionUserVoiceType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// Your current UserVoice subdomain (i.e. SUBDOMAIN.uservoice.com)
	Subdomain string `json:"subdomain"`
	// A client access token to connect to UserVoice API. It can be obtained from your UserVoice API key. If you need help to create a client access token, <a target="_blank" href="https://developer.uservoice.com/docs/api/api-key/">follow this article</a>.
	AccessToken string `json:"accessToken"`
}

func (o *ConnectionUserVoice) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionUserVoice) GetType() ConnectionUserVoiceType {
	if o == nil {
		return ConnectionUserVoiceType("")
	}
	return o.Type
}

func (o *ConnectionUserVoice) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionUserVoice) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionUserVoice) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionUserVoice) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionUserVoice) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionUserVoice) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionUserVoice) GetSubdomain() string {
	if o == nil {
		return ""
	}
	return o.Subdomain
}

func (o *ConnectionUserVoice) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}
