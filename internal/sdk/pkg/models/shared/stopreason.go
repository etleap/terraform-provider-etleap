// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StopReason - Describes the reason a pipeline has stopped. `null` if the pipeline is currently running.
type StopReason string

const (
	StopReasonPaused                    StopReason = "PAUSED"
	StopReasonParsingErrors             StopReason = "PARSING_ERRORS"
	StopReasonSchemaChanges             StopReason = "SCHEMA_CHANGES"
	StopReasonRedshiftResize            StopReason = "REDSHIFT_RESIZE"
	StopReasonRedshiftMaintenance       StopReason = "REDSHIFT_MAINTENANCE"
	StopReasonSourceConnectionDown      StopReason = "SOURCE_CONNECTION_DOWN"
	StopReasonDestinationConnectionDown StopReason = "DESTINATION_CONNECTION_DOWN"
	StopReasonPermanentlyStopped        StopReason = "PERMANENTLY_STOPPED"
	StopReasonSourceBroken              StopReason = "SOURCE_BROKEN"
	StopReasonQuotaReached              StopReason = "QUOTA_REACHED"
	StopReasonSourceInactive            StopReason = "SOURCE_INACTIVE"
	StopReasonDestinationInactive       StopReason = "DESTINATION_INACTIVE"
	StopReasonPipelineModeChange        StopReason = "PIPELINE_MODE_CHANGE"
)

func (e StopReason) ToPointer() *StopReason {
	return &e
}

func (e *StopReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PAUSED":
		fallthrough
	case "PARSING_ERRORS":
		fallthrough
	case "SCHEMA_CHANGES":
		fallthrough
	case "REDSHIFT_RESIZE":
		fallthrough
	case "REDSHIFT_MAINTENANCE":
		fallthrough
	case "SOURCE_CONNECTION_DOWN":
		fallthrough
	case "DESTINATION_CONNECTION_DOWN":
		fallthrough
	case "PERMANENTLY_STOPPED":
		fallthrough
	case "SOURCE_BROKEN":
		fallthrough
	case "QUOTA_REACHED":
		fallthrough
	case "SOURCE_INACTIVE":
		fallthrough
	case "DESTINATION_INACTIVE":
		fallthrough
	case "PIPELINE_MODE_CHANGE":
		*e = StopReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StopReason: %v", v)
	}
}
