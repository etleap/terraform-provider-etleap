// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

// ConnectionS3DataLakeStatus - The current status of the connection.
type ConnectionS3DataLakeStatus string

const (
	ConnectionS3DataLakeStatusUnknown     ConnectionS3DataLakeStatus = "UNKNOWN"
	ConnectionS3DataLakeStatusUp          ConnectionS3DataLakeStatus = "UP"
	ConnectionS3DataLakeStatusDown        ConnectionS3DataLakeStatus = "DOWN"
	ConnectionS3DataLakeStatusResize      ConnectionS3DataLakeStatus = "RESIZE"
	ConnectionS3DataLakeStatusMaintenance ConnectionS3DataLakeStatus = "MAINTENANCE"
	ConnectionS3DataLakeStatusQuota       ConnectionS3DataLakeStatus = "QUOTA"
	ConnectionS3DataLakeStatusCreating    ConnectionS3DataLakeStatus = "CREATING"
)

func (e ConnectionS3DataLakeStatus) ToPointer() *ConnectionS3DataLakeStatus {
	return &e
}

func (e *ConnectionS3DataLakeStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionS3DataLakeStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionS3DataLakeStatus: %v", v)
	}
}

type ConnectionS3DataLakeDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionS3DataLakeDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionS3DataLakeDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionS3DataLakeDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionS3DataLakeDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionS3DataLakeDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionS3DataLakeDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionS3DataLakeDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

type ConnectionS3DataLakeType string

const (
	ConnectionS3DataLakeTypeS3DataLake ConnectionS3DataLakeType = "S3_DATA_LAKE"
)

func (e ConnectionS3DataLakeType) ToPointer() *ConnectionS3DataLakeType {
	return &e
}

func (e *ConnectionS3DataLakeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_DATA_LAKE":
		*e = ConnectionS3DataLakeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionS3DataLakeType: %v", v)
	}
}

type ConnectionS3DataLake struct {
	// The current status of the connection.
	Status ConnectionS3DataLakeStatus `json:"status"`
	// The unique name of this connection.
	Name string `json:"name"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionS3DataLakeDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// Whether this connection has been marked as active.
	Active bool                     `json:"active"`
	Type   ConnectionS3DataLakeType `json:"type"`
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// An IAM Role ARN looks like 'arn:aws:iam::account_id:role/role-name'. Etleap will assume this role to access this bucket.
	IamRole string `json:"iamRole"`
	// Customer KMS key used to encrypt all files written to the S3 bucket.
	KmsKey *string `json:"kmsKey,omitempty"`
	// If this is set to 'true', Etleap will write a manifest file containing the metadata along with each load. More info <a target="_blank" href="https://support.etleap.com/hc/en-us/articles/360007751614-Generating-load-manifests-for-data-loaded-into-S3">here</a>.
	WriteManifest *bool `json:"writeManifest,omitempty"`
	// The S3 bucket where your data will be stored.
	InputBucket  string  `json:"inputBucket"`
	GlueDatabase *string `json:"glueDatabase,omitempty"`
	GlueRegion   *string `json:"glueRegion,omitempty"`
	// The base directory in the data bucket. Any data written by Etleap will be under this directory.
	BaseDirectory string `json:"baseDirectory"`
}

func (c ConnectionS3DataLake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionS3DataLake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionS3DataLake) GetStatus() ConnectionS3DataLakeStatus {
	if o == nil {
		return ConnectionS3DataLakeStatus("")
	}
	return o.Status
}

func (o *ConnectionS3DataLake) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionS3DataLake) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionS3DataLake) GetDefaultUpdateSchedule() []ConnectionS3DataLakeDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionS3DataLakeDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionS3DataLake) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionS3DataLake) GetType() ConnectionS3DataLakeType {
	if o == nil {
		return ConnectionS3DataLakeType("")
	}
	return o.Type
}

func (o *ConnectionS3DataLake) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionS3DataLake) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionS3DataLake) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionS3DataLake) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionS3DataLake) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionS3DataLake) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionS3DataLake) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionS3DataLake) GetIamRole() string {
	if o == nil {
		return ""
	}
	return o.IamRole
}

func (o *ConnectionS3DataLake) GetKmsKey() *string {
	if o == nil {
		return nil
	}
	return o.KmsKey
}

func (o *ConnectionS3DataLake) GetWriteManifest() *bool {
	if o == nil {
		return nil
	}
	return o.WriteManifest
}

func (o *ConnectionS3DataLake) GetInputBucket() string {
	if o == nil {
		return ""
	}
	return o.InputBucket
}

func (o *ConnectionS3DataLake) GetGlueDatabase() *string {
	if o == nil {
		return nil
	}
	return o.GlueDatabase
}

func (o *ConnectionS3DataLake) GetGlueRegion() *string {
	if o == nil {
		return nil
	}
	return o.GlueRegion
}

func (o *ConnectionS3DataLake) GetBaseDirectory() string {
	if o == nil {
		return ""
	}
	return o.BaseDirectory
}

type ConnectionS3DataLakeInput struct {
	// The unique name of this connection.
	Name string                   `json:"name"`
	Type ConnectionS3DataLakeType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// An IAM Role ARN looks like 'arn:aws:iam::account_id:role/role-name'. Etleap will assume this role to access this bucket.
	IamRole string `json:"iamRole"`
	// Customer KMS key used to encrypt all files written to the S3 bucket.
	KmsKey *string `json:"kmsKey,omitempty"`
	// If this is set to 'true', Etleap will write a manifest file containing the metadata along with each load. More info <a target="_blank" href="https://support.etleap.com/hc/en-us/articles/360007751614-Generating-load-manifests-for-data-loaded-into-S3">here</a>.
	WriteManifest *bool `json:"writeManifest,omitempty"`
	// The S3 bucket where your data will be stored.
	InputBucket  string  `json:"inputBucket"`
	GlueDatabase *string `json:"glueDatabase,omitempty"`
	GlueRegion   *string `json:"glueRegion,omitempty"`
	// The base directory in the data bucket. Any data written by Etleap will be under this directory.
	BaseDirectory string `json:"baseDirectory"`
}

func (o *ConnectionS3DataLakeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionS3DataLakeInput) GetType() ConnectionS3DataLakeType {
	if o == nil {
		return ConnectionS3DataLakeType("")
	}
	return o.Type
}

func (o *ConnectionS3DataLakeInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionS3DataLakeInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionS3DataLakeInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionS3DataLakeInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionS3DataLakeInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionS3DataLakeInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionS3DataLakeInput) GetIamRole() string {
	if o == nil {
		return ""
	}
	return o.IamRole
}

func (o *ConnectionS3DataLakeInput) GetKmsKey() *string {
	if o == nil {
		return nil
	}
	return o.KmsKey
}

func (o *ConnectionS3DataLakeInput) GetWriteManifest() *bool {
	if o == nil {
		return nil
	}
	return o.WriteManifest
}

func (o *ConnectionS3DataLakeInput) GetInputBucket() string {
	if o == nil {
		return ""
	}
	return o.InputBucket
}

func (o *ConnectionS3DataLakeInput) GetGlueDatabase() *string {
	if o == nil {
		return nil
	}
	return o.GlueDatabase
}

func (o *ConnectionS3DataLakeInput) GetGlueRegion() *string {
	if o == nil {
		return nil
	}
	return o.GlueRegion
}

func (o *ConnectionS3DataLakeInput) GetBaseDirectory() string {
	if o == nil {
		return ""
	}
	return o.BaseDirectory
}
