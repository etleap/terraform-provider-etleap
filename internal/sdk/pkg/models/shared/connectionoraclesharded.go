// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionOracleShardedType string

const (
	ConnectionOracleShardedTypeOracleSharded ConnectionOracleShardedType = "ORACLE_SHARDED"
)

func (e ConnectionOracleShardedType) ToPointer() *ConnectionOracleShardedType {
	return &e
}

func (e *ConnectionOracleShardedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ORACLE_SHARDED":
		*e = ConnectionOracleShardedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionOracleShardedType: %v", v)
	}
}

// ConnectionOracleShardedStatus - The current status of the connection.
type ConnectionOracleShardedStatus string

const (
	ConnectionOracleShardedStatusUnknown     ConnectionOracleShardedStatus = "UNKNOWN"
	ConnectionOracleShardedStatusUp          ConnectionOracleShardedStatus = "UP"
	ConnectionOracleShardedStatusDown        ConnectionOracleShardedStatus = "DOWN"
	ConnectionOracleShardedStatusResize      ConnectionOracleShardedStatus = "RESIZE"
	ConnectionOracleShardedStatusMaintenance ConnectionOracleShardedStatus = "MAINTENANCE"
	ConnectionOracleShardedStatusQuota       ConnectionOracleShardedStatus = "QUOTA"
	ConnectionOracleShardedStatusCreating    ConnectionOracleShardedStatus = "CREATING"
)

func (e ConnectionOracleShardedStatus) ToPointer() *ConnectionOracleShardedStatus {
	return &e
}

func (e *ConnectionOracleShardedStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionOracleShardedStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionOracleShardedStatus: %v", v)
	}
}

type ConnectionOracleShardedDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionOracleShardedDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionOracleShardedDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionOracleShardedDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionOracleShardedDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionOracleShardedDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionOracleShardedDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionOracleShardedDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

type ConnectionOracleSharded struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                      `json:"name"`
	Type ConnectionOracleShardedType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionOracleShardedStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionOracleShardedDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	// If not specified, the default schema will be used.
	Schema *string `json:"schema,omitempty"`
	// Should Etleap use replication logs to capture changes from this database? This setting cannot be changed later.
	CdcEnabled *bool                 `default:"false" json:"cdcEnabled"`
	Shards     []DatabaseShardOutput `json:"shards"`
}

func (c ConnectionOracleSharded) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionOracleSharded) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionOracleSharded) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionOracleSharded) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionOracleSharded) GetType() ConnectionOracleShardedType {
	if o == nil {
		return ConnectionOracleShardedType("")
	}
	return o.Type
}

func (o *ConnectionOracleSharded) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionOracleSharded) GetStatus() ConnectionOracleShardedStatus {
	if o == nil {
		return ConnectionOracleShardedStatus("")
	}
	return o.Status
}

func (o *ConnectionOracleSharded) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionOracleSharded) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionOracleSharded) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionOracleSharded) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionOracleSharded) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionOracleSharded) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionOracleSharded) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionOracleSharded) GetDefaultUpdateSchedule() []ConnectionOracleShardedDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionOracleShardedDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionOracleSharded) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionOracleSharded) GetCdcEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CdcEnabled
}

func (o *ConnectionOracleSharded) GetShards() []DatabaseShardOutput {
	if o == nil {
		return []DatabaseShardOutput{}
	}
	return o.Shards
}

type ConnectionOracleShardedInput struct {
	// The unique name of this connection.
	Name string                      `json:"name"`
	Type ConnectionOracleShardedType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// If not specified, the default schema will be used.
	Schema *string `json:"schema,omitempty"`
	// Should Etleap use replication logs to capture changes from this database? This setting cannot be changed later.
	CdcEnabled *bool           `default:"false" json:"cdcEnabled"`
	Shards     []DatabaseShard `json:"shards"`
}

func (c ConnectionOracleShardedInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionOracleShardedInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionOracleShardedInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionOracleShardedInput) GetType() ConnectionOracleShardedType {
	if o == nil {
		return ConnectionOracleShardedType("")
	}
	return o.Type
}

func (o *ConnectionOracleShardedInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionOracleShardedInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionOracleShardedInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionOracleShardedInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionOracleShardedInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionOracleShardedInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionOracleShardedInput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionOracleShardedInput) GetCdcEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CdcEnabled
}

func (o *ConnectionOracleShardedInput) GetShards() []DatabaseShard {
	if o == nil {
		return []DatabaseShard{}
	}
	return o.Shards
}
