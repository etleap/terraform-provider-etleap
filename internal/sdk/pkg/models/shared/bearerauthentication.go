// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type BearerAuthenticationType string

const (
	BearerAuthenticationTypeBearer BearerAuthenticationType = "BEARER"
)

func (e BearerAuthenticationType) ToPointer() *BearerAuthenticationType {
	return &e
}

func (e *BearerAuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BEARER":
		*e = BearerAuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BearerAuthenticationType: %v", v)
	}
}

// BearerAuthentication - Authentication method that uses a Bearer token.
type BearerAuthentication struct {
	// The Bearer token used for authentication. This property is stored as a secret in Etleap.
	Token string                    `json:"token"`
	Type  *BearerAuthenticationType `default:"BEARER" json:"type"`
}

func (b BearerAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BearerAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *BearerAuthentication) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *BearerAuthentication) GetType() *BearerAuthenticationType {
	if o == nil {
		return nil
	}
	return o.Type
}
