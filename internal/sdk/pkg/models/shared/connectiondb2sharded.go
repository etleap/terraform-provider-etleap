// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionDb2ShardedType string

const (
	ConnectionDb2ShardedTypeDb2Sharded ConnectionDb2ShardedType = "DB2_SHARDED"
)

func (e ConnectionDb2ShardedType) ToPointer() *ConnectionDb2ShardedType {
	return &e
}

func (e *ConnectionDb2ShardedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DB2_SHARDED":
		*e = ConnectionDb2ShardedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionDb2ShardedType: %v", v)
	}
}

// ConnectionDb2ShardedStatus - The current status of the connection.
type ConnectionDb2ShardedStatus string

const (
	ConnectionDb2ShardedStatusUnknown     ConnectionDb2ShardedStatus = "UNKNOWN"
	ConnectionDb2ShardedStatusUp          ConnectionDb2ShardedStatus = "UP"
	ConnectionDb2ShardedStatusDown        ConnectionDb2ShardedStatus = "DOWN"
	ConnectionDb2ShardedStatusResize      ConnectionDb2ShardedStatus = "RESIZE"
	ConnectionDb2ShardedStatusMaintenance ConnectionDb2ShardedStatus = "MAINTENANCE"
	ConnectionDb2ShardedStatusQuota       ConnectionDb2ShardedStatus = "QUOTA"
	ConnectionDb2ShardedStatusCreating    ConnectionDb2ShardedStatus = "CREATING"
)

func (e ConnectionDb2ShardedStatus) ToPointer() *ConnectionDb2ShardedStatus {
	return &e
}

func (e *ConnectionDb2ShardedStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionDb2ShardedStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionDb2ShardedStatus: %v", v)
	}
}

type ConnectionDb2Sharded struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                   `json:"name"`
	Type ConnectionDb2ShardedType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionDb2ShardedStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// If not specified, the default schema will be used.
	Schema *string               `json:"schema,omitempty"`
	Shards []DatabaseShardOutput `json:"shards"`
}

func (c ConnectionDb2Sharded) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionDb2Sharded) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionDb2Sharded) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionDb2Sharded) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionDb2Sharded) GetType() ConnectionDb2ShardedType {
	if o == nil {
		return ConnectionDb2ShardedType("")
	}
	return o.Type
}

func (o *ConnectionDb2Sharded) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionDb2Sharded) GetStatus() ConnectionDb2ShardedStatus {
	if o == nil {
		return ConnectionDb2ShardedStatus("")
	}
	return o.Status
}

func (o *ConnectionDb2Sharded) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionDb2Sharded) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionDb2Sharded) GetShards() []DatabaseShardOutput {
	if o == nil {
		return []DatabaseShardOutput{}
	}
	return o.Shards
}

type ConnectionDb2ShardedInput struct {
	// The unique name of this connection.
	Name string                   `json:"name"`
	Type ConnectionDb2ShardedType `json:"type"`
	// If not specified, the default schema will be used.
	Schema *string         `json:"schema,omitempty"`
	Shards []DatabaseShard `json:"shards"`
}

func (o *ConnectionDb2ShardedInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionDb2ShardedInput) GetType() ConnectionDb2ShardedType {
	if o == nil {
		return ConnectionDb2ShardedType("")
	}
	return o.Type
}

func (o *ConnectionDb2ShardedInput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionDb2ShardedInput) GetShards() []DatabaseShard {
	if o == nil {
		return []DatabaseShard{}
	}
	return o.Shards
}
