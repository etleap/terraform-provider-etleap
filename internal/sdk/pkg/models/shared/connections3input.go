// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionS3InputType string

const (
	ConnectionS3InputTypeS3Input ConnectionS3InputType = "S3_INPUT"
)

func (e ConnectionS3InputType) ToPointer() *ConnectionS3InputType {
	return &e
}

func (e *ConnectionS3InputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_INPUT":
		*e = ConnectionS3InputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionS3InputType: %v", v)
	}
}

// ConnectionS3InputStatus - The current status of the connection.
type ConnectionS3InputStatus string

const (
	ConnectionS3InputStatusUnknown     ConnectionS3InputStatus = "UNKNOWN"
	ConnectionS3InputStatusUp          ConnectionS3InputStatus = "UP"
	ConnectionS3InputStatusDown        ConnectionS3InputStatus = "DOWN"
	ConnectionS3InputStatusResize      ConnectionS3InputStatus = "RESIZE"
	ConnectionS3InputStatusMaintenance ConnectionS3InputStatus = "MAINTENANCE"
	ConnectionS3InputStatusQuota       ConnectionS3InputStatus = "QUOTA"
	ConnectionS3InputStatusCreating    ConnectionS3InputStatus = "CREATING"
)

func (e ConnectionS3InputStatus) ToPointer() *ConnectionS3InputStatus {
	return &e
}

func (e *ConnectionS3InputStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionS3InputStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionS3InputStatus: %v", v)
	}
}

type ConnectionS3Input struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                `json:"name"`
	Type ConnectionS3InputType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionS3InputStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The AWS IAM Role ARN that Etleap can assume to access the input bucket.
	IamRole string `json:"iamRole"`
	// The name of the S3 bucket.
	InputBucket string `json:"inputBucket"`
	// The base directory to read from within the S3 bucket.
	BaseDirectory string `json:"baseDirectory"`
}

func (c ConnectionS3Input) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionS3Input) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionS3Input) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionS3Input) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionS3Input) GetType() ConnectionS3InputType {
	if o == nil {
		return ConnectionS3InputType("")
	}
	return o.Type
}

func (o *ConnectionS3Input) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionS3Input) GetStatus() ConnectionS3InputStatus {
	if o == nil {
		return ConnectionS3InputStatus("")
	}
	return o.Status
}

func (o *ConnectionS3Input) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionS3Input) GetIamRole() string {
	if o == nil {
		return ""
	}
	return o.IamRole
}

func (o *ConnectionS3Input) GetInputBucket() string {
	if o == nil {
		return ""
	}
	return o.InputBucket
}

func (o *ConnectionS3Input) GetBaseDirectory() string {
	if o == nil {
		return ""
	}
	return o.BaseDirectory
}

type ConnectionS3InputInput struct {
	// The unique name of this connection.
	Name string                `json:"name"`
	Type ConnectionS3InputType `json:"type"`
	// The AWS IAM Role ARN that Etleap can assume to access the input bucket.
	IamRole string `json:"iamRole"`
	// The name of the S3 bucket.
	InputBucket string `json:"inputBucket"`
	// The base directory to read from within the S3 bucket.
	BaseDirectory string `json:"baseDirectory"`
}

func (o *ConnectionS3InputInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionS3InputInput) GetType() ConnectionS3InputType {
	if o == nil {
		return ConnectionS3InputType("")
	}
	return o.Type
}

func (o *ConnectionS3InputInput) GetIamRole() string {
	if o == nil {
		return ""
	}
	return o.IamRole
}

func (o *ConnectionS3InputInput) GetInputBucket() string {
	if o == nil {
		return ""
	}
	return o.InputBucket
}

func (o *ConnectionS3InputInput) GetBaseDirectory() string {
	if o == nil {
		return ""
	}
	return o.BaseDirectory
}
