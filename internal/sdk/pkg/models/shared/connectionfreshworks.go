// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionFreshworksType string

const (
	ConnectionFreshworksTypeFreshworks ConnectionFreshworksType = "FRESHWORKS"
)

func (e ConnectionFreshworksType) ToPointer() *ConnectionFreshworksType {
	return &e
}

func (e *ConnectionFreshworksType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FRESHWORKS":
		*e = ConnectionFreshworksType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionFreshworksType: %v", v)
	}
}

// ConnectionFreshworksStatus - The current status of the connection.
type ConnectionFreshworksStatus string

const (
	ConnectionFreshworksStatusUnknown     ConnectionFreshworksStatus = "UNKNOWN"
	ConnectionFreshworksStatusUp          ConnectionFreshworksStatus = "UP"
	ConnectionFreshworksStatusDown        ConnectionFreshworksStatus = "DOWN"
	ConnectionFreshworksStatusResize      ConnectionFreshworksStatus = "RESIZE"
	ConnectionFreshworksStatusMaintenance ConnectionFreshworksStatus = "MAINTENANCE"
	ConnectionFreshworksStatusQuota       ConnectionFreshworksStatus = "QUOTA"
	ConnectionFreshworksStatusCreating    ConnectionFreshworksStatus = "CREATING"
)

func (e ConnectionFreshworksStatus) ToPointer() *ConnectionFreshworksStatus {
	return &e
}

func (e *ConnectionFreshworksStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionFreshworksStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionFreshworksStatus: %v", v)
	}
}

type ConnectionFreshworksDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionFreshworksDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionFreshworksDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionFreshworksDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionFreshworksDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionFreshworksDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionFreshworksDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionFreshworksDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

type ConnectionFreshworks struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                   `json:"name"`
	Type ConnectionFreshworksType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionFreshworksStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionFreshworksDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	FreshdeskDomain       string                                      `json:"freshdeskDomain"`
	FreshcallerDomain     string                                      `json:"freshcallerDomain"`
}

func (c ConnectionFreshworks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionFreshworks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionFreshworks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionFreshworks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionFreshworks) GetType() ConnectionFreshworksType {
	if o == nil {
		return ConnectionFreshworksType("")
	}
	return o.Type
}

func (o *ConnectionFreshworks) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionFreshworks) GetStatus() ConnectionFreshworksStatus {
	if o == nil {
		return ConnectionFreshworksStatus("")
	}
	return o.Status
}

func (o *ConnectionFreshworks) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionFreshworks) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionFreshworks) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionFreshworks) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionFreshworks) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionFreshworks) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionFreshworks) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionFreshworks) GetDefaultUpdateSchedule() []ConnectionFreshworksDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionFreshworksDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionFreshworks) GetFreshdeskDomain() string {
	if o == nil {
		return ""
	}
	return o.FreshdeskDomain
}

func (o *ConnectionFreshworks) GetFreshcallerDomain() string {
	if o == nil {
		return ""
	}
	return o.FreshcallerDomain
}

type ConnectionFreshworksInput struct {
	// The unique name of this connection.
	Name string                   `json:"name"`
	Type ConnectionFreshworksType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule    *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	FreshdeskDomain   string               `json:"freshdeskDomain"`
	FreshdeskAPIKey   string               `json:"freshdeskApiKey"`
	FreshcallerDomain string               `json:"freshcallerDomain"`
	FreshcallerAPIKey string               `json:"freshcallerApiKey"`
}

func (o *ConnectionFreshworksInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionFreshworksInput) GetType() ConnectionFreshworksType {
	if o == nil {
		return ConnectionFreshworksType("")
	}
	return o.Type
}

func (o *ConnectionFreshworksInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionFreshworksInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionFreshworksInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionFreshworksInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionFreshworksInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionFreshworksInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionFreshworksInput) GetFreshdeskDomain() string {
	if o == nil {
		return ""
	}
	return o.FreshdeskDomain
}

func (o *ConnectionFreshworksInput) GetFreshdeskAPIKey() string {
	if o == nil {
		return ""
	}
	return o.FreshdeskAPIKey
}

func (o *ConnectionFreshworksInput) GetFreshcallerDomain() string {
	if o == nil {
		return ""
	}
	return o.FreshcallerDomain
}

func (o *ConnectionFreshworksInput) GetFreshcallerAPIKey() string {
	if o == nil {
		return ""
	}
	return o.FreshcallerAPIKey
}
