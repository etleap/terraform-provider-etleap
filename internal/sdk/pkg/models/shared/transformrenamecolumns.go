// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TransformRenameColumnsType string

const (
	TransformRenameColumnsTypeRenameColumns TransformRenameColumnsType = "RENAME_COLUMNS"
)

func (e TransformRenameColumnsType) ToPointer() *TransformRenameColumnsType {
	return &e
}

func (e *TransformRenameColumnsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RENAME_COLUMNS":
		*e = TransformRenameColumnsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransformRenameColumnsType: %v", v)
	}
}

type Columns struct {
	// Old column name.
	Column string `json:"column"`
	// New column name. Name must be unique in column list.
	Name string `json:"name"`
}

func (o *Columns) GetColumn() string {
	if o == nil {
		return ""
	}
	return o.Column
}

func (o *Columns) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// TransformRenameColumns - Rename exisiting columns.
type TransformRenameColumns struct {
	Type TransformRenameColumnsType `json:"type"`
	// Maps old column names to the new column names.
	Columns []Columns `json:"columns"`
}

func (o *TransformRenameColumns) GetType() TransformRenameColumnsType {
	if o == nil {
		return TransformRenameColumnsType("")
	}
	return o.Type
}

func (o *TransformRenameColumns) GetColumns() []Columns {
	if o == nil {
		return []Columns{}
	}
	return o.Columns
}
