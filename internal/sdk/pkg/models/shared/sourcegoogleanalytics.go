// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/types"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type SourceGoogleAnalyticsType string

const (
	SourceGoogleAnalyticsTypeGoogleAnalytics SourceGoogleAnalyticsType = "GOOGLE_ANALYTICS"
)

func (e SourceGoogleAnalyticsType) ToPointer() *SourceGoogleAnalyticsType {
	return &e
}

func (e *SourceGoogleAnalyticsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GOOGLE_ANALYTICS":
		*e = SourceGoogleAnalyticsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleAnalyticsType: %v", v)
	}
}

// Service - | | |
// | - | - |
// | `REPORTING` | Gives you access to Google Analytics data, including segments. |
// | `MULTI_CHANNEL_FUNNELS ` | Get conversion path data which shows user interactions with various traffic sources. |
type Service string

const (
	ServiceReporting           Service = "REPORTING"
	ServiceMultiChannelFunnels Service = "MULTI_CHANNEL_FUNNELS"
)

func (e Service) ToPointer() *Service {
	return &e
}

func (e *Service) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REPORTING":
		fallthrough
	case "MULTI_CHANNEL_FUNNELS":
		*e = Service(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Service: %v", v)
	}
}

type SourceGoogleAnalytics struct {
	Type SourceGoogleAnalyticsType `json:"type"`
	// The universally unique identifier for the source.
	ConnectionID string `json:"connectionId"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// The full name of the site in Google Analytics
	Entity string `json:"entity"`
	// | | |
	// | - | - |
	// | `REPORTING` | Gives you access to Google Analytics data, including segments. |
	// | `MULTI_CHANNEL_FUNNELS ` | Get conversion path data which shows user interactions with various traffic sources. |
	Service    Service  `json:"service"`
	Segment    *string  `json:"segment,omitempty"`
	Dimensions []string `json:"dimensions"`
	Metrics    []string `json:"metrics"`
	// Format of the timestamp: 'yyyy-MM-dd'.
	MaxAccuracyStartDate *types.Date `json:"maxAccuracyStartDate,omitempty"`
}

func (s SourceGoogleAnalytics) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleAnalytics) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleAnalytics) GetType() SourceGoogleAnalyticsType {
	if o == nil {
		return SourceGoogleAnalyticsType("")
	}
	return o.Type
}

func (o *SourceGoogleAnalytics) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceGoogleAnalytics) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceGoogleAnalytics) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}

func (o *SourceGoogleAnalytics) GetService() Service {
	if o == nil {
		return Service("")
	}
	return o.Service
}

func (o *SourceGoogleAnalytics) GetSegment() *string {
	if o == nil {
		return nil
	}
	return o.Segment
}

func (o *SourceGoogleAnalytics) GetDimensions() []string {
	if o == nil {
		return []string{}
	}
	return o.Dimensions
}

func (o *SourceGoogleAnalytics) GetMetrics() []string {
	if o == nil {
		return []string{}
	}
	return o.Metrics
}

func (o *SourceGoogleAnalytics) GetMaxAccuracyStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.MaxAccuracyStartDate
}
