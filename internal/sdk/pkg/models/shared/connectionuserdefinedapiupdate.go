// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionUserDefinedAPIUpdateType string

const (
	ConnectionUserDefinedAPIUpdateTypeUserDefinedAPI ConnectionUserDefinedAPIUpdateType = "USER_DEFINED_API"
)

func (e ConnectionUserDefinedAPIUpdateType) ToPointer() *ConnectionUserDefinedAPIUpdateType {
	return &e
}

func (e *ConnectionUserDefinedAPIUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USER_DEFINED_API":
		*e = ConnectionUserDefinedAPIUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionUserDefinedAPIUpdateType: %v", v)
	}
}

type ConnectionUserDefinedAPIUpdate struct {
	// The unique name of this connection.
	Name *string                            `json:"name,omitempty"`
	Type ConnectionUserDefinedAPIUpdateType `json:"type"`
	// Whether this connection should be marked as active.
	Active *bool `json:"active,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	Authentication *Authentication      `json:"authentication,omitempty"`
	// Extends [Entity](entity-schema.v1.json) with properties required by the connector for extracting all its data, such as a paging strategy.
	Entity *UserDefinedAPIEntity `json:"entity,omitempty"`
}

func (o *ConnectionUserDefinedAPIUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionUserDefinedAPIUpdate) GetType() ConnectionUserDefinedAPIUpdateType {
	if o == nil {
		return ConnectionUserDefinedAPIUpdateType("")
	}
	return o.Type
}

func (o *ConnectionUserDefinedAPIUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionUserDefinedAPIUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionUserDefinedAPIUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionUserDefinedAPIUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionUserDefinedAPIUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionUserDefinedAPIUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionUserDefinedAPIUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionUserDefinedAPIUpdate) GetAuthentication() *Authentication {
	if o == nil {
		return nil
	}
	return o.Authentication
}

func (o *ConnectionUserDefinedAPIUpdate) GetAuthenticationBasic() *BasicAuthentication {
	if v := o.GetAuthentication(); v != nil {
		return v.BasicAuthentication
	}
	return nil
}

func (o *ConnectionUserDefinedAPIUpdate) GetAuthenticationBearer() *BearerAuthentication {
	if v := o.GetAuthentication(); v != nil {
		return v.BearerAuthentication
	}
	return nil
}

func (o *ConnectionUserDefinedAPIUpdate) GetAuthenticationHeader() *HeaderAuthentication {
	if v := o.GetAuthentication(); v != nil {
		return v.HeaderAuthentication
	}
	return nil
}

func (o *ConnectionUserDefinedAPIUpdate) GetEntity() *UserDefinedAPIEntity {
	if o == nil {
		return nil
	}
	return o.Entity
}
