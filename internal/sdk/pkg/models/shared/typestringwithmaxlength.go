// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TypeStringWithMaxLengthType string

const (
	TypeStringWithMaxLengthTypeString TypeStringWithMaxLengthType = "STRING"
)

func (e TypeStringWithMaxLengthType) ToPointer() *TypeStringWithMaxLengthType {
	return &e
}

func (e *TypeStringWithMaxLengthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STRING":
		*e = TypeStringWithMaxLengthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeStringWithMaxLengthType: %v", v)
	}
}

type TypeStringWithMaxLength struct {
	Type TypeStringWithMaxLengthType `json:"type"`
	// Maximum string length in bytes.
	Length int64 `json:"length"`
}

func (o *TypeStringWithMaxLength) GetType() TypeStringWithMaxLengthType {
	if o == nil {
		return TypeStringWithMaxLengthType("")
	}
	return o.Type
}

func (o *TypeStringWithMaxLength) GetLength() int64 {
	if o == nil {
		return 0
	}
	return o.Length
}
