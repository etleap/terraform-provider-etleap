// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionEloquaType string

const (
	ConnectionEloquaTypeEloqua ConnectionEloquaType = "ELOQUA"
)

func (e ConnectionEloquaType) ToPointer() *ConnectionEloquaType {
	return &e
}

func (e *ConnectionEloquaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ELOQUA":
		*e = ConnectionEloquaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionEloquaType: %v", v)
	}
}

// ConnectionEloquaStatus - The current status of the connection.
type ConnectionEloquaStatus string

const (
	ConnectionEloquaStatusUnknown     ConnectionEloquaStatus = "UNKNOWN"
	ConnectionEloquaStatusUp          ConnectionEloquaStatus = "UP"
	ConnectionEloquaStatusDown        ConnectionEloquaStatus = "DOWN"
	ConnectionEloquaStatusResize      ConnectionEloquaStatus = "RESIZE"
	ConnectionEloquaStatusMaintenance ConnectionEloquaStatus = "MAINTENANCE"
	ConnectionEloquaStatusQuota       ConnectionEloquaStatus = "QUOTA"
	ConnectionEloquaStatusCreating    ConnectionEloquaStatus = "CREATING"
)

func (e ConnectionEloquaStatus) ToPointer() *ConnectionEloquaStatus {
	return &e
}

func (e *ConnectionEloquaStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionEloquaStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionEloquaStatus: %v", v)
	}
}

type ConnectionEloqua struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string               `json:"name"`
	Type ConnectionEloquaType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionEloquaStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	Company    string    `json:"company"`
	Username   string    `json:"username"`
}

func (c ConnectionEloqua) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionEloqua) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionEloqua) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionEloqua) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionEloqua) GetType() ConnectionEloquaType {
	if o == nil {
		return ConnectionEloquaType("")
	}
	return o.Type
}

func (o *ConnectionEloqua) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionEloqua) GetStatus() ConnectionEloquaStatus {
	if o == nil {
		return ConnectionEloquaStatus("")
	}
	return o.Status
}

func (o *ConnectionEloqua) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionEloqua) GetCompany() string {
	if o == nil {
		return ""
	}
	return o.Company
}

func (o *ConnectionEloqua) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type ConnectionEloquaInput struct {
	// The unique name of this connection.
	Name     string               `json:"name"`
	Type     ConnectionEloquaType `json:"type"`
	Company  string               `json:"company"`
	Username string               `json:"username"`
	Password string               `json:"password"`
}

func (o *ConnectionEloquaInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionEloquaInput) GetType() ConnectionEloquaType {
	if o == nil {
		return ConnectionEloquaType("")
	}
	return o.Type
}

func (o *ConnectionEloquaInput) GetCompany() string {
	if o == nil {
		return ""
	}
	return o.Company
}

func (o *ConnectionEloquaInput) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ConnectionEloquaInput) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}
