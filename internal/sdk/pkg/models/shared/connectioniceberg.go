// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionIcebergType string

const (
	ConnectionIcebergTypeIceberg ConnectionIcebergType = "ICEBERG"
)

func (e ConnectionIcebergType) ToPointer() *ConnectionIcebergType {
	return &e
}

func (e *ConnectionIcebergType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ICEBERG":
		*e = ConnectionIcebergType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionIcebergType: %v", v)
	}
}

// ConnectionIcebergStatus - The current status of the connection.
type ConnectionIcebergStatus string

const (
	ConnectionIcebergStatusUnknown     ConnectionIcebergStatus = "UNKNOWN"
	ConnectionIcebergStatusUp          ConnectionIcebergStatus = "UP"
	ConnectionIcebergStatusDown        ConnectionIcebergStatus = "DOWN"
	ConnectionIcebergStatusResize      ConnectionIcebergStatus = "RESIZE"
	ConnectionIcebergStatusMaintenance ConnectionIcebergStatus = "MAINTENANCE"
	ConnectionIcebergStatusQuota       ConnectionIcebergStatus = "QUOTA"
	ConnectionIcebergStatusCreating    ConnectionIcebergStatus = "CREATING"
)

func (e ConnectionIcebergStatus) ToPointer() *ConnectionIcebergStatus {
	return &e
}

func (e *ConnectionIcebergStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionIcebergStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionIcebergStatus: %v", v)
	}
}

type ConnectionIcebergDefaultUpdateSchedule struct {
	// The pipeline mode refers to how the pipeline fetches data changes from the source and how those changes are applied to the destination table. See <a target="_blank" href="https://docs.etleap.com/docs/documentation/ZG9jOjIyMjE3ODA2-introduction">the documentation</a> for more details.
	PipelineMode *PipelineUpdateModes `json:"pipelineMode,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
}

func (o *ConnectionIcebergDefaultUpdateSchedule) GetPipelineMode() *PipelineUpdateModes {
	if o == nil {
		return nil
	}
	return o.PipelineMode
}

func (o *ConnectionIcebergDefaultUpdateSchedule) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionIcebergDefaultUpdateSchedule) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionIcebergDefaultUpdateSchedule) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionIcebergDefaultUpdateSchedule) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionIcebergDefaultUpdateSchedule) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionIcebergDefaultUpdateSchedule) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

type ConnectionIceberg struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                `json:"name"`
	Type ConnectionIcebergType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionIcebergStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// When an update schedule is not defined for a connection, the default schedule is used. The default defined individually per `pipelineMode` and may be subject to change.
	DefaultUpdateSchedule []ConnectionIcebergDefaultUpdateSchedule `json:"defaultUpdateSchedule"`
	IamRole               string                                   `json:"iamRole"`
	DataBucket            string                                   `json:"dataBucket"`
	BaseDirectory         string                                   `json:"baseDirectory"`
	GlueDatabase          string                                   `json:"glueDatabase"`
	GlueRegion            string                                   `json:"glueRegion"`
	WarehouseConnection   *string                                  `json:"warehouseConnection,omitempty"`
}

func (c ConnectionIceberg) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionIceberg) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionIceberg) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionIceberg) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionIceberg) GetType() ConnectionIcebergType {
	if o == nil {
		return ConnectionIcebergType("")
	}
	return o.Type
}

func (o *ConnectionIceberg) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionIceberg) GetStatus() ConnectionIcebergStatus {
	if o == nil {
		return ConnectionIcebergStatus("")
	}
	return o.Status
}

func (o *ConnectionIceberg) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionIceberg) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionIceberg) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionIceberg) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionIceberg) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionIceberg) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionIceberg) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionIceberg) GetDefaultUpdateSchedule() []ConnectionIcebergDefaultUpdateSchedule {
	if o == nil {
		return []ConnectionIcebergDefaultUpdateSchedule{}
	}
	return o.DefaultUpdateSchedule
}

func (o *ConnectionIceberg) GetIamRole() string {
	if o == nil {
		return ""
	}
	return o.IamRole
}

func (o *ConnectionIceberg) GetDataBucket() string {
	if o == nil {
		return ""
	}
	return o.DataBucket
}

func (o *ConnectionIceberg) GetBaseDirectory() string {
	if o == nil {
		return ""
	}
	return o.BaseDirectory
}

func (o *ConnectionIceberg) GetGlueDatabase() string {
	if o == nil {
		return ""
	}
	return o.GlueDatabase
}

func (o *ConnectionIceberg) GetGlueRegion() string {
	if o == nil {
		return ""
	}
	return o.GlueRegion
}

func (o *ConnectionIceberg) GetWarehouseConnection() *string {
	if o == nil {
		return nil
	}
	return o.WarehouseConnection
}

type ConnectionIcebergInput struct {
	// The unique name of this connection.
	Name string                `json:"name"`
	Type ConnectionIcebergType `json:"type"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule      *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	IamRole             string               `json:"iamRole"`
	DataBucket          string               `json:"dataBucket"`
	BaseDirectory       string               `json:"baseDirectory"`
	GlueDatabase        string               `json:"glueDatabase"`
	GlueRegion          string               `json:"glueRegion"`
	WarehouseConnection *string              `json:"warehouseConnection,omitempty"`
}

func (o *ConnectionIcebergInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionIcebergInput) GetType() ConnectionIcebergType {
	if o == nil {
		return ConnectionIcebergType("")
	}
	return o.Type
}

func (o *ConnectionIcebergInput) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionIcebergInput) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionIcebergInput) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionIcebergInput) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionIcebergInput) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionIcebergInput) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionIcebergInput) GetIamRole() string {
	if o == nil {
		return ""
	}
	return o.IamRole
}

func (o *ConnectionIcebergInput) GetDataBucket() string {
	if o == nil {
		return ""
	}
	return o.DataBucket
}

func (o *ConnectionIcebergInput) GetBaseDirectory() string {
	if o == nil {
		return ""
	}
	return o.BaseDirectory
}

func (o *ConnectionIcebergInput) GetGlueDatabase() string {
	if o == nil {
		return ""
	}
	return o.GlueDatabase
}

func (o *ConnectionIcebergInput) GetGlueRegion() string {
	if o == nil {
		return ""
	}
	return o.GlueRegion
}

func (o *ConnectionIcebergInput) GetWarehouseConnection() *string {
	if o == nil {
		return nil
	}
	return o.WarehouseConnection
}
