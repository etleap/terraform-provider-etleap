// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type ConnectionTypesType string

const (
	ConnectionTypesTypeActiveCampaign           ConnectionTypesType = "ACTIVE_CAMPAIGN"
	ConnectionTypesTypeBigquery                 ConnectionTypesType = "BIGQUERY"
	ConnectionTypesTypeBingAds                  ConnectionTypesType = "BING_ADS"
	ConnectionTypesTypeBlackline                ConnectionTypesType = "BLACKLINE"
	ConnectionTypesTypeCriteo                   ConnectionTypesType = "CRITEO"
	ConnectionTypesTypeDb2                      ConnectionTypesType = "DB2"
	ConnectionTypesTypeDb2Sharded               ConnectionTypesType = "DB2_SHARDED"
	ConnectionTypesTypeDeltaLake                ConnectionTypesType = "DELTA_LAKE"
	ConnectionTypesTypeElasticsearch            ConnectionTypesType = "ELASTICSEARCH"
	ConnectionTypesTypeElluminate               ConnectionTypesType = "ELLUMINATE"
	ConnectionTypesTypeEloqua                   ConnectionTypesType = "ELOQUA"
	ConnectionTypesTypeFacebookAds              ConnectionTypesType = "FACEBOOK_ADS"
	ConnectionTypesTypeFifteenFive              ConnectionTypesType = "FIFTEEN_FIVE"
	ConnectionTypesTypeFreshworks               ConnectionTypesType = "FRESHWORKS"
	ConnectionTypesTypeFtp                      ConnectionTypesType = "FTP"
	ConnectionTypesTypeGong                     ConnectionTypesType = "GONG"
	ConnectionTypesTypeGoogleAds                ConnectionTypesType = "GOOGLE_ADS"
	ConnectionTypesTypeGoogleAnalytics          ConnectionTypesType = "GOOGLE_ANALYTICS"
	ConnectionTypesTypeGoogleAnalyticsGa4       ConnectionTypesType = "GOOGLE_ANALYTICS_GA4"
	ConnectionTypesTypeGoogleCloudStorage       ConnectionTypesType = "GOOGLE_CLOUD_STORAGE"
	ConnectionTypesTypeGoogleSheets             ConnectionTypesType = "GOOGLE_SHEETS"
	ConnectionTypesTypeHubspot                  ConnectionTypesType = "HUBSPOT"
	ConnectionTypesTypeImpactRadius             ConnectionTypesType = "IMPACT_RADIUS"
	ConnectionTypesTypeIntercom                 ConnectionTypesType = "INTERCOM"
	ConnectionTypesTypeJiraAlign                ConnectionTypesType = "JIRA_ALIGN"
	ConnectionTypesTypeKafka                    ConnectionTypesType = "KAFKA"
	ConnectionTypesTypeKustomer                 ConnectionTypesType = "KUSTOMER"
	ConnectionTypesTypeLdap                     ConnectionTypesType = "LDAP"
	ConnectionTypesTypeLdapVirtualListView      ConnectionTypesType = "LDAP_VIRTUAL_LIST_VIEW"
	ConnectionTypesTypeLinkedInAds              ConnectionTypesType = "LINKED_IN_ADS"
	ConnectionTypesTypeMarketo                  ConnectionTypesType = "MARKETO"
	ConnectionTypesTypeMixpanel                 ConnectionTypesType = "MIXPANEL"
	ConnectionTypesTypeMongodb                  ConnectionTypesType = "MONGODB"
	ConnectionTypesTypeMysql                    ConnectionTypesType = "MYSQL"
	ConnectionTypesTypeMysqlSharded             ConnectionTypesType = "MYSQL_SHARDED"
	ConnectionTypesTypeNetsuite                 ConnectionTypesType = "NETSUITE"
	ConnectionTypesTypeNetsuiteV2               ConnectionTypesType = "NETSUITE_V2"
	ConnectionTypesTypeOracle                   ConnectionTypesType = "ORACLE"
	ConnectionTypesTypeOracleSharded            ConnectionTypesType = "ORACLE_SHARDED"
	ConnectionTypesTypeOutlook                  ConnectionTypesType = "OUTLOOK"
	ConnectionTypesTypeOutreach                 ConnectionTypesType = "OUTREACH"
	ConnectionTypesTypePinterestAds             ConnectionTypesType = "PINTEREST_ADS"
	ConnectionTypesTypePostgres                 ConnectionTypesType = "POSTGRES"
	ConnectionTypesTypePostgresSharded          ConnectionTypesType = "POSTGRES_SHARDED"
	ConnectionTypesTypeQuoraAds                 ConnectionTypesType = "QUORA_ADS"
	ConnectionTypesTypeRaveMedidata             ConnectionTypesType = "RAVE_MEDIDATA"
	ConnectionTypesTypeRecurly                  ConnectionTypesType = "RECURLY"
	ConnectionTypesTypeRedshift                 ConnectionTypesType = "REDSHIFT"
	ConnectionTypesTypeRedshiftSharded          ConnectionTypesType = "REDSHIFT_SHARDED"
	ConnectionTypesTypeS3DataLake               ConnectionTypesType = "S3_DATA_LAKE"
	ConnectionTypesTypeS3Input                  ConnectionTypesType = "S3_INPUT"
	ConnectionTypesTypeSalesforce               ConnectionTypesType = "SALESFORCE"
	ConnectionTypesTypeSalesforceMarketingCloud ConnectionTypesType = "SALESFORCE_MARKETING_CLOUD"
	ConnectionTypesTypeSapHana                  ConnectionTypesType = "SAP_HANA"
	ConnectionTypesTypeSapHanaSharded           ConnectionTypesType = "SAP_HANA_SHARDED"
	ConnectionTypesTypeSeismic                  ConnectionTypesType = "SEISMIC"
	ConnectionTypesTypeSftp                     ConnectionTypesType = "SFTP"
	ConnectionTypesTypeShopify                  ConnectionTypesType = "SHOPIFY"
	ConnectionTypesTypeSkyward                  ConnectionTypesType = "SKYWARD"
	ConnectionTypesTypeSnapchatAds              ConnectionTypesType = "SNAPCHAT_ADS"
	ConnectionTypesTypeSnowflake                ConnectionTypesType = "SNOWFLAKE"
	ConnectionTypesTypeSnowflakeSharded         ConnectionTypesType = "SNOWFLAKE_SHARDED"
	ConnectionTypesTypeSQLServer                ConnectionTypesType = "SQL_SERVER"
	ConnectionTypesTypeSQLServerSharded         ConnectionTypesType = "SQL_SERVER_SHARDED"
	ConnectionTypesTypeSquare                   ConnectionTypesType = "SQUARE"
	ConnectionTypesTypeStripe                   ConnectionTypesType = "STRIPE"
	ConnectionTypesTypeSumtotal                 ConnectionTypesType = "SUMTOTAL"
	ConnectionTypesTypeTheTradeDesk             ConnectionTypesType = "THE_TRADE_DESK"
	ConnectionTypesTypeTikTokAds                ConnectionTypesType = "TIK_TOK_ADS"
	ConnectionTypesTypeTwilio                   ConnectionTypesType = "TWILIO"
	ConnectionTypesTypeTwitterAds               ConnectionTypesType = "TWITTER_ADS"
	ConnectionTypesTypeUservoice                ConnectionTypesType = "USERVOICE"
	ConnectionTypesTypeUserDefinedAPI           ConnectionTypesType = "USER_DEFINED_API"
	ConnectionTypesTypeVeeva                    ConnectionTypesType = "VEEVA"
	ConnectionTypesTypeVerizonMediaDsp          ConnectionTypesType = "VERIZON_MEDIA_DSP"
	ConnectionTypesTypeWorkdayReport            ConnectionTypesType = "WORKDAY_REPORT"
	ConnectionTypesTypeWorkfront                ConnectionTypesType = "WORKFRONT"
	ConnectionTypesTypeZendesk                  ConnectionTypesType = "ZENDESK"
	ConnectionTypesTypeZoomPhone                ConnectionTypesType = "ZOOM_PHONE"
	ConnectionTypesTypeZuora                    ConnectionTypesType = "ZUORA"
)

type ConnectionTypes struct {
	ConnectionActiveCampaign           *ConnectionActiveCampaign
	ConnectionBigQuery                 *ConnectionBigQuery
	ConnectionBing                     *ConnectionBing
	ConnectionBlackline                *ConnectionBlackline
	ConnectionCriteo                   *ConnectionCriteo
	ConnectionDb2                      *ConnectionDb2
	ConnectionDb2Sharded               *ConnectionDb2Sharded
	ConnectionDeltaLake                *ConnectionDeltaLake
	ConnectionElasticSearch            *ConnectionElasticSearch
	ConnectionElluminate               *ConnectionElluminate
	ConnectionEloqua                   *ConnectionEloqua
	ConnectionFb                       *ConnectionFb
	ConnectionFifteenFive              *ConnectionFifteenFive
	ConnectionFreshworks               *ConnectionFreshworks
	ConnectionFtp                      *ConnectionFtp
	ConnectionGa                       *ConnectionGa
	ConnectionGong                     *ConnectionGong
	ConnectionGoogleAds                *ConnectionGoogleAds
	ConnectionGoogleAnalyticsGa4       *ConnectionGoogleAnalyticsGa4
	ConnectionGoogleCloudStorage       *ConnectionGoogleCloudStorage
	ConnectionGoogleSheets             *ConnectionGoogleSheets
	ConnectionHubspot                  *ConnectionHubspot
	ConnectionImpactRadius             *ConnectionImpactRadius
	ConnectionIntercom                 *ConnectionIntercom
	ConnectionJiraAlign                *ConnectionJiraAlign
	ConnectionKafka                    *ConnectionKafka
	ConnectionKustomer                 *ConnectionKustomer
	ConnectionLdap                     *ConnectionLdap
	ConnectionLdapVirtualListView      *ConnectionLdapVirtualListView
	ConnectionLinkedInAds              *ConnectionLinkedInAds
	ConnectionMarketo                  *ConnectionMarketo
	ConnectionMixpanel                 *ConnectionMixpanel
	ConnectionMongo                    *ConnectionMongo
	ConnectionMysql                    *ConnectionMysql
	ConnectionMysqlSharded             *ConnectionMysqlSharded
	ConnectionNetsuite                 *ConnectionNetsuite
	ConnectionNetsuiteV2               *ConnectionNetsuiteV2
	ConnectionOracle                   *ConnectionOracle
	ConnectionOracleSharded            *ConnectionOracleSharded
	ConnectionOutlook                  *ConnectionOutlook
	ConnectionOutreach                 *ConnectionOutreach
	ConnectionPinterestAds             *ConnectionPinterestAds
	ConnectionPostgres                 *ConnectionPostgres
	ConnectionPostgresSharded          *ConnectionPostgresSharded
	ConnectionQuora                    *ConnectionQuora
	ConnectionRaveMedidata             *ConnectionRaveMedidata
	ConnectionRecurly                  *ConnectionRecurly
	ConnectionRedshift                 *ConnectionRedshift
	ConnectionRedshiftSharded          *ConnectionRedshiftSharded
	ConnectionS3DataLake               *ConnectionS3DataLake
	ConnectionS3Input                  *ConnectionS3Input
	ConnectionSalesforce               *ConnectionSalesforce
	ConnectionSalesforceMarketingCloud *ConnectionSalesforceMarketingCloud
	ConnectionSapHana                  *ConnectionSapHana
	ConnectionSapHanaSharded           *ConnectionSapHanaSharded
	ConnectionSeismic                  *ConnectionSeismic
	ConnectionSftp                     *ConnectionSftp
	ConnectionShopify                  *ConnectionShopify
	ConnectionSkyward                  *ConnectionSkyward
	ConnectionSnapchatAds              *ConnectionSnapchatAds
	ConnectionSnowflake                *ConnectionSnowflake
	ConnectionSnowflakeSharded         *ConnectionSnowflakeSharded
	ConnectionSQLServer                *ConnectionSQLServer
	ConnectionSQLServerSharded         *ConnectionSQLServerSharded
	ConnectionSquare                   *ConnectionSquare
	ConnectionStripe                   *ConnectionStripe
	ConnectionSumTotal                 *ConnectionSumTotal
	ConnectionTheTradeDesk             *ConnectionTheTradeDesk
	ConnectionTikTokAds                *ConnectionTikTokAds
	ConnectionTwilio                   *ConnectionTwilio
	ConnectionTwitter                  *ConnectionTwitter
	ConnectionUserDefinedAPI           *ConnectionUserDefinedAPI
	ConnectionUserVoice                *ConnectionUserVoice
	ConnectionVeeva                    *ConnectionVeeva
	ConnectionVerizonMedia             *ConnectionVerizonMedia
	ConnectionWorkdayReport            *ConnectionWorkdayReport
	ConnectionWorkfront                *ConnectionWorkfront
	ConnectionZendesk                  *ConnectionZendesk
	ConnectionZoomPhone                *ConnectionZoomPhone
	ConnectionZuora                    *ConnectionZuora

	Type ConnectionTypesType
}

func CreateConnectionTypesActiveCampaign(activeCampaign ConnectionActiveCampaign) ConnectionTypes {
	typ := ConnectionTypesTypeActiveCampaign

	typStr := ConnectionActiveCampaignType(typ)
	activeCampaign.Type = typStr

	return ConnectionTypes{
		ConnectionActiveCampaign: &activeCampaign,
		Type:                     typ,
	}
}

func CreateConnectionTypesBigquery(bigquery ConnectionBigQuery) ConnectionTypes {
	typ := ConnectionTypesTypeBigquery

	typStr := ConnectionBigQueryType(typ)
	bigquery.Type = typStr

	return ConnectionTypes{
		ConnectionBigQuery: &bigquery,
		Type:               typ,
	}
}

func CreateConnectionTypesBingAds(bingAds ConnectionBing) ConnectionTypes {
	typ := ConnectionTypesTypeBingAds

	typStr := ConnectionBingType(typ)
	bingAds.Type = typStr

	return ConnectionTypes{
		ConnectionBing: &bingAds,
		Type:           typ,
	}
}

func CreateConnectionTypesBlackline(blackline ConnectionBlackline) ConnectionTypes {
	typ := ConnectionTypesTypeBlackline

	typStr := ConnectionBlacklineType(typ)
	blackline.Type = typStr

	return ConnectionTypes{
		ConnectionBlackline: &blackline,
		Type:                typ,
	}
}

func CreateConnectionTypesCriteo(criteo ConnectionCriteo) ConnectionTypes {
	typ := ConnectionTypesTypeCriteo

	typStr := ConnectionCriteoType(typ)
	criteo.Type = typStr

	return ConnectionTypes{
		ConnectionCriteo: &criteo,
		Type:             typ,
	}
}

func CreateConnectionTypesDb2(db2 ConnectionDb2) ConnectionTypes {
	typ := ConnectionTypesTypeDb2

	typStr := ConnectionDb2Type(typ)
	db2.Type = typStr

	return ConnectionTypes{
		ConnectionDb2: &db2,
		Type:          typ,
	}
}

func CreateConnectionTypesDb2Sharded(db2Sharded ConnectionDb2Sharded) ConnectionTypes {
	typ := ConnectionTypesTypeDb2Sharded

	typStr := ConnectionDb2ShardedType(typ)
	db2Sharded.Type = typStr

	return ConnectionTypes{
		ConnectionDb2Sharded: &db2Sharded,
		Type:                 typ,
	}
}

func CreateConnectionTypesDeltaLake(deltaLake ConnectionDeltaLake) ConnectionTypes {
	typ := ConnectionTypesTypeDeltaLake

	typStr := ConnectionDeltaLakeType(typ)
	deltaLake.Type = typStr

	return ConnectionTypes{
		ConnectionDeltaLake: &deltaLake,
		Type:                typ,
	}
}

func CreateConnectionTypesElasticsearch(elasticsearch ConnectionElasticSearch) ConnectionTypes {
	typ := ConnectionTypesTypeElasticsearch

	typStr := ConnectionElasticSearchType(typ)
	elasticsearch.Type = typStr

	return ConnectionTypes{
		ConnectionElasticSearch: &elasticsearch,
		Type:                    typ,
	}
}

func CreateConnectionTypesElluminate(elluminate ConnectionElluminate) ConnectionTypes {
	typ := ConnectionTypesTypeElluminate

	typStr := ConnectionElluminateType(typ)
	elluminate.Type = typStr

	return ConnectionTypes{
		ConnectionElluminate: &elluminate,
		Type:                 typ,
	}
}

func CreateConnectionTypesEloqua(eloqua ConnectionEloqua) ConnectionTypes {
	typ := ConnectionTypesTypeEloqua

	typStr := ConnectionEloquaType(typ)
	eloqua.Type = typStr

	return ConnectionTypes{
		ConnectionEloqua: &eloqua,
		Type:             typ,
	}
}

func CreateConnectionTypesFacebookAds(facebookAds ConnectionFb) ConnectionTypes {
	typ := ConnectionTypesTypeFacebookAds

	typStr := ConnectionFbType(typ)
	facebookAds.Type = typStr

	return ConnectionTypes{
		ConnectionFb: &facebookAds,
		Type:         typ,
	}
}

func CreateConnectionTypesFifteenFive(fifteenFive ConnectionFifteenFive) ConnectionTypes {
	typ := ConnectionTypesTypeFifteenFive

	typStr := ConnectionFifteenFiveType(typ)
	fifteenFive.Type = typStr

	return ConnectionTypes{
		ConnectionFifteenFive: &fifteenFive,
		Type:                  typ,
	}
}

func CreateConnectionTypesFreshworks(freshworks ConnectionFreshworks) ConnectionTypes {
	typ := ConnectionTypesTypeFreshworks

	typStr := ConnectionFreshworksType(typ)
	freshworks.Type = typStr

	return ConnectionTypes{
		ConnectionFreshworks: &freshworks,
		Type:                 typ,
	}
}

func CreateConnectionTypesFtp(ftp ConnectionFtp) ConnectionTypes {
	typ := ConnectionTypesTypeFtp

	typStr := ConnectionFtpType(typ)
	ftp.Type = typStr

	return ConnectionTypes{
		ConnectionFtp: &ftp,
		Type:          typ,
	}
}

func CreateConnectionTypesGong(gong ConnectionGong) ConnectionTypes {
	typ := ConnectionTypesTypeGong

	typStr := ConnectionGongType(typ)
	gong.Type = typStr

	return ConnectionTypes{
		ConnectionGong: &gong,
		Type:           typ,
	}
}

func CreateConnectionTypesGoogleAds(googleAds ConnectionGoogleAds) ConnectionTypes {
	typ := ConnectionTypesTypeGoogleAds

	typStr := ConnectionGoogleAdsType(typ)
	googleAds.Type = typStr

	return ConnectionTypes{
		ConnectionGoogleAds: &googleAds,
		Type:                typ,
	}
}

func CreateConnectionTypesGoogleAnalytics(googleAnalytics ConnectionGa) ConnectionTypes {
	typ := ConnectionTypesTypeGoogleAnalytics

	typStr := ConnectionGaType(typ)
	googleAnalytics.Type = typStr

	return ConnectionTypes{
		ConnectionGa: &googleAnalytics,
		Type:         typ,
	}
}

func CreateConnectionTypesGoogleAnalyticsGa4(googleAnalyticsGa4 ConnectionGoogleAnalyticsGa4) ConnectionTypes {
	typ := ConnectionTypesTypeGoogleAnalyticsGa4

	typStr := ConnectionGoogleAnalyticsGa4Type(typ)
	googleAnalyticsGa4.Type = typStr

	return ConnectionTypes{
		ConnectionGoogleAnalyticsGa4: &googleAnalyticsGa4,
		Type:                         typ,
	}
}

func CreateConnectionTypesGoogleCloudStorage(googleCloudStorage ConnectionGoogleCloudStorage) ConnectionTypes {
	typ := ConnectionTypesTypeGoogleCloudStorage

	typStr := ConnectionGoogleCloudStorageType(typ)
	googleCloudStorage.Type = typStr

	return ConnectionTypes{
		ConnectionGoogleCloudStorage: &googleCloudStorage,
		Type:                         typ,
	}
}

func CreateConnectionTypesGoogleSheets(googleSheets ConnectionGoogleSheets) ConnectionTypes {
	typ := ConnectionTypesTypeGoogleSheets

	typStr := ConnectionGoogleSheetsType(typ)
	googleSheets.Type = typStr

	return ConnectionTypes{
		ConnectionGoogleSheets: &googleSheets,
		Type:                   typ,
	}
}

func CreateConnectionTypesHubspot(hubspot ConnectionHubspot) ConnectionTypes {
	typ := ConnectionTypesTypeHubspot

	typStr := ConnectionHubspotType(typ)
	hubspot.Type = typStr

	return ConnectionTypes{
		ConnectionHubspot: &hubspot,
		Type:              typ,
	}
}

func CreateConnectionTypesImpactRadius(impactRadius ConnectionImpactRadius) ConnectionTypes {
	typ := ConnectionTypesTypeImpactRadius

	typStr := ConnectionImpactRadiusType(typ)
	impactRadius.Type = typStr

	return ConnectionTypes{
		ConnectionImpactRadius: &impactRadius,
		Type:                   typ,
	}
}

func CreateConnectionTypesIntercom(intercom ConnectionIntercom) ConnectionTypes {
	typ := ConnectionTypesTypeIntercom

	typStr := ConnectionIntercomType(typ)
	intercom.Type = typStr

	return ConnectionTypes{
		ConnectionIntercom: &intercom,
		Type:               typ,
	}
}

func CreateConnectionTypesJiraAlign(jiraAlign ConnectionJiraAlign) ConnectionTypes {
	typ := ConnectionTypesTypeJiraAlign

	typStr := ConnectionJiraAlignType(typ)
	jiraAlign.Type = typStr

	return ConnectionTypes{
		ConnectionJiraAlign: &jiraAlign,
		Type:                typ,
	}
}

func CreateConnectionTypesKafka(kafka ConnectionKafka) ConnectionTypes {
	typ := ConnectionTypesTypeKafka

	typStr := ConnectionKafkaType(typ)
	kafka.Type = typStr

	return ConnectionTypes{
		ConnectionKafka: &kafka,
		Type:            typ,
	}
}

func CreateConnectionTypesKustomer(kustomer ConnectionKustomer) ConnectionTypes {
	typ := ConnectionTypesTypeKustomer

	typStr := ConnectionKustomerType(typ)
	kustomer.Type = typStr

	return ConnectionTypes{
		ConnectionKustomer: &kustomer,
		Type:               typ,
	}
}

func CreateConnectionTypesLdap(ldap ConnectionLdap) ConnectionTypes {
	typ := ConnectionTypesTypeLdap

	typStr := ConnectionLdapType(typ)
	ldap.Type = typStr

	return ConnectionTypes{
		ConnectionLdap: &ldap,
		Type:           typ,
	}
}

func CreateConnectionTypesLdapVirtualListView(ldapVirtualListView ConnectionLdapVirtualListView) ConnectionTypes {
	typ := ConnectionTypesTypeLdapVirtualListView

	typStr := ConnectionLdapVirtualListViewType(typ)
	ldapVirtualListView.Type = typStr

	return ConnectionTypes{
		ConnectionLdapVirtualListView: &ldapVirtualListView,
		Type:                          typ,
	}
}

func CreateConnectionTypesLinkedInAds(linkedInAds ConnectionLinkedInAds) ConnectionTypes {
	typ := ConnectionTypesTypeLinkedInAds

	typStr := ConnectionLinkedInAdsType(typ)
	linkedInAds.Type = typStr

	return ConnectionTypes{
		ConnectionLinkedInAds: &linkedInAds,
		Type:                  typ,
	}
}

func CreateConnectionTypesMarketo(marketo ConnectionMarketo) ConnectionTypes {
	typ := ConnectionTypesTypeMarketo

	typStr := ConnectionMarketoType(typ)
	marketo.Type = typStr

	return ConnectionTypes{
		ConnectionMarketo: &marketo,
		Type:              typ,
	}
}

func CreateConnectionTypesMixpanel(mixpanel ConnectionMixpanel) ConnectionTypes {
	typ := ConnectionTypesTypeMixpanel

	typStr := ConnectionMixpanelType(typ)
	mixpanel.Type = typStr

	return ConnectionTypes{
		ConnectionMixpanel: &mixpanel,
		Type:               typ,
	}
}

func CreateConnectionTypesMongodb(mongodb ConnectionMongo) ConnectionTypes {
	typ := ConnectionTypesTypeMongodb

	typStr := ConnectionMongoType(typ)
	mongodb.Type = typStr

	return ConnectionTypes{
		ConnectionMongo: &mongodb,
		Type:            typ,
	}
}

func CreateConnectionTypesMysql(mysql ConnectionMysql) ConnectionTypes {
	typ := ConnectionTypesTypeMysql

	typStr := ConnectionMysqlType(typ)
	mysql.Type = typStr

	return ConnectionTypes{
		ConnectionMysql: &mysql,
		Type:            typ,
	}
}

func CreateConnectionTypesMysqlSharded(mysqlSharded ConnectionMysqlSharded) ConnectionTypes {
	typ := ConnectionTypesTypeMysqlSharded

	typStr := ConnectionMysqlShardedType(typ)
	mysqlSharded.Type = typStr

	return ConnectionTypes{
		ConnectionMysqlSharded: &mysqlSharded,
		Type:                   typ,
	}
}

func CreateConnectionTypesNetsuite(netsuite ConnectionNetsuite) ConnectionTypes {
	typ := ConnectionTypesTypeNetsuite

	typStr := ConnectionNetsuiteType(typ)
	netsuite.Type = typStr

	return ConnectionTypes{
		ConnectionNetsuite: &netsuite,
		Type:               typ,
	}
}

func CreateConnectionTypesNetsuiteV2(netsuiteV2 ConnectionNetsuiteV2) ConnectionTypes {
	typ := ConnectionTypesTypeNetsuiteV2

	typStr := ConnectionNetsuiteV2Type(typ)
	netsuiteV2.Type = typStr

	return ConnectionTypes{
		ConnectionNetsuiteV2: &netsuiteV2,
		Type:                 typ,
	}
}

func CreateConnectionTypesOracle(oracle ConnectionOracle) ConnectionTypes {
	typ := ConnectionTypesTypeOracle

	typStr := ConnectionOracleType(typ)
	oracle.Type = typStr

	return ConnectionTypes{
		ConnectionOracle: &oracle,
		Type:             typ,
	}
}

func CreateConnectionTypesOracleSharded(oracleSharded ConnectionOracleSharded) ConnectionTypes {
	typ := ConnectionTypesTypeOracleSharded

	typStr := ConnectionOracleShardedType(typ)
	oracleSharded.Type = typStr

	return ConnectionTypes{
		ConnectionOracleSharded: &oracleSharded,
		Type:                    typ,
	}
}

func CreateConnectionTypesOutlook(outlook ConnectionOutlook) ConnectionTypes {
	typ := ConnectionTypesTypeOutlook

	typStr := ConnectionOutlookType(typ)
	outlook.Type = typStr

	return ConnectionTypes{
		ConnectionOutlook: &outlook,
		Type:              typ,
	}
}

func CreateConnectionTypesOutreach(outreach ConnectionOutreach) ConnectionTypes {
	typ := ConnectionTypesTypeOutreach

	typStr := ConnectionOutreachType(typ)
	outreach.Type = typStr

	return ConnectionTypes{
		ConnectionOutreach: &outreach,
		Type:               typ,
	}
}

func CreateConnectionTypesPinterestAds(pinterestAds ConnectionPinterestAds) ConnectionTypes {
	typ := ConnectionTypesTypePinterestAds

	typStr := ConnectionPinterestAdsType(typ)
	pinterestAds.Type = typStr

	return ConnectionTypes{
		ConnectionPinterestAds: &pinterestAds,
		Type:                   typ,
	}
}

func CreateConnectionTypesPostgres(postgres ConnectionPostgres) ConnectionTypes {
	typ := ConnectionTypesTypePostgres

	typStr := ConnectionPostgresType(typ)
	postgres.Type = typStr

	return ConnectionTypes{
		ConnectionPostgres: &postgres,
		Type:               typ,
	}
}

func CreateConnectionTypesPostgresSharded(postgresSharded ConnectionPostgresSharded) ConnectionTypes {
	typ := ConnectionTypesTypePostgresSharded

	typStr := ConnectionPostgresShardedType(typ)
	postgresSharded.Type = typStr

	return ConnectionTypes{
		ConnectionPostgresSharded: &postgresSharded,
		Type:                      typ,
	}
}

func CreateConnectionTypesQuoraAds(quoraAds ConnectionQuora) ConnectionTypes {
	typ := ConnectionTypesTypeQuoraAds

	typStr := ConnectionQuoraType(typ)
	quoraAds.Type = typStr

	return ConnectionTypes{
		ConnectionQuora: &quoraAds,
		Type:            typ,
	}
}

func CreateConnectionTypesRaveMedidata(raveMedidata ConnectionRaveMedidata) ConnectionTypes {
	typ := ConnectionTypesTypeRaveMedidata

	typStr := ConnectionRaveMedidataType(typ)
	raveMedidata.Type = typStr

	return ConnectionTypes{
		ConnectionRaveMedidata: &raveMedidata,
		Type:                   typ,
	}
}

func CreateConnectionTypesRecurly(recurly ConnectionRecurly) ConnectionTypes {
	typ := ConnectionTypesTypeRecurly

	typStr := ConnectionRecurlyType(typ)
	recurly.Type = typStr

	return ConnectionTypes{
		ConnectionRecurly: &recurly,
		Type:              typ,
	}
}

func CreateConnectionTypesRedshift(redshift ConnectionRedshift) ConnectionTypes {
	typ := ConnectionTypesTypeRedshift

	typStr := ConnectionRedshiftType(typ)
	redshift.Type = typStr

	return ConnectionTypes{
		ConnectionRedshift: &redshift,
		Type:               typ,
	}
}

func CreateConnectionTypesRedshiftSharded(redshiftSharded ConnectionRedshiftSharded) ConnectionTypes {
	typ := ConnectionTypesTypeRedshiftSharded

	typStr := ConnectionRedshiftShardedType(typ)
	redshiftSharded.Type = typStr

	return ConnectionTypes{
		ConnectionRedshiftSharded: &redshiftSharded,
		Type:                      typ,
	}
}

func CreateConnectionTypesS3DataLake(s3DataLake ConnectionS3DataLake) ConnectionTypes {
	typ := ConnectionTypesTypeS3DataLake

	typStr := ConnectionS3DataLakeType(typ)
	s3DataLake.Type = typStr

	return ConnectionTypes{
		ConnectionS3DataLake: &s3DataLake,
		Type:                 typ,
	}
}

func CreateConnectionTypesS3Input(s3Input ConnectionS3Input) ConnectionTypes {
	typ := ConnectionTypesTypeS3Input

	typStr := ConnectionS3InputType(typ)
	s3Input.Type = typStr

	return ConnectionTypes{
		ConnectionS3Input: &s3Input,
		Type:              typ,
	}
}

func CreateConnectionTypesSalesforce(salesforce ConnectionSalesforce) ConnectionTypes {
	typ := ConnectionTypesTypeSalesforce

	typStr := ConnectionSalesforceType(typ)
	salesforce.Type = typStr

	return ConnectionTypes{
		ConnectionSalesforce: &salesforce,
		Type:                 typ,
	}
}

func CreateConnectionTypesSalesforceMarketingCloud(salesforceMarketingCloud ConnectionSalesforceMarketingCloud) ConnectionTypes {
	typ := ConnectionTypesTypeSalesforceMarketingCloud

	typStr := ConnectionSalesforceMarketingCloudType(typ)
	salesforceMarketingCloud.Type = typStr

	return ConnectionTypes{
		ConnectionSalesforceMarketingCloud: &salesforceMarketingCloud,
		Type:                               typ,
	}
}

func CreateConnectionTypesSapHana(sapHana ConnectionSapHana) ConnectionTypes {
	typ := ConnectionTypesTypeSapHana

	typStr := ConnectionSapHanaType(typ)
	sapHana.Type = typStr

	return ConnectionTypes{
		ConnectionSapHana: &sapHana,
		Type:              typ,
	}
}

func CreateConnectionTypesSapHanaSharded(sapHanaSharded ConnectionSapHanaSharded) ConnectionTypes {
	typ := ConnectionTypesTypeSapHanaSharded

	typStr := ConnectionSapHanaShardedType(typ)
	sapHanaSharded.Type = typStr

	return ConnectionTypes{
		ConnectionSapHanaSharded: &sapHanaSharded,
		Type:                     typ,
	}
}

func CreateConnectionTypesSeismic(seismic ConnectionSeismic) ConnectionTypes {
	typ := ConnectionTypesTypeSeismic

	typStr := ConnectionSeismicType(typ)
	seismic.Type = typStr

	return ConnectionTypes{
		ConnectionSeismic: &seismic,
		Type:              typ,
	}
}

func CreateConnectionTypesSftp(sftp ConnectionSftp) ConnectionTypes {
	typ := ConnectionTypesTypeSftp

	typStr := ConnectionSftpType(typ)
	sftp.Type = typStr

	return ConnectionTypes{
		ConnectionSftp: &sftp,
		Type:           typ,
	}
}

func CreateConnectionTypesShopify(shopify ConnectionShopify) ConnectionTypes {
	typ := ConnectionTypesTypeShopify

	typStr := ConnectionShopifyType(typ)
	shopify.Type = typStr

	return ConnectionTypes{
		ConnectionShopify: &shopify,
		Type:              typ,
	}
}

func CreateConnectionTypesSkyward(skyward ConnectionSkyward) ConnectionTypes {
	typ := ConnectionTypesTypeSkyward

	typStr := ConnectionSkywardType(typ)
	skyward.Type = typStr

	return ConnectionTypes{
		ConnectionSkyward: &skyward,
		Type:              typ,
	}
}

func CreateConnectionTypesSnapchatAds(snapchatAds ConnectionSnapchatAds) ConnectionTypes {
	typ := ConnectionTypesTypeSnapchatAds

	typStr := ConnectionSnapchatAdsType(typ)
	snapchatAds.Type = typStr

	return ConnectionTypes{
		ConnectionSnapchatAds: &snapchatAds,
		Type:                  typ,
	}
}

func CreateConnectionTypesSnowflake(snowflake ConnectionSnowflake) ConnectionTypes {
	typ := ConnectionTypesTypeSnowflake

	typStr := ConnectionSnowflakeType(typ)
	snowflake.Type = typStr

	return ConnectionTypes{
		ConnectionSnowflake: &snowflake,
		Type:                typ,
	}
}

func CreateConnectionTypesSnowflakeSharded(snowflakeSharded ConnectionSnowflakeSharded) ConnectionTypes {
	typ := ConnectionTypesTypeSnowflakeSharded

	typStr := ConnectionSnowflakeShardedType(typ)
	snowflakeSharded.Type = typStr

	return ConnectionTypes{
		ConnectionSnowflakeSharded: &snowflakeSharded,
		Type:                       typ,
	}
}

func CreateConnectionTypesSQLServer(sqlServer ConnectionSQLServer) ConnectionTypes {
	typ := ConnectionTypesTypeSQLServer

	typStr := ConnectionSQLServerType(typ)
	sqlServer.Type = typStr

	return ConnectionTypes{
		ConnectionSQLServer: &sqlServer,
		Type:                typ,
	}
}

func CreateConnectionTypesSQLServerSharded(sqlServerSharded ConnectionSQLServerSharded) ConnectionTypes {
	typ := ConnectionTypesTypeSQLServerSharded

	typStr := ConnectionSQLServerShardedType(typ)
	sqlServerSharded.Type = typStr

	return ConnectionTypes{
		ConnectionSQLServerSharded: &sqlServerSharded,
		Type:                       typ,
	}
}

func CreateConnectionTypesSquare(square ConnectionSquare) ConnectionTypes {
	typ := ConnectionTypesTypeSquare

	typStr := ConnectionSquareType(typ)
	square.Type = typStr

	return ConnectionTypes{
		ConnectionSquare: &square,
		Type:             typ,
	}
}

func CreateConnectionTypesStripe(stripe ConnectionStripe) ConnectionTypes {
	typ := ConnectionTypesTypeStripe

	typStr := ConnectionStripeType(typ)
	stripe.Type = typStr

	return ConnectionTypes{
		ConnectionStripe: &stripe,
		Type:             typ,
	}
}

func CreateConnectionTypesSumtotal(sumtotal ConnectionSumTotal) ConnectionTypes {
	typ := ConnectionTypesTypeSumtotal

	typStr := ConnectionSumTotalType(typ)
	sumtotal.Type = typStr

	return ConnectionTypes{
		ConnectionSumTotal: &sumtotal,
		Type:               typ,
	}
}

func CreateConnectionTypesTheTradeDesk(theTradeDesk ConnectionTheTradeDesk) ConnectionTypes {
	typ := ConnectionTypesTypeTheTradeDesk

	typStr := ConnectionTheTradeDeskType(typ)
	theTradeDesk.Type = typStr

	return ConnectionTypes{
		ConnectionTheTradeDesk: &theTradeDesk,
		Type:                   typ,
	}
}

func CreateConnectionTypesTikTokAds(tikTokAds ConnectionTikTokAds) ConnectionTypes {
	typ := ConnectionTypesTypeTikTokAds

	typStr := ConnectionTikTokAdsType(typ)
	tikTokAds.Type = typStr

	return ConnectionTypes{
		ConnectionTikTokAds: &tikTokAds,
		Type:                typ,
	}
}

func CreateConnectionTypesTwilio(twilio ConnectionTwilio) ConnectionTypes {
	typ := ConnectionTypesTypeTwilio

	typStr := ConnectionTwilioType(typ)
	twilio.Type = typStr

	return ConnectionTypes{
		ConnectionTwilio: &twilio,
		Type:             typ,
	}
}

func CreateConnectionTypesTwitterAds(twitterAds ConnectionTwitter) ConnectionTypes {
	typ := ConnectionTypesTypeTwitterAds

	typStr := ConnectionTwitterType(typ)
	twitterAds.Type = typStr

	return ConnectionTypes{
		ConnectionTwitter: &twitterAds,
		Type:              typ,
	}
}

func CreateConnectionTypesUservoice(uservoice ConnectionUserVoice) ConnectionTypes {
	typ := ConnectionTypesTypeUservoice

	typStr := ConnectionUserVoiceType(typ)
	uservoice.Type = typStr

	return ConnectionTypes{
		ConnectionUserVoice: &uservoice,
		Type:                typ,
	}
}

func CreateConnectionTypesUserDefinedAPI(userDefinedAPI ConnectionUserDefinedAPI) ConnectionTypes {
	typ := ConnectionTypesTypeUserDefinedAPI

	typStr := ConnectionUserDefinedAPIType(typ)
	userDefinedAPI.Type = typStr

	return ConnectionTypes{
		ConnectionUserDefinedAPI: &userDefinedAPI,
		Type:                     typ,
	}
}

func CreateConnectionTypesVeeva(veeva ConnectionVeeva) ConnectionTypes {
	typ := ConnectionTypesTypeVeeva

	typStr := ConnectionVeevaType(typ)
	veeva.Type = typStr

	return ConnectionTypes{
		ConnectionVeeva: &veeva,
		Type:            typ,
	}
}

func CreateConnectionTypesVerizonMediaDsp(verizonMediaDsp ConnectionVerizonMedia) ConnectionTypes {
	typ := ConnectionTypesTypeVerizonMediaDsp

	typStr := ConnectionVerizonMediaType(typ)
	verizonMediaDsp.Type = typStr

	return ConnectionTypes{
		ConnectionVerizonMedia: &verizonMediaDsp,
		Type:                   typ,
	}
}

func CreateConnectionTypesWorkdayReport(workdayReport ConnectionWorkdayReport) ConnectionTypes {
	typ := ConnectionTypesTypeWorkdayReport

	typStr := ConnectionWorkdayReportType(typ)
	workdayReport.Type = typStr

	return ConnectionTypes{
		ConnectionWorkdayReport: &workdayReport,
		Type:                    typ,
	}
}

func CreateConnectionTypesWorkfront(workfront ConnectionWorkfront) ConnectionTypes {
	typ := ConnectionTypesTypeWorkfront

	typStr := ConnectionWorkfrontType(typ)
	workfront.Type = typStr

	return ConnectionTypes{
		ConnectionWorkfront: &workfront,
		Type:                typ,
	}
}

func CreateConnectionTypesZendesk(zendesk ConnectionZendesk) ConnectionTypes {
	typ := ConnectionTypesTypeZendesk

	typStr := ConnectionZendeskType(typ)
	zendesk.Type = typStr

	return ConnectionTypes{
		ConnectionZendesk: &zendesk,
		Type:              typ,
	}
}

func CreateConnectionTypesZoomPhone(zoomPhone ConnectionZoomPhone) ConnectionTypes {
	typ := ConnectionTypesTypeZoomPhone

	typStr := ConnectionZoomPhoneType(typ)
	zoomPhone.Type = typStr

	return ConnectionTypes{
		ConnectionZoomPhone: &zoomPhone,
		Type:                typ,
	}
}

func CreateConnectionTypesZuora(zuora ConnectionZuora) ConnectionTypes {
	typ := ConnectionTypesTypeZuora

	typStr := ConnectionZuoraType(typ)
	zuora.Type = typStr

	return ConnectionTypes{
		ConnectionZuora: &zuora,
		Type:            typ,
	}
}

func (u *ConnectionTypes) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "ACTIVE_CAMPAIGN":
		connectionActiveCampaign := new(ConnectionActiveCampaign)
		if err := utils.UnmarshalJSON(data, &connectionActiveCampaign, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionActiveCampaign = connectionActiveCampaign
		u.Type = ConnectionTypesTypeActiveCampaign
		return nil
	case "BIGQUERY":
		connectionBigQuery := new(ConnectionBigQuery)
		if err := utils.UnmarshalJSON(data, &connectionBigQuery, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionBigQuery = connectionBigQuery
		u.Type = ConnectionTypesTypeBigquery
		return nil
	case "BING_ADS":
		connectionBing := new(ConnectionBing)
		if err := utils.UnmarshalJSON(data, &connectionBing, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionBing = connectionBing
		u.Type = ConnectionTypesTypeBingAds
		return nil
	case "BLACKLINE":
		connectionBlackline := new(ConnectionBlackline)
		if err := utils.UnmarshalJSON(data, &connectionBlackline, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionBlackline = connectionBlackline
		u.Type = ConnectionTypesTypeBlackline
		return nil
	case "CRITEO":
		connectionCriteo := new(ConnectionCriteo)
		if err := utils.UnmarshalJSON(data, &connectionCriteo, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionCriteo = connectionCriteo
		u.Type = ConnectionTypesTypeCriteo
		return nil
	case "DB2":
		connectionDb2 := new(ConnectionDb2)
		if err := utils.UnmarshalJSON(data, &connectionDb2, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionDb2 = connectionDb2
		u.Type = ConnectionTypesTypeDb2
		return nil
	case "DB2_SHARDED":
		connectionDb2Sharded := new(ConnectionDb2Sharded)
		if err := utils.UnmarshalJSON(data, &connectionDb2Sharded, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionDb2Sharded = connectionDb2Sharded
		u.Type = ConnectionTypesTypeDb2Sharded
		return nil
	case "DELTA_LAKE":
		connectionDeltaLake := new(ConnectionDeltaLake)
		if err := utils.UnmarshalJSON(data, &connectionDeltaLake, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionDeltaLake = connectionDeltaLake
		u.Type = ConnectionTypesTypeDeltaLake
		return nil
	case "ELASTICSEARCH":
		connectionElasticSearch := new(ConnectionElasticSearch)
		if err := utils.UnmarshalJSON(data, &connectionElasticSearch, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionElasticSearch = connectionElasticSearch
		u.Type = ConnectionTypesTypeElasticsearch
		return nil
	case "ELLUMINATE":
		connectionElluminate := new(ConnectionElluminate)
		if err := utils.UnmarshalJSON(data, &connectionElluminate, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionElluminate = connectionElluminate
		u.Type = ConnectionTypesTypeElluminate
		return nil
	case "ELOQUA":
		connectionEloqua := new(ConnectionEloqua)
		if err := utils.UnmarshalJSON(data, &connectionEloqua, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionEloqua = connectionEloqua
		u.Type = ConnectionTypesTypeEloqua
		return nil
	case "FACEBOOK_ADS":
		connectionFb := new(ConnectionFb)
		if err := utils.UnmarshalJSON(data, &connectionFb, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionFb = connectionFb
		u.Type = ConnectionTypesTypeFacebookAds
		return nil
	case "FIFTEEN_FIVE":
		connectionFifteenFive := new(ConnectionFifteenFive)
		if err := utils.UnmarshalJSON(data, &connectionFifteenFive, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionFifteenFive = connectionFifteenFive
		u.Type = ConnectionTypesTypeFifteenFive
		return nil
	case "FRESHWORKS":
		connectionFreshworks := new(ConnectionFreshworks)
		if err := utils.UnmarshalJSON(data, &connectionFreshworks, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionFreshworks = connectionFreshworks
		u.Type = ConnectionTypesTypeFreshworks
		return nil
	case "FTP":
		connectionFtp := new(ConnectionFtp)
		if err := utils.UnmarshalJSON(data, &connectionFtp, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionFtp = connectionFtp
		u.Type = ConnectionTypesTypeFtp
		return nil
	case "GONG":
		connectionGong := new(ConnectionGong)
		if err := utils.UnmarshalJSON(data, &connectionGong, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionGong = connectionGong
		u.Type = ConnectionTypesTypeGong
		return nil
	case "GOOGLE_ADS":
		connectionGoogleAds := new(ConnectionGoogleAds)
		if err := utils.UnmarshalJSON(data, &connectionGoogleAds, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionGoogleAds = connectionGoogleAds
		u.Type = ConnectionTypesTypeGoogleAds
		return nil
	case "GOOGLE_ANALYTICS":
		connectionGa := new(ConnectionGa)
		if err := utils.UnmarshalJSON(data, &connectionGa, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionGa = connectionGa
		u.Type = ConnectionTypesTypeGoogleAnalytics
		return nil
	case "GOOGLE_ANALYTICS_GA4":
		connectionGoogleAnalyticsGa4 := new(ConnectionGoogleAnalyticsGa4)
		if err := utils.UnmarshalJSON(data, &connectionGoogleAnalyticsGa4, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionGoogleAnalyticsGa4 = connectionGoogleAnalyticsGa4
		u.Type = ConnectionTypesTypeGoogleAnalyticsGa4
		return nil
	case "GOOGLE_CLOUD_STORAGE":
		connectionGoogleCloudStorage := new(ConnectionGoogleCloudStorage)
		if err := utils.UnmarshalJSON(data, &connectionGoogleCloudStorage, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionGoogleCloudStorage = connectionGoogleCloudStorage
		u.Type = ConnectionTypesTypeGoogleCloudStorage
		return nil
	case "GOOGLE_SHEETS":
		connectionGoogleSheets := new(ConnectionGoogleSheets)
		if err := utils.UnmarshalJSON(data, &connectionGoogleSheets, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionGoogleSheets = connectionGoogleSheets
		u.Type = ConnectionTypesTypeGoogleSheets
		return nil
	case "HUBSPOT":
		connectionHubspot := new(ConnectionHubspot)
		if err := utils.UnmarshalJSON(data, &connectionHubspot, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionHubspot = connectionHubspot
		u.Type = ConnectionTypesTypeHubspot
		return nil
	case "IMPACT_RADIUS":
		connectionImpactRadius := new(ConnectionImpactRadius)
		if err := utils.UnmarshalJSON(data, &connectionImpactRadius, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionImpactRadius = connectionImpactRadius
		u.Type = ConnectionTypesTypeImpactRadius
		return nil
	case "INTERCOM":
		connectionIntercom := new(ConnectionIntercom)
		if err := utils.UnmarshalJSON(data, &connectionIntercom, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionIntercom = connectionIntercom
		u.Type = ConnectionTypesTypeIntercom
		return nil
	case "JIRA_ALIGN":
		connectionJiraAlign := new(ConnectionJiraAlign)
		if err := utils.UnmarshalJSON(data, &connectionJiraAlign, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionJiraAlign = connectionJiraAlign
		u.Type = ConnectionTypesTypeJiraAlign
		return nil
	case "KAFKA":
		connectionKafka := new(ConnectionKafka)
		if err := utils.UnmarshalJSON(data, &connectionKafka, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionKafka = connectionKafka
		u.Type = ConnectionTypesTypeKafka
		return nil
	case "KUSTOMER":
		connectionKustomer := new(ConnectionKustomer)
		if err := utils.UnmarshalJSON(data, &connectionKustomer, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionKustomer = connectionKustomer
		u.Type = ConnectionTypesTypeKustomer
		return nil
	case "LDAP":
		connectionLdap := new(ConnectionLdap)
		if err := utils.UnmarshalJSON(data, &connectionLdap, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionLdap = connectionLdap
		u.Type = ConnectionTypesTypeLdap
		return nil
	case "LDAP_VIRTUAL_LIST_VIEW":
		connectionLdapVirtualListView := new(ConnectionLdapVirtualListView)
		if err := utils.UnmarshalJSON(data, &connectionLdapVirtualListView, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionLdapVirtualListView = connectionLdapVirtualListView
		u.Type = ConnectionTypesTypeLdapVirtualListView
		return nil
	case "LINKED_IN_ADS":
		connectionLinkedInAds := new(ConnectionLinkedInAds)
		if err := utils.UnmarshalJSON(data, &connectionLinkedInAds, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionLinkedInAds = connectionLinkedInAds
		u.Type = ConnectionTypesTypeLinkedInAds
		return nil
	case "MARKETO":
		connectionMarketo := new(ConnectionMarketo)
		if err := utils.UnmarshalJSON(data, &connectionMarketo, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionMarketo = connectionMarketo
		u.Type = ConnectionTypesTypeMarketo
		return nil
	case "MIXPANEL":
		connectionMixpanel := new(ConnectionMixpanel)
		if err := utils.UnmarshalJSON(data, &connectionMixpanel, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionMixpanel = connectionMixpanel
		u.Type = ConnectionTypesTypeMixpanel
		return nil
	case "MONGODB":
		connectionMongo := new(ConnectionMongo)
		if err := utils.UnmarshalJSON(data, &connectionMongo, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionMongo = connectionMongo
		u.Type = ConnectionTypesTypeMongodb
		return nil
	case "MYSQL":
		connectionMysql := new(ConnectionMysql)
		if err := utils.UnmarshalJSON(data, &connectionMysql, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionMysql = connectionMysql
		u.Type = ConnectionTypesTypeMysql
		return nil
	case "MYSQL_SHARDED":
		connectionMysqlSharded := new(ConnectionMysqlSharded)
		if err := utils.UnmarshalJSON(data, &connectionMysqlSharded, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionMysqlSharded = connectionMysqlSharded
		u.Type = ConnectionTypesTypeMysqlSharded
		return nil
	case "NETSUITE":
		connectionNetsuite := new(ConnectionNetsuite)
		if err := utils.UnmarshalJSON(data, &connectionNetsuite, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionNetsuite = connectionNetsuite
		u.Type = ConnectionTypesTypeNetsuite
		return nil
	case "NETSUITE_V2":
		connectionNetsuiteV2 := new(ConnectionNetsuiteV2)
		if err := utils.UnmarshalJSON(data, &connectionNetsuiteV2, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionNetsuiteV2 = connectionNetsuiteV2
		u.Type = ConnectionTypesTypeNetsuiteV2
		return nil
	case "ORACLE":
		connectionOracle := new(ConnectionOracle)
		if err := utils.UnmarshalJSON(data, &connectionOracle, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionOracle = connectionOracle
		u.Type = ConnectionTypesTypeOracle
		return nil
	case "ORACLE_SHARDED":
		connectionOracleSharded := new(ConnectionOracleSharded)
		if err := utils.UnmarshalJSON(data, &connectionOracleSharded, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionOracleSharded = connectionOracleSharded
		u.Type = ConnectionTypesTypeOracleSharded
		return nil
	case "OUTLOOK":
		connectionOutlook := new(ConnectionOutlook)
		if err := utils.UnmarshalJSON(data, &connectionOutlook, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionOutlook = connectionOutlook
		u.Type = ConnectionTypesTypeOutlook
		return nil
	case "OUTREACH":
		connectionOutreach := new(ConnectionOutreach)
		if err := utils.UnmarshalJSON(data, &connectionOutreach, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionOutreach = connectionOutreach
		u.Type = ConnectionTypesTypeOutreach
		return nil
	case "PINTEREST_ADS":
		connectionPinterestAds := new(ConnectionPinterestAds)
		if err := utils.UnmarshalJSON(data, &connectionPinterestAds, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionPinterestAds = connectionPinterestAds
		u.Type = ConnectionTypesTypePinterestAds
		return nil
	case "POSTGRES":
		connectionPostgres := new(ConnectionPostgres)
		if err := utils.UnmarshalJSON(data, &connectionPostgres, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionPostgres = connectionPostgres
		u.Type = ConnectionTypesTypePostgres
		return nil
	case "POSTGRES_SHARDED":
		connectionPostgresSharded := new(ConnectionPostgresSharded)
		if err := utils.UnmarshalJSON(data, &connectionPostgresSharded, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionPostgresSharded = connectionPostgresSharded
		u.Type = ConnectionTypesTypePostgresSharded
		return nil
	case "QUORA_ADS":
		connectionQuora := new(ConnectionQuora)
		if err := utils.UnmarshalJSON(data, &connectionQuora, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionQuora = connectionQuora
		u.Type = ConnectionTypesTypeQuoraAds
		return nil
	case "RAVE_MEDIDATA":
		connectionRaveMedidata := new(ConnectionRaveMedidata)
		if err := utils.UnmarshalJSON(data, &connectionRaveMedidata, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionRaveMedidata = connectionRaveMedidata
		u.Type = ConnectionTypesTypeRaveMedidata
		return nil
	case "RECURLY":
		connectionRecurly := new(ConnectionRecurly)
		if err := utils.UnmarshalJSON(data, &connectionRecurly, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionRecurly = connectionRecurly
		u.Type = ConnectionTypesTypeRecurly
		return nil
	case "REDSHIFT":
		connectionRedshift := new(ConnectionRedshift)
		if err := utils.UnmarshalJSON(data, &connectionRedshift, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionRedshift = connectionRedshift
		u.Type = ConnectionTypesTypeRedshift
		return nil
	case "REDSHIFT_SHARDED":
		connectionRedshiftSharded := new(ConnectionRedshiftSharded)
		if err := utils.UnmarshalJSON(data, &connectionRedshiftSharded, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionRedshiftSharded = connectionRedshiftSharded
		u.Type = ConnectionTypesTypeRedshiftSharded
		return nil
	case "S3_DATA_LAKE":
		connectionS3DataLake := new(ConnectionS3DataLake)
		if err := utils.UnmarshalJSON(data, &connectionS3DataLake, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionS3DataLake = connectionS3DataLake
		u.Type = ConnectionTypesTypeS3DataLake
		return nil
	case "S3_INPUT":
		connectionS3Input := new(ConnectionS3Input)
		if err := utils.UnmarshalJSON(data, &connectionS3Input, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionS3Input = connectionS3Input
		u.Type = ConnectionTypesTypeS3Input
		return nil
	case "SALESFORCE":
		connectionSalesforce := new(ConnectionSalesforce)
		if err := utils.UnmarshalJSON(data, &connectionSalesforce, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSalesforce = connectionSalesforce
		u.Type = ConnectionTypesTypeSalesforce
		return nil
	case "SALESFORCE_MARKETING_CLOUD":
		connectionSalesforceMarketingCloud := new(ConnectionSalesforceMarketingCloud)
		if err := utils.UnmarshalJSON(data, &connectionSalesforceMarketingCloud, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSalesforceMarketingCloud = connectionSalesforceMarketingCloud
		u.Type = ConnectionTypesTypeSalesforceMarketingCloud
		return nil
	case "SAP_HANA":
		connectionSapHana := new(ConnectionSapHana)
		if err := utils.UnmarshalJSON(data, &connectionSapHana, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSapHana = connectionSapHana
		u.Type = ConnectionTypesTypeSapHana
		return nil
	case "SAP_HANA_SHARDED":
		connectionSapHanaSharded := new(ConnectionSapHanaSharded)
		if err := utils.UnmarshalJSON(data, &connectionSapHanaSharded, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSapHanaSharded = connectionSapHanaSharded
		u.Type = ConnectionTypesTypeSapHanaSharded
		return nil
	case "SEISMIC":
		connectionSeismic := new(ConnectionSeismic)
		if err := utils.UnmarshalJSON(data, &connectionSeismic, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSeismic = connectionSeismic
		u.Type = ConnectionTypesTypeSeismic
		return nil
	case "SFTP":
		connectionSftp := new(ConnectionSftp)
		if err := utils.UnmarshalJSON(data, &connectionSftp, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSftp = connectionSftp
		u.Type = ConnectionTypesTypeSftp
		return nil
	case "SHOPIFY":
		connectionShopify := new(ConnectionShopify)
		if err := utils.UnmarshalJSON(data, &connectionShopify, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionShopify = connectionShopify
		u.Type = ConnectionTypesTypeShopify
		return nil
	case "SKYWARD":
		connectionSkyward := new(ConnectionSkyward)
		if err := utils.UnmarshalJSON(data, &connectionSkyward, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSkyward = connectionSkyward
		u.Type = ConnectionTypesTypeSkyward
		return nil
	case "SNAPCHAT_ADS":
		connectionSnapchatAds := new(ConnectionSnapchatAds)
		if err := utils.UnmarshalJSON(data, &connectionSnapchatAds, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSnapchatAds = connectionSnapchatAds
		u.Type = ConnectionTypesTypeSnapchatAds
		return nil
	case "SNOWFLAKE":
		connectionSnowflake := new(ConnectionSnowflake)
		if err := utils.UnmarshalJSON(data, &connectionSnowflake, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSnowflake = connectionSnowflake
		u.Type = ConnectionTypesTypeSnowflake
		return nil
	case "SNOWFLAKE_SHARDED":
		connectionSnowflakeSharded := new(ConnectionSnowflakeSharded)
		if err := utils.UnmarshalJSON(data, &connectionSnowflakeSharded, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSnowflakeSharded = connectionSnowflakeSharded
		u.Type = ConnectionTypesTypeSnowflakeSharded
		return nil
	case "SQL_SERVER":
		connectionSQLServer := new(ConnectionSQLServer)
		if err := utils.UnmarshalJSON(data, &connectionSQLServer, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSQLServer = connectionSQLServer
		u.Type = ConnectionTypesTypeSQLServer
		return nil
	case "SQL_SERVER_SHARDED":
		connectionSQLServerSharded := new(ConnectionSQLServerSharded)
		if err := utils.UnmarshalJSON(data, &connectionSQLServerSharded, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSQLServerSharded = connectionSQLServerSharded
		u.Type = ConnectionTypesTypeSQLServerSharded
		return nil
	case "SQUARE":
		connectionSquare := new(ConnectionSquare)
		if err := utils.UnmarshalJSON(data, &connectionSquare, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSquare = connectionSquare
		u.Type = ConnectionTypesTypeSquare
		return nil
	case "STRIPE":
		connectionStripe := new(ConnectionStripe)
		if err := utils.UnmarshalJSON(data, &connectionStripe, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionStripe = connectionStripe
		u.Type = ConnectionTypesTypeStripe
		return nil
	case "SUMTOTAL":
		connectionSumTotal := new(ConnectionSumTotal)
		if err := utils.UnmarshalJSON(data, &connectionSumTotal, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionSumTotal = connectionSumTotal
		u.Type = ConnectionTypesTypeSumtotal
		return nil
	case "THE_TRADE_DESK":
		connectionTheTradeDesk := new(ConnectionTheTradeDesk)
		if err := utils.UnmarshalJSON(data, &connectionTheTradeDesk, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionTheTradeDesk = connectionTheTradeDesk
		u.Type = ConnectionTypesTypeTheTradeDesk
		return nil
	case "TIK_TOK_ADS":
		connectionTikTokAds := new(ConnectionTikTokAds)
		if err := utils.UnmarshalJSON(data, &connectionTikTokAds, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionTikTokAds = connectionTikTokAds
		u.Type = ConnectionTypesTypeTikTokAds
		return nil
	case "TWILIO":
		connectionTwilio := new(ConnectionTwilio)
		if err := utils.UnmarshalJSON(data, &connectionTwilio, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionTwilio = connectionTwilio
		u.Type = ConnectionTypesTypeTwilio
		return nil
	case "TWITTER_ADS":
		connectionTwitter := new(ConnectionTwitter)
		if err := utils.UnmarshalJSON(data, &connectionTwitter, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionTwitter = connectionTwitter
		u.Type = ConnectionTypesTypeTwitterAds
		return nil
	case "USERVOICE":
		connectionUserVoice := new(ConnectionUserVoice)
		if err := utils.UnmarshalJSON(data, &connectionUserVoice, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionUserVoice = connectionUserVoice
		u.Type = ConnectionTypesTypeUservoice
		return nil
	case "USER_DEFINED_API":
		connectionUserDefinedAPI := new(ConnectionUserDefinedAPI)
		if err := utils.UnmarshalJSON(data, &connectionUserDefinedAPI, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionUserDefinedAPI = connectionUserDefinedAPI
		u.Type = ConnectionTypesTypeUserDefinedAPI
		return nil
	case "VEEVA":
		connectionVeeva := new(ConnectionVeeva)
		if err := utils.UnmarshalJSON(data, &connectionVeeva, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionVeeva = connectionVeeva
		u.Type = ConnectionTypesTypeVeeva
		return nil
	case "VERIZON_MEDIA_DSP":
		connectionVerizonMedia := new(ConnectionVerizonMedia)
		if err := utils.UnmarshalJSON(data, &connectionVerizonMedia, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionVerizonMedia = connectionVerizonMedia
		u.Type = ConnectionTypesTypeVerizonMediaDsp
		return nil
	case "WORKDAY_REPORT":
		connectionWorkdayReport := new(ConnectionWorkdayReport)
		if err := utils.UnmarshalJSON(data, &connectionWorkdayReport, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionWorkdayReport = connectionWorkdayReport
		u.Type = ConnectionTypesTypeWorkdayReport
		return nil
	case "WORKFRONT":
		connectionWorkfront := new(ConnectionWorkfront)
		if err := utils.UnmarshalJSON(data, &connectionWorkfront, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionWorkfront = connectionWorkfront
		u.Type = ConnectionTypesTypeWorkfront
		return nil
	case "ZENDESK":
		connectionZendesk := new(ConnectionZendesk)
		if err := utils.UnmarshalJSON(data, &connectionZendesk, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionZendesk = connectionZendesk
		u.Type = ConnectionTypesTypeZendesk
		return nil
	case "ZOOM_PHONE":
		connectionZoomPhone := new(ConnectionZoomPhone)
		if err := utils.UnmarshalJSON(data, &connectionZoomPhone, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionZoomPhone = connectionZoomPhone
		u.Type = ConnectionTypesTypeZoomPhone
		return nil
	case "ZUORA":
		connectionZuora := new(ConnectionZuora)
		if err := utils.UnmarshalJSON(data, &connectionZuora, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionZuora = connectionZuora
		u.Type = ConnectionTypesTypeZuora
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConnectionTypes) MarshalJSON() ([]byte, error) {
	if u.ConnectionActiveCampaign != nil {
		return utils.MarshalJSON(u.ConnectionActiveCampaign, "", true)
	}

	if u.ConnectionBigQuery != nil {
		return utils.MarshalJSON(u.ConnectionBigQuery, "", true)
	}

	if u.ConnectionBing != nil {
		return utils.MarshalJSON(u.ConnectionBing, "", true)
	}

	if u.ConnectionBlackline != nil {
		return utils.MarshalJSON(u.ConnectionBlackline, "", true)
	}

	if u.ConnectionCriteo != nil {
		return utils.MarshalJSON(u.ConnectionCriteo, "", true)
	}

	if u.ConnectionDb2 != nil {
		return utils.MarshalJSON(u.ConnectionDb2, "", true)
	}

	if u.ConnectionDb2Sharded != nil {
		return utils.MarshalJSON(u.ConnectionDb2Sharded, "", true)
	}

	if u.ConnectionDeltaLake != nil {
		return utils.MarshalJSON(u.ConnectionDeltaLake, "", true)
	}

	if u.ConnectionElasticSearch != nil {
		return utils.MarshalJSON(u.ConnectionElasticSearch, "", true)
	}

	if u.ConnectionElluminate != nil {
		return utils.MarshalJSON(u.ConnectionElluminate, "", true)
	}

	if u.ConnectionEloqua != nil {
		return utils.MarshalJSON(u.ConnectionEloqua, "", true)
	}

	if u.ConnectionFb != nil {
		return utils.MarshalJSON(u.ConnectionFb, "", true)
	}

	if u.ConnectionFifteenFive != nil {
		return utils.MarshalJSON(u.ConnectionFifteenFive, "", true)
	}

	if u.ConnectionFreshworks != nil {
		return utils.MarshalJSON(u.ConnectionFreshworks, "", true)
	}

	if u.ConnectionFtp != nil {
		return utils.MarshalJSON(u.ConnectionFtp, "", true)
	}

	if u.ConnectionGa != nil {
		return utils.MarshalJSON(u.ConnectionGa, "", true)
	}

	if u.ConnectionGong != nil {
		return utils.MarshalJSON(u.ConnectionGong, "", true)
	}

	if u.ConnectionGoogleAds != nil {
		return utils.MarshalJSON(u.ConnectionGoogleAds, "", true)
	}

	if u.ConnectionGoogleAnalyticsGa4 != nil {
		return utils.MarshalJSON(u.ConnectionGoogleAnalyticsGa4, "", true)
	}

	if u.ConnectionGoogleCloudStorage != nil {
		return utils.MarshalJSON(u.ConnectionGoogleCloudStorage, "", true)
	}

	if u.ConnectionGoogleSheets != nil {
		return utils.MarshalJSON(u.ConnectionGoogleSheets, "", true)
	}

	if u.ConnectionHubspot != nil {
		return utils.MarshalJSON(u.ConnectionHubspot, "", true)
	}

	if u.ConnectionImpactRadius != nil {
		return utils.MarshalJSON(u.ConnectionImpactRadius, "", true)
	}

	if u.ConnectionIntercom != nil {
		return utils.MarshalJSON(u.ConnectionIntercom, "", true)
	}

	if u.ConnectionJiraAlign != nil {
		return utils.MarshalJSON(u.ConnectionJiraAlign, "", true)
	}

	if u.ConnectionKafka != nil {
		return utils.MarshalJSON(u.ConnectionKafka, "", true)
	}

	if u.ConnectionKustomer != nil {
		return utils.MarshalJSON(u.ConnectionKustomer, "", true)
	}

	if u.ConnectionLdap != nil {
		return utils.MarshalJSON(u.ConnectionLdap, "", true)
	}

	if u.ConnectionLdapVirtualListView != nil {
		return utils.MarshalJSON(u.ConnectionLdapVirtualListView, "", true)
	}

	if u.ConnectionLinkedInAds != nil {
		return utils.MarshalJSON(u.ConnectionLinkedInAds, "", true)
	}

	if u.ConnectionMarketo != nil {
		return utils.MarshalJSON(u.ConnectionMarketo, "", true)
	}

	if u.ConnectionMixpanel != nil {
		return utils.MarshalJSON(u.ConnectionMixpanel, "", true)
	}

	if u.ConnectionMongo != nil {
		return utils.MarshalJSON(u.ConnectionMongo, "", true)
	}

	if u.ConnectionMysql != nil {
		return utils.MarshalJSON(u.ConnectionMysql, "", true)
	}

	if u.ConnectionMysqlSharded != nil {
		return utils.MarshalJSON(u.ConnectionMysqlSharded, "", true)
	}

	if u.ConnectionNetsuite != nil {
		return utils.MarshalJSON(u.ConnectionNetsuite, "", true)
	}

	if u.ConnectionNetsuiteV2 != nil {
		return utils.MarshalJSON(u.ConnectionNetsuiteV2, "", true)
	}

	if u.ConnectionOracle != nil {
		return utils.MarshalJSON(u.ConnectionOracle, "", true)
	}

	if u.ConnectionOracleSharded != nil {
		return utils.MarshalJSON(u.ConnectionOracleSharded, "", true)
	}

	if u.ConnectionOutlook != nil {
		return utils.MarshalJSON(u.ConnectionOutlook, "", true)
	}

	if u.ConnectionOutreach != nil {
		return utils.MarshalJSON(u.ConnectionOutreach, "", true)
	}

	if u.ConnectionPinterestAds != nil {
		return utils.MarshalJSON(u.ConnectionPinterestAds, "", true)
	}

	if u.ConnectionPostgres != nil {
		return utils.MarshalJSON(u.ConnectionPostgres, "", true)
	}

	if u.ConnectionPostgresSharded != nil {
		return utils.MarshalJSON(u.ConnectionPostgresSharded, "", true)
	}

	if u.ConnectionQuora != nil {
		return utils.MarshalJSON(u.ConnectionQuora, "", true)
	}

	if u.ConnectionRaveMedidata != nil {
		return utils.MarshalJSON(u.ConnectionRaveMedidata, "", true)
	}

	if u.ConnectionRecurly != nil {
		return utils.MarshalJSON(u.ConnectionRecurly, "", true)
	}

	if u.ConnectionRedshift != nil {
		return utils.MarshalJSON(u.ConnectionRedshift, "", true)
	}

	if u.ConnectionRedshiftSharded != nil {
		return utils.MarshalJSON(u.ConnectionRedshiftSharded, "", true)
	}

	if u.ConnectionS3DataLake != nil {
		return utils.MarshalJSON(u.ConnectionS3DataLake, "", true)
	}

	if u.ConnectionS3Input != nil {
		return utils.MarshalJSON(u.ConnectionS3Input, "", true)
	}

	if u.ConnectionSalesforce != nil {
		return utils.MarshalJSON(u.ConnectionSalesforce, "", true)
	}

	if u.ConnectionSalesforceMarketingCloud != nil {
		return utils.MarshalJSON(u.ConnectionSalesforceMarketingCloud, "", true)
	}

	if u.ConnectionSapHana != nil {
		return utils.MarshalJSON(u.ConnectionSapHana, "", true)
	}

	if u.ConnectionSapHanaSharded != nil {
		return utils.MarshalJSON(u.ConnectionSapHanaSharded, "", true)
	}

	if u.ConnectionSeismic != nil {
		return utils.MarshalJSON(u.ConnectionSeismic, "", true)
	}

	if u.ConnectionSftp != nil {
		return utils.MarshalJSON(u.ConnectionSftp, "", true)
	}

	if u.ConnectionShopify != nil {
		return utils.MarshalJSON(u.ConnectionShopify, "", true)
	}

	if u.ConnectionSkyward != nil {
		return utils.MarshalJSON(u.ConnectionSkyward, "", true)
	}

	if u.ConnectionSnapchatAds != nil {
		return utils.MarshalJSON(u.ConnectionSnapchatAds, "", true)
	}

	if u.ConnectionSnowflake != nil {
		return utils.MarshalJSON(u.ConnectionSnowflake, "", true)
	}

	if u.ConnectionSnowflakeSharded != nil {
		return utils.MarshalJSON(u.ConnectionSnowflakeSharded, "", true)
	}

	if u.ConnectionSQLServer != nil {
		return utils.MarshalJSON(u.ConnectionSQLServer, "", true)
	}

	if u.ConnectionSQLServerSharded != nil {
		return utils.MarshalJSON(u.ConnectionSQLServerSharded, "", true)
	}

	if u.ConnectionSquare != nil {
		return utils.MarshalJSON(u.ConnectionSquare, "", true)
	}

	if u.ConnectionStripe != nil {
		return utils.MarshalJSON(u.ConnectionStripe, "", true)
	}

	if u.ConnectionSumTotal != nil {
		return utils.MarshalJSON(u.ConnectionSumTotal, "", true)
	}

	if u.ConnectionTheTradeDesk != nil {
		return utils.MarshalJSON(u.ConnectionTheTradeDesk, "", true)
	}

	if u.ConnectionTikTokAds != nil {
		return utils.MarshalJSON(u.ConnectionTikTokAds, "", true)
	}

	if u.ConnectionTwilio != nil {
		return utils.MarshalJSON(u.ConnectionTwilio, "", true)
	}

	if u.ConnectionTwitter != nil {
		return utils.MarshalJSON(u.ConnectionTwitter, "", true)
	}

	if u.ConnectionUserDefinedAPI != nil {
		return utils.MarshalJSON(u.ConnectionUserDefinedAPI, "", true)
	}

	if u.ConnectionUserVoice != nil {
		return utils.MarshalJSON(u.ConnectionUserVoice, "", true)
	}

	if u.ConnectionVeeva != nil {
		return utils.MarshalJSON(u.ConnectionVeeva, "", true)
	}

	if u.ConnectionVerizonMedia != nil {
		return utils.MarshalJSON(u.ConnectionVerizonMedia, "", true)
	}

	if u.ConnectionWorkdayReport != nil {
		return utils.MarshalJSON(u.ConnectionWorkdayReport, "", true)
	}

	if u.ConnectionWorkfront != nil {
		return utils.MarshalJSON(u.ConnectionWorkfront, "", true)
	}

	if u.ConnectionZendesk != nil {
		return utils.MarshalJSON(u.ConnectionZendesk, "", true)
	}

	if u.ConnectionZoomPhone != nil {
		return utils.MarshalJSON(u.ConnectionZoomPhone, "", true)
	}

	if u.ConnectionZuora != nil {
		return utils.MarshalJSON(u.ConnectionZuora, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
