// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionCriteoType string

const (
	ConnectionCriteoTypeCriteo ConnectionCriteoType = "CRITEO"
)

func (e ConnectionCriteoType) ToPointer() *ConnectionCriteoType {
	return &e
}

func (e *ConnectionCriteoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CRITEO":
		*e = ConnectionCriteoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionCriteoType: %v", v)
	}
}

// ConnectionCriteoStatus - The current status of the connection.
type ConnectionCriteoStatus string

const (
	ConnectionCriteoStatusUnknown     ConnectionCriteoStatus = "UNKNOWN"
	ConnectionCriteoStatusUp          ConnectionCriteoStatus = "UP"
	ConnectionCriteoStatusDown        ConnectionCriteoStatus = "DOWN"
	ConnectionCriteoStatusResize      ConnectionCriteoStatus = "RESIZE"
	ConnectionCriteoStatusMaintenance ConnectionCriteoStatus = "MAINTENANCE"
	ConnectionCriteoStatusQuota       ConnectionCriteoStatus = "QUOTA"
	ConnectionCriteoStatusCreating    ConnectionCriteoStatus = "CREATING"
)

func (e ConnectionCriteoStatus) ToPointer() *ConnectionCriteoStatus {
	return &e
}

func (e *ConnectionCriteoStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionCriteoStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionCriteoStatus: %v", v)
	}
}

type ConnectionCriteo struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string               `json:"name"`
	Type ConnectionCriteoType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionCriteoStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// Your Client Id can be found under 'Developer Dashboard' > 'My apps'
	ClientID string `json:"clientId"`
	// Your Client Secret can be found under 'Developer Dashboard' > 'My apps'
	ClientSecret string `json:"clientSecret"`
}

func (c ConnectionCriteo) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionCriteo) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionCriteo) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionCriteo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionCriteo) GetType() ConnectionCriteoType {
	if o == nil {
		return ConnectionCriteoType("")
	}
	return o.Type
}

func (o *ConnectionCriteo) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionCriteo) GetStatus() ConnectionCriteoStatus {
	if o == nil {
		return ConnectionCriteoStatus("")
	}
	return o.Status
}

func (o *ConnectionCriteo) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionCriteo) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ConnectionCriteo) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

type ConnectionCriteoInput struct {
	// The unique name of this connection.
	Name string               `json:"name"`
	Type ConnectionCriteoType `json:"type"`
	// Your Client Id can be found under 'Developer Dashboard' > 'My apps'
	ClientID string `json:"clientId"`
	// Your Client Secret can be found under 'Developer Dashboard' > 'My apps'
	ClientSecret string `json:"clientSecret"`
}

func (o *ConnectionCriteoInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionCriteoInput) GetType() ConnectionCriteoType {
	if o == nil {
		return ConnectionCriteoType("")
	}
	return o.Type
}

func (o *ConnectionCriteoInput) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ConnectionCriteoInput) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}
