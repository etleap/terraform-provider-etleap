// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type WarehouseUpdateTypesType string

const (
	WarehouseUpdateTypesTypeRedshift  WarehouseUpdateTypesType = "REDSHIFT"
	WarehouseUpdateTypesTypeSnowflake WarehouseUpdateTypesType = "SNOWFLAKE"
)

type WarehouseUpdateTypes struct {
	WarehouseRedshiftUpdate  *WarehouseRedshiftUpdate
	WarehouseSnowflakeUpdate *WarehouseSnowflakeUpdate

	Type WarehouseUpdateTypesType
}

func CreateWarehouseUpdateTypesRedshift(redshift WarehouseRedshiftUpdate) WarehouseUpdateTypes {
	typ := WarehouseUpdateTypesTypeRedshift
	typStr := WarehouseRedshiftUpdateType(typ)
	redshift.Type = typStr

	return WarehouseUpdateTypes{
		WarehouseRedshiftUpdate: &redshift,
		Type:                    typ,
	}
}

func CreateWarehouseUpdateTypesSnowflake(snowflake WarehouseSnowflakeUpdate) WarehouseUpdateTypes {
	typ := WarehouseUpdateTypesTypeSnowflake
	typStr := WarehouseSnowflakeUpdateType(typ)
	snowflake.Type = typStr

	return WarehouseUpdateTypes{
		WarehouseSnowflakeUpdate: &snowflake,
		Type:                     typ,
	}
}

func (u *WarehouseUpdateTypes) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "REDSHIFT":
		warehouseRedshiftUpdate := new(WarehouseRedshiftUpdate)
		if err := utils.UnmarshalJSON(data, &warehouseRedshiftUpdate, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.WarehouseRedshiftUpdate = warehouseRedshiftUpdate
		u.Type = WarehouseUpdateTypesTypeRedshift
		return nil
	case "SNOWFLAKE":
		warehouseSnowflakeUpdate := new(WarehouseSnowflakeUpdate)
		if err := utils.UnmarshalJSON(data, &warehouseSnowflakeUpdate, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.WarehouseSnowflakeUpdate = warehouseSnowflakeUpdate
		u.Type = WarehouseUpdateTypesTypeSnowflake
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WarehouseUpdateTypes) MarshalJSON() ([]byte, error) {
	if u.WarehouseRedshiftUpdate != nil {
		return utils.MarshalJSON(u.WarehouseRedshiftUpdate, "", true)
	}

	if u.WarehouseSnowflakeUpdate != nil {
		return utils.MarshalJSON(u.WarehouseSnowflakeUpdate, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
