// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionRedshiftShardedUpdateType string

const (
	ConnectionRedshiftShardedUpdateTypeRedshiftSharded ConnectionRedshiftShardedUpdateType = "REDSHIFT_SHARDED"
)

func (e ConnectionRedshiftShardedUpdateType) ToPointer() *ConnectionRedshiftShardedUpdateType {
	return &e
}

func (e *ConnectionRedshiftShardedUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REDSHIFT_SHARDED":
		*e = ConnectionRedshiftShardedUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionRedshiftShardedUpdateType: %v", v)
	}
}

type ConnectionRedshiftShardedUpdate struct {
	// The unique name of this connection.
	Name *string                             `json:"name,omitempty"`
	Type ConnectionRedshiftShardedUpdateType `json:"type"`
	// Whether this connection should be marked as active.
	Active *bool `json:"active,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	// If not specified, the default schema will be used.
	Schema *string `json:"schema,omitempty"`
	// When Etleap creates Redshift tables, SELECT privileges will be granted to user groups specified here.
	UserGroups []string `json:"userGroups,omitempty"`
	// Are you going to use this connection only as a source for pipelines? When `true`, this connection will only be available as an ETL source only, and Etleap will skip the creation of an audit table in the database.
	SourceOnly *bool `json:"sourceOnly,omitempty"`
	// Should Etleap prefix each load query with metadata? More info can be found <a href="https://docs.etleap.com/docs/documentation/ba7744fcf6114-redshift-optional-connection-settings#include-query-tags">here</a>.
	QueryTagsEnabled *bool `json:"queryTagsEnabled,omitempty"`
	// The id of another Etleap Redshift connection. If specified, Etleap will make the data loaded available to the other cluster via Redshift Data Sharing.
	DataSharingDestinations []string `json:"dataSharingDestinations,omitempty"`
	// Etleap will create VARCHAR columns with the minimal required width based on the data it's loading, and expand the column width as required. This can improve performance but there are <a target="_blank" href="https://docs.etleap.com/docs/documentation/ba7744fcf6114-redshift-optional-connection-settings#enable-dynamic-varchar-widths">some limitations</a>. Note: if set to `true`, it can't later be updated to `false`.
	DynamicVarcharWidthEnabled *bool           `json:"dynamicVarcharWidthEnabled,omitempty"`
	Shards                     []DatabaseShard `json:"shards,omitempty"`
}

func (o *ConnectionRedshiftShardedUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionRedshiftShardedUpdate) GetType() ConnectionRedshiftShardedUpdateType {
	if o == nil {
		return ConnectionRedshiftShardedUpdateType("")
	}
	return o.Type
}

func (o *ConnectionRedshiftShardedUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionRedshiftShardedUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionRedshiftShardedUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionRedshiftShardedUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionRedshiftShardedUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionRedshiftShardedUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionRedshiftShardedUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionRedshiftShardedUpdate) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *ConnectionRedshiftShardedUpdate) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *ConnectionRedshiftShardedUpdate) GetSourceOnly() *bool {
	if o == nil {
		return nil
	}
	return o.SourceOnly
}

func (o *ConnectionRedshiftShardedUpdate) GetQueryTagsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.QueryTagsEnabled
}

func (o *ConnectionRedshiftShardedUpdate) GetDataSharingDestinations() []string {
	if o == nil {
		return nil
	}
	return o.DataSharingDestinations
}

func (o *ConnectionRedshiftShardedUpdate) GetDynamicVarcharWidthEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.DynamicVarcharWidthEnabled
}

func (o *ConnectionRedshiftShardedUpdate) GetShards() []DatabaseShard {
	if o == nil {
		return nil
	}
	return o.Shards
}
