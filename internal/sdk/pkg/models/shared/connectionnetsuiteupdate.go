// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionNetsuiteUpdateType string

const (
	ConnectionNetsuiteUpdateTypeNetsuite ConnectionNetsuiteUpdateType = "NETSUITE"
)

func (e ConnectionNetsuiteUpdateType) ToPointer() *ConnectionNetsuiteUpdateType {
	return &e
}

func (e *ConnectionNetsuiteUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NETSUITE":
		*e = ConnectionNetsuiteUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionNetsuiteUpdateType: %v", v)
	}
}

type ConnectionNetsuiteUpdate struct {
	// Whether this connection should be marked as active.
	Active *bool                         `json:"active,omitempty"`
	Type   *ConnectionNetsuiteUpdateType `json:"type"`
	// The unique name of this connection.
	Name *string `json:"name,omitempty"`
	// The update schedule defines when Etleap should automatically check the source for new data. See <a href= "https://support.etleap.com/hc/en-us/articles/360019768853-What-is-the-difference-between-a-Refresh-and-an-Update-" target="_blank" rel="noopener">Updates &amp; Refreshes</a> for more information. When undefined, the pipeline will default to the schedule set on the source connection.
	UpdateSchedule *UpdateScheduleTypes `json:"updateSchedule,omitempty"`
	Password       *string              `json:"password,omitempty"`
	Email          *string              `json:"email,omitempty"`
	// Under Setup -> Integration -> SOAP Web Services Preferences.
	AccountID *string `json:"accountId,omitempty"`
}

func (o *ConnectionNetsuiteUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ConnectionNetsuiteUpdate) GetType() *ConnectionNetsuiteUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConnectionNetsuiteUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectionNetsuiteUpdate) GetUpdateSchedule() *UpdateScheduleTypes {
	if o == nil {
		return nil
	}
	return o.UpdateSchedule
}

func (o *ConnectionNetsuiteUpdate) GetUpdateScheduleMonthly() *UpdateScheduleModeMonthly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeMonthly
	}
	return nil
}

func (o *ConnectionNetsuiteUpdate) GetUpdateScheduleHourly() *UpdateScheduleModeHourly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeHourly
	}
	return nil
}

func (o *ConnectionNetsuiteUpdate) GetUpdateScheduleInterval() *UpdateScheduleModeInterval {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeInterval
	}
	return nil
}

func (o *ConnectionNetsuiteUpdate) GetUpdateScheduleDaily() *UpdateScheduleModeDaily {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeDaily
	}
	return nil
}

func (o *ConnectionNetsuiteUpdate) GetUpdateScheduleWeekly() *UpdateScheduleModeWeekly {
	if v := o.GetUpdateSchedule(); v != nil {
		return v.UpdateScheduleModeWeekly
	}
	return nil
}

func (o *ConnectionNetsuiteUpdate) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *ConnectionNetsuiteUpdate) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ConnectionNetsuiteUpdate) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}
