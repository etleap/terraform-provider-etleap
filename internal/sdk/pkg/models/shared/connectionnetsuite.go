// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionNetsuiteType string

const (
	ConnectionNetsuiteTypeNetsuite ConnectionNetsuiteType = "NETSUITE"
)

func (e ConnectionNetsuiteType) ToPointer() *ConnectionNetsuiteType {
	return &e
}

func (e *ConnectionNetsuiteType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NETSUITE":
		*e = ConnectionNetsuiteType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionNetsuiteType: %v", v)
	}
}

// ConnectionNetsuiteStatus - The current status of the connection.
type ConnectionNetsuiteStatus string

const (
	ConnectionNetsuiteStatusUnknown     ConnectionNetsuiteStatus = "UNKNOWN"
	ConnectionNetsuiteStatusUp          ConnectionNetsuiteStatus = "UP"
	ConnectionNetsuiteStatusDown        ConnectionNetsuiteStatus = "DOWN"
	ConnectionNetsuiteStatusResize      ConnectionNetsuiteStatus = "RESIZE"
	ConnectionNetsuiteStatusMaintenance ConnectionNetsuiteStatus = "MAINTENANCE"
	ConnectionNetsuiteStatusQuota       ConnectionNetsuiteStatus = "QUOTA"
	ConnectionNetsuiteStatusCreating    ConnectionNetsuiteStatus = "CREATING"
)

func (e ConnectionNetsuiteStatus) ToPointer() *ConnectionNetsuiteStatus {
	return &e
}

func (e *ConnectionNetsuiteStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionNetsuiteStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionNetsuiteStatus: %v", v)
	}
}

type ConnectionNetsuite struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                 `json:"name"`
	Type ConnectionNetsuiteType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionNetsuiteStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	Email      string    `json:"email"`
	// Under Setup -> Integration -> SOAP Web Services Preferences.
	AccountID string `json:"accountId"`
}

func (c ConnectionNetsuite) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionNetsuite) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionNetsuite) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionNetsuite) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionNetsuite) GetType() ConnectionNetsuiteType {
	if o == nil {
		return ConnectionNetsuiteType("")
	}
	return o.Type
}

func (o *ConnectionNetsuite) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionNetsuite) GetStatus() ConnectionNetsuiteStatus {
	if o == nil {
		return ConnectionNetsuiteStatus("")
	}
	return o.Status
}

func (o *ConnectionNetsuite) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionNetsuite) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *ConnectionNetsuite) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

type ConnectionNetsuiteInput struct {
	// The unique name of this connection.
	Name     string                 `json:"name"`
	Type     ConnectionNetsuiteType `json:"type"`
	Email    string                 `json:"email"`
	Password string                 `json:"password"`
	// Under Setup -> Integration -> SOAP Web Services Preferences.
	AccountID string `json:"accountId"`
}

func (o *ConnectionNetsuiteInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionNetsuiteInput) GetType() ConnectionNetsuiteType {
	if o == nil {
		return ConnectionNetsuiteType("")
	}
	return o.Type
}

func (o *ConnectionNetsuiteInput) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *ConnectionNetsuiteInput) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *ConnectionNetsuiteInput) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}
