// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceJiraType string

const (
	SourceJiraTypeJira SourceJiraType = "JIRA"
)

func (e SourceJiraType) ToPointer() *SourceJiraType {
	return &e
}

func (e *SourceJiraType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JIRA":
		*e = SourceJiraType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceJiraType: %v", v)
	}
}

type SourceJira struct {
	// The universally unique identifier for the source.
	ConnectionID string         `json:"connectionId"`
	Type         SourceJiraType `json:"type"`
	// Notify if we can't extract for `x` hours. Setting it to `null` disables the notification. Defaults to `null`.
	LatencyThreshold *int64 `json:"latencyThreshold,omitempty"`
	// The JIRA entity. Example values: [Issues, Issue Links, Issue Types, Changelog, Comments, Worklogs, Fields, Groups, Group Members, Priorities, Projects, Resolutions, Statuses, Status Categories, Users, Multiple Choice Field]
	Entity string `json:"entity"`
}

func (o *SourceJira) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *SourceJira) GetType() SourceJiraType {
	if o == nil {
		return SourceJiraType("")
	}
	return o.Type
}

func (o *SourceJira) GetLatencyThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.LatencyThreshold
}

func (o *SourceJira) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}
