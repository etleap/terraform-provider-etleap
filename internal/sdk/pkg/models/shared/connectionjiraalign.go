// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
	"time"
)

type ConnectionJiraAlignType string

const (
	ConnectionJiraAlignTypeJiraAlign ConnectionJiraAlignType = "JIRA_ALIGN"
)

func (e ConnectionJiraAlignType) ToPointer() *ConnectionJiraAlignType {
	return &e
}

func (e *ConnectionJiraAlignType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JIRA_ALIGN":
		*e = ConnectionJiraAlignType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionJiraAlignType: %v", v)
	}
}

// ConnectionJiraAlignStatus - The current status of the connection.
type ConnectionJiraAlignStatus string

const (
	ConnectionJiraAlignStatusUnknown     ConnectionJiraAlignStatus = "UNKNOWN"
	ConnectionJiraAlignStatusUp          ConnectionJiraAlignStatus = "UP"
	ConnectionJiraAlignStatusDown        ConnectionJiraAlignStatus = "DOWN"
	ConnectionJiraAlignStatusResize      ConnectionJiraAlignStatus = "RESIZE"
	ConnectionJiraAlignStatusMaintenance ConnectionJiraAlignStatus = "MAINTENANCE"
	ConnectionJiraAlignStatusQuota       ConnectionJiraAlignStatus = "QUOTA"
	ConnectionJiraAlignStatusCreating    ConnectionJiraAlignStatus = "CREATING"
)

func (e ConnectionJiraAlignStatus) ToPointer() *ConnectionJiraAlignStatus {
	return &e
}

func (e *ConnectionJiraAlignStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "UP":
		fallthrough
	case "DOWN":
		fallthrough
	case "RESIZE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "QUOTA":
		fallthrough
	case "CREATING":
		*e = ConnectionJiraAlignStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionJiraAlignStatus: %v", v)
	}
}

type ConnectionJiraAlign struct {
	// The unique identifier of the connection.
	ID string `json:"id"`
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionJiraAlignType `json:"type"`
	// Whether this connection has been marked as active.
	Active bool `json:"active"`
	// The current status of the connection.
	Status ConnectionJiraAlignStatus `json:"status"`
	// The date and time when then the connection was created.
	CreateDate time.Time `json:"createDate"`
	// Your JIRA Align subdomain (i.e. SUBDOMAIN.jiraalign.com)
	Subdomain string `json:"subdomain"`
}

func (c ConnectionJiraAlign) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionJiraAlign) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionJiraAlign) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConnectionJiraAlign) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionJiraAlign) GetType() ConnectionJiraAlignType {
	if o == nil {
		return ConnectionJiraAlignType("")
	}
	return o.Type
}

func (o *ConnectionJiraAlign) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ConnectionJiraAlign) GetStatus() ConnectionJiraAlignStatus {
	if o == nil {
		return ConnectionJiraAlignStatus("")
	}
	return o.Status
}

func (o *ConnectionJiraAlign) GetCreateDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreateDate
}

func (o *ConnectionJiraAlign) GetSubdomain() string {
	if o == nil {
		return ""
	}
	return o.Subdomain
}

type ConnectionJiraAlignInput struct {
	// The unique name of this connection.
	Name string                  `json:"name"`
	Type ConnectionJiraAlignType `json:"type"`
	// Your JIRA Align subdomain (i.e. SUBDOMAIN.jiraalign.com)
	Subdomain string `json:"subdomain"`
	// The client API key required to authenticate with the JIRA Align API.
	APIKey string `json:"apiKey"`
}

func (o *ConnectionJiraAlignInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConnectionJiraAlignInput) GetType() ConnectionJiraAlignType {
	if o == nil {
		return ConnectionJiraAlignType("")
	}
	return o.Type
}

func (o *ConnectionJiraAlignInput) GetSubdomain() string {
	if o == nil {
		return ""
	}
	return o.Subdomain
}

func (o *ConnectionJiraAlignInput) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}
