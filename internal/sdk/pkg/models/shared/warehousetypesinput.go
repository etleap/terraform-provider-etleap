// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/utils"
)

type WarehouseTypesInputType string

const (
	WarehouseTypesInputTypeRedshift  WarehouseTypesInputType = "REDSHIFT"
	WarehouseTypesInputTypeSnowflake WarehouseTypesInputType = "SNOWFLAKE"
)

type WarehouseTypesInput struct {
	WarehouseRedshiftInput  *WarehouseRedshiftInput
	WarehouseSnowflakeInput *WarehouseSnowflakeInput

	Type WarehouseTypesInputType
}

func CreateWarehouseTypesInputRedshift(redshift WarehouseRedshiftInput) WarehouseTypesInput {
	typ := WarehouseTypesInputTypeRedshift

	typStr := WarehouseRedshiftType(typ)
	redshift.Type = typStr

	return WarehouseTypesInput{
		WarehouseRedshiftInput: &redshift,
		Type:                   typ,
	}
}

func CreateWarehouseTypesInputSnowflake(snowflake WarehouseSnowflakeInput) WarehouseTypesInput {
	typ := WarehouseTypesInputTypeSnowflake

	typStr := WarehouseSnowflakeType(typ)
	snowflake.Type = typStr

	return WarehouseTypesInput{
		WarehouseSnowflakeInput: &snowflake,
		Type:                    typ,
	}
}

func (u *WarehouseTypesInput) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "REDSHIFT":
		warehouseRedshiftInput := new(WarehouseRedshiftInput)
		if err := utils.UnmarshalJSON(data, &warehouseRedshiftInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.WarehouseRedshiftInput = warehouseRedshiftInput
		u.Type = WarehouseTypesInputTypeRedshift
		return nil
	case "SNOWFLAKE":
		warehouseSnowflakeInput := new(WarehouseSnowflakeInput)
		if err := utils.UnmarshalJSON(data, &warehouseSnowflakeInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.WarehouseSnowflakeInput = warehouseSnowflakeInput
		u.Type = WarehouseTypesInputTypeSnowflake
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WarehouseTypesInput) MarshalJSON() ([]byte, error) {
	if u.WarehouseRedshiftInput != nil {
		return utils.MarshalJSON(u.WarehouseRedshiftInput, "", true)
	}

	if u.WarehouseSnowflakeInput != nil {
		return utils.MarshalJSON(u.WarehouseSnowflakeInput, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
