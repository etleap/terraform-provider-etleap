// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/etleap/terraform-provider-etleap/internal/sdk/pkg/models/shared"
	"net/http"
)

type InitiateOAuth2Request struct {
	// Type of connection to initiate the OAuth2 flow for
	Type shared.Oauth2ConnectionType `queryParam:"style=form,explode=true,name=type"`
	// Etleap API access key identifying the user
	ClientID string `queryParam:"style=form,explode=true,name=client_id"`
	// URL the user will be returned to after the OAuth2 authentication step. The redirect URI must be whitelisted in Etleap.
	RedirectURI string `queryParam:"style=form,explode=true,name=redirect_uri"`
	// Any relay state to be persisted throughout the flow.
	State *string `queryParam:"style=form,explode=true,name=state"`
	// Required for Square
	ApplicationID *string `queryParam:"style=form,explode=true,name=application_id"`
	// Required for Salesforce
	Sandbox *bool `queryParam:"style=form,explode=true,name=sandbox"`
	// Required for Zendesk
	Subdomain *string `queryParam:"style=form,explode=true,name=subdomain"`
	// Required for Zoom Phone and Seismic
	ConnectionClientID *string `queryParam:"style=form,explode=true,name=connection_client_id"`
	// Required for Seismic
	TenantName *string `queryParam:"style=form,explode=true,name=tenant_name"`
	// Required for Square
	SandboxAccount *bool `queryParam:"style=form,explode=true,name=sandbox_account"`
}

func (o *InitiateOAuth2Request) GetType() shared.Oauth2ConnectionType {
	if o == nil {
		return shared.Oauth2ConnectionType("")
	}
	return o.Type
}

func (o *InitiateOAuth2Request) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *InitiateOAuth2Request) GetRedirectURI() string {
	if o == nil {
		return ""
	}
	return o.RedirectURI
}

func (o *InitiateOAuth2Request) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *InitiateOAuth2Request) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *InitiateOAuth2Request) GetSandbox() *bool {
	if o == nil {
		return nil
	}
	return o.Sandbox
}

func (o *InitiateOAuth2Request) GetSubdomain() *string {
	if o == nil {
		return nil
	}
	return o.Subdomain
}

func (o *InitiateOAuth2Request) GetConnectionClientID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectionClientID
}

func (o *InitiateOAuth2Request) GetTenantName() *string {
	if o == nil {
		return nil
	}
	return o.TenantName
}

func (o *InitiateOAuth2Request) GetSandboxAccount() *bool {
	if o == nil {
		return nil
	}
	return o.SandboxAccount
}

type InitiateOAuth2Response struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Bad Request
	Errors  *shared.Errors
	Headers map[string][]string
}

func (o *InitiateOAuth2Response) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *InitiateOAuth2Response) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *InitiateOAuth2Response) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *InitiateOAuth2Response) GetErrors() *shared.Errors {
	if o == nil {
		return nil
	}
	return o.Errors
}

func (o *InitiateOAuth2Response) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
